export var MapKit;
(function (MapKit) {
})(MapKit || (MapKit = {}));
export const mapkit = window.mapkit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwa2l0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWFwcGxlLW1hcGtpdC9zcmMvbGliL21hcGtpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEtBQVcsTUFBTSxDQW03RnRCO0FBbjdGRCxXQUFpQixNQUFNO0FBbTdGdkIsQ0FBQyxFQW43RmdCLE1BQU0sS0FBTixNQUFNLFFBbTdGdEI7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQW9CLE1BQU0sQ0FBQyxNQUFhLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgbmFtZXNwYWNlIE1hcEtpdCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIGEgbWFwa2l0IG9iamVjdCBieSBwcm92aWRpbmcgYW4gYXV0aG9yaXphdGlvbiBjYWxsYmFjayBhbmQgbGFuZ3VhZ2UuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGluaXQob3B0aW9uczogTWFwS2l0SW5pdE9wdGlvbnMpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIGFuIGV2ZW50IHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgKGUuZy4sIFwiY29uZmlndXJhdGlvbi1jaGFuZ2VcIikuXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGludm9rZS4gbGlzdGVuZXIgaXMgcGFzc2VkIGFuXHJcbiAgICAgKiBFdmVudCBhcyBpdHMgc29sZSBhcmd1bWVudC5cclxuICAgICAqIEBwYXJhbSB0aGlzT2JqZWN0IEFuIG9iamVjdCBzZXQgYXMgdGhlIHRoaXMga2V5d29yZCBvbiB0aGUgbGlzdGVuZXIgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXI8VD4oXHJcbiAgICAgICAgdHlwZTogSW5pdGlhbGl6YXRpb25FdmVudFR5cGUsXHJcbiAgICAgICAgbGlzdGVuZXI6ICh0aGlzOiBULCBldmVudDogSW5pdGlhbGl6YXRpb25FdmVudCkgPT4gdm9pZCxcclxuICAgICAgICB0aGlzT2JqZWN0PzogVFxyXG4gICAgKTogdm9pZDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVuc3Vic2NyaWJlcyBhIGxpc3RlbmVyIGZ1bmN0aW9uIGZyb20gYW4gZXZlbnQgdHlwZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiBldmVudCAoZS5nLiwgXCJjb25maWd1cmF0aW9uLWNoYW5nZVwiKS5cclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlLlxyXG4gICAgICogQHBhcmFtIHRoaXNPYmplY3QgQW4gb2JqZWN0IHNldCBhcyB0aGUgdGhpcyBrZXl3b3JkIG9uIHRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcjxUPihcclxuICAgICAgICB0eXBlOiBJbml0aWFsaXphdGlvbkV2ZW50VHlwZSxcclxuICAgICAgICBsaXN0ZW5lcjogKHRoaXM6IFQsIGV2ZW50OiBJbml0aWFsaXphdGlvbkV2ZW50KSA9PiB2b2lkLFxyXG4gICAgICAgIHRoaXNPYmplY3Q/OiBUXHJcbiAgICApOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBsYW5ndWFnZSBJRCBpbmRpY2F0aW5nIHRoZSBzZWxlY3RlZCBsYW5ndWFnZS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgbGV0IGxhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBidWlsZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNvbnN0IGJ1aWxkOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSB2ZXJzaW9uIG9mIE1hcEtpdCBKUy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY29uc3QgdmVyc2lvbjogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6YXRpb24gb3B0aW9ucyBmb3IgTWFwS2l0IEpTLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgTWFwS2l0SW5pdE9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBvYnRhaW5zIGEgdG9rZW4uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gZG9uZSBBIGZ1bmN0aW9uIHRoYXQgY29tcGxldGVzIHRoZSBNYXBLaXQgSlMgdG9rZW4gcmVxdWVzdC4gQ2FsbGVkXHJcbiAgICAgICAgICogYWZ0ZXIgY3JlYXRpbmcgYSBuZXcgdG9rZW4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXV0aG9yaXphdGlvbkNhbGxiYWNrOiAoZG9uZTogKHRva2VuOiBzdHJpbmcpID0+IHZvaWQpID0+IHZvaWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gSUQgdGhhdCBpbmRpY2F0ZXMgdGhlIHByZWZlcnJlZCBsYW5ndWFnZSBpbiB3aGljaCB0byBkaXNwbGF5IG1hcFxyXG4gICAgICAgICAqIGxhYmVscywgY29udHJvbHMsIGRpcmVjdGlvbnMsIGFuZCBvdGhlciB0ZXh0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RhbnRzIGluZGljYXRpbmcgdGhlIHZpc2liaWxpdHkgb2YgZGlmZmVyZW50IGFkYXB0aXZlIG1hcCBmZWF0dXJlcy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY29uc3QgRmVhdHVyZVZpc2liaWxpdHk6IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGNvbnN0YW50IGluZGljYXRpbmcgdGhhdCBmZWF0dXJlIHZpc2liaWxpdHkgYWRhcHRzIHRvIHRoZSBjdXJyZW50IG1hcCBzdGF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSBBZGFwdGl2ZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgY29uc3RhbnQgaW5kaWNhdGluZyB0aGF0IHRoZSBmZWF0dXJlIGlzIGFsd2F5cyBoaWRkZW4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVhZG9ubHkgSGlkZGVuOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBjb25zdGFudCBpbmRpY2F0aW5nIHRoYXQgdGhlIGZlYXR1cmUgaXMgYWx3YXlzIHZpc2libGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVhZG9ubHkgVmlzaWJsZTogc3RyaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICBleHBvcnQgZGVjbGFyZSB0eXBlIEluaXRpYWxpemF0aW9uRXZlbnRUeXBlID0gXCJjb25maWd1cmF0aW9uLWNoYW5nZVwiIHwgXCJlcnJvclwiO1xyXG5cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJbml0aWFsaXphdGlvbkV2ZW50IHtcclxuICAgICAgICBzdGF0dXM6IFwiSW5pdGlhbGl6ZWRcIiB8IFwiUmVmcmVzaGVkXCIgfCBcIlVuYXV0aG9yaXplZFwiIHwgXCJUb28gTWFueSBSZXF1ZXN0c1wiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gZW1iZWRkYWJsZSBpbnRlcmFjdGl2ZSBtYXAgdGhhdCB5b3UgYWRkIHRvIGEgd2VicGFnZS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWFwIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgbWFwIHRoYXQgeW91IGVtYmVkIG9uIGEgd2VicGFnZSwgYW5kIGluaXRpYWxpemVzIGl0cyBkaXNwbGF5XHJcbiAgICAgICAgICogcHJvcGVydGllcyBhbmQgb3RoZXIgb3B0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJlbnQgcGFyZW50IEEgRE9NIGVsZW1lbnQgb3IgdGhlIElEIG9mIGEgRE9NIGVsZW1lbnQgdG8gdXNlIGFzIHRoaXNcclxuICAgICAgICAgKiBtYXAncyBjb250YWluZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHBhcmVudFxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIG9wdGlvbnMgZm9yIGluaXRpYWxpemluZyBhIG1hcCdzXHJcbiAgICAgICAgICogZmVhdHVyZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IocGFyZW50OiBzdHJpbmcgfCBFbGVtZW50LCBvcHRpb25zPzogTWFwQ29uc3RydWN0b3JPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBoYW5kbGUgZXZlbnRzIHRyaWdnZXJlZCBieSB1c2VyIGludGVyYWN0aW9uc1xyXG4gICAgICAgICAqIGFuZCB0aGUgZnJhbWV3b3JrLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUgb2YgaW50ZXJlc3QgKGUuZy4sIFwic2VsZWN0XCIpLlxyXG4gICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gaW52b2tlLiBMaXN0ZW5lciBpcyBwYXNzZWQgYVxyXG4gICAgICAgICAqIE1hcCBldmVudCBhcyBpdHMgc29sZSBhcmd1bWVudC5cclxuICAgICAgICAgKiBAcGFyYW0gdGhpc09iamVjdCBBbiBvYmplY3QgdG8gYmUgc2V0IGFzIHRoZSB0aGlzIGtleXdvcmQgb24gdGhlIGxpc3RlbmVyXHJcbiAgICAgICAgICogZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjxULCBLIGV4dGVuZHMga2V5b2YgTWFwRXZlbnRzPHRoaXM+PihcclxuICAgICAgICAgICAgdHlwZTogSyxcclxuICAgICAgICAgICAgbGlzdGVuZXI6ICh0aGlzOiBULCBldmVudDogTWFwRXZlbnRzPHRoaXM+W0tdKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0aGlzT2JqZWN0PzogVFxyXG4gICAgICAgICk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxULCBLIGV4dGVuZHMga2V5b2YgTWFwRXZlbnRzPHRoaXM+PihcclxuICAgICAgICAgICAgdHlwZTogSyxcclxuICAgICAgICAgICAgbGlzdGVuZXI6ICh0eXBlOiBULCBldmVudDogTWFwRXZlbnRzPHRoaXM+W0tdKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0aGlzT2JqZWN0PzogVFxyXG4gICAgICAgICk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgdGhlIG1hcCdzIGVsZW1lbnQgZnJvbSB0aGUgRE9NIGFuZCByZWxlYXNlcyBpbnRlcm5hbCByZWZlcmVuY2VzIHRvXHJcbiAgICAgICAgICogdGhpcyBtYXAgdG8gZnJlZSB1cCBtZW1vcnkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVzdHJveSgpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFwJ3MgRE9NIGVsZW1lbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudDtcclxuXHJcbiAgICAgICAgLy8gQWNjZXNzaW5nIEludGVyYWN0aW9uIFByb3BlcnRpZXNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIGlmIG1hcCByb3RhdGlvbiBpcyBhdmFpbGFibGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNSb3RhdGlvbkF2YWlsYWJsZTogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHVzZXIgbWF5IHJvdGF0ZSB0aGUgbWFwIHVzaW5nXHJcbiAgICAgICAgICogdGhlIGNvbXBhc3MgY29udHJvbCBvciBhIHJvdGF0ZSBnZXN0dXJlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzUm90YXRpb25FbmFibGVkOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgdXNlciBtYXkgc2Nyb2xsIHRoZSBtYXAgd2l0aFxyXG4gICAgICAgICAqIGEgcG9pbnRpbmcgZGV2aWNlIG9yIHdpdGggZ2VzdHVyZXMgb24gYSB0b3VjaHNjcmVlbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1Njcm9sbEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIG1heSB6b29tIGluIGFuZCBvdXQgb25cclxuICAgICAgICAgKiB0aGUgbWFwIHVzaW5nIHBpbmNoIGdlc3R1cmVzIG9yIHRoZSB6b29tIGNvbnRyb2wuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNab29tRW5hYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLy8gTWFuaXB1bGF0aW5nIHRoZSBWaXNpYmxlIFBvcnRpb24gb2YgdGhlIE1hcFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFwIGNvb3JkaW5hdGUgYXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwIHZpZXcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2VudGVyOiBDb29yZGluYXRlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDZW50ZXJzIHRoZSBtYXAgdG8gdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGUsIHdpdGggb3B0aW9uYWwgYW5pbWF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENlbnRlckFuaW1hdGVkKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIGFuaW1hdGU/OiBib29sZWFuKTogdGhpcztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFyZWEgY3VycmVudGx5IGRpc3BsYXllZCBieSB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZ2lvbjogQ29vcmRpbmF0ZVJlZ2lvbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhbmdlcyB0aGUgbWFwJ3MgcmVnaW9uIHRvIHRoZSByZWdpb24gcHJvdmlkZWQsIHdpdGggb3B0aW9uYWwgYW5pbWF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJlZ2lvbkFuaW1hdGVkKHJlZ2lvbjogQ29vcmRpbmF0ZVJlZ2lvbiwgYW5pbWF0ZT86IGJvb2xlYW4pOiB0aGlzO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFwJ3Mgcm90YXRpb24sIGluIGRlZ3JlZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcm90YXRpb246IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhbmdlcyB0aGUgbWFwJ3Mgcm90YXRpb24gc2V0dGluZyB0byB0aGUgbnVtYmVyIG9mIGRlZ3JlZXMgc3BlY2lmaWVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJvdGF0aW9uQW5pbWF0ZWQoZGVncmVlczogbnVtYmVyLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB2aXNpYmxlIGFyZWEgb2YgdGhlIG1hcCBkZWZpbmVkIGluIG1hcCB1bml0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2aXNpYmxlTWFwUmVjdDogTWFwUmVjdDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhbmdlcyB0aGUgbWFwJ3MgdmlzaWJsZSBtYXAgcmVjdGFuZ2xlIHRvIHRoZSBzcGVjaWZpZWQgbWFwIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRWaXNpYmxlTWFwUmVjdEFuaW1hdGVkKG1hcFJlY3Q6IE1hcFJlY3QsIGFuaW1hdGU/OiBib29sZWFuKTogdGhpcztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyBhIGNvbnN0cmFpbnQgZm9yIHRoZSBjZW50ZXIgb2YgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW1lcmFCb3VuZGFyeTogQ2FtZXJhQm91bmRhcnlEZXNjcmlwdGlvbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhbmdlcyB0aGUgbWFwJ3MgY2FtZXJhIGJvdW5kYXJ5IHdpdGggYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRDYW1lcmFCb3VuZGFyeUFuaW1hdGVkKGNvb3JkaW5hdGVSZWdpb25Pck1hcFJlY3Q6IENvb3JkaW5hdGVSZWdpb24gfCBNYXBSZWN0LCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIGFsdGl0dWRlIG9mIHRoZSBjYW1lcmEgYWJvdmUgdGhlIGNlbnRlciBvZiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbWVyYURpc3RhbmNlOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoYW5nZXMgdGhlIG1hcCdzIGNhbWVyYSBkaXN0YW5jZSB3aXRoIGFuIGFuaW1hdGVkIHRyYW5zaXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Q2FtZXJhRGlzdGFuY2VBbmltYXRlZChkaXN0YW5jZTogbnVtYmVyLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNldHMgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gZGlzdGFuY2Ugb2YgdGhlIGNhbWVyYSBmcm9tIHRoZSBtYXAgY2VudGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbWVyYVpvb21SYW5nZTogQ2FtZXJhWm9vbVJhbmdlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGFuZ2VzIHRoZSBtYXAncyBjYW1lcmEgem9vbSByYW5nZSB3aXRoIGFuIGFuaW1hdGVkIHRyYW5zaXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Q2FtZXJhWm9vbVJhbmdlQW5pbWF0ZWQoY2FtZXJhWm9vbVJhbmdlOiBDYW1lcmFab29tUmFuZ2UsIGFuaW1hdGU/OiBib29sZWFuKTogdGhpcztcclxuXHJcbiAgICAgICAgLy8gQ29uZmlndXJpbmcgdGhlIE1hcCdzIEFwcGVhcmFuY2VcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uc3RhbnRzIGluZGljYXRpbmcgdGhlIGNvbG9yIHNjaGVtZSBvZiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyByZWFkb25seSBDb2xvclNjaGVtZXM6IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgY29uc3RhbnQgaW5kaWNhdGluZyBhIGxpZ2h0IGNvbG9yIHNjaGVtZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJlYWRvbmx5IExpZ2h0OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIGNvbnN0YW50IGluZGljYXRpbmcgYSBkYXJrIGNvbG9yIHNjaGVtZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJlYWRvbmx5IERhcms6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0YW50cyByZXByZXNlbnRpbmcgdGhlIHR5cGUgb2YgbWFwIHRvIGRpc3BsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IE1hcFR5cGVzOiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIHN0cmVldCBtYXAgdGhhdCBzaG93cyB0aGUgcG9zaXRpb24gb2YgYWxsIHJvYWRzIGFuZCBzb21lIHJvYWQgbmFtZXMuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBTdGFuZGFyZDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBzdHJlZXQgbWFwIHdoZXJlIHlvdXIgZGF0YSBpcyBlbXBoYXNpemVkIG92ZXIgdGhlIHVuZGVybHlpbmcgbWFwIGRldGFpbHMuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBNdXRlZFN0YW5kYXJkOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIHNhdGVsbGl0ZSBpbWFnZSBvZiB0aGUgYXJlYSB3aXRoIHJvYWQgYW5kIHJvYWQgbmFtZSBpbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgKiBsYXllcmVkIG9uIHRvcC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJlYWRvbmx5IEh5YnJpZDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBzYXRlbGxpdGUgaW1hZ2Ugb2YgdGhlIGFyZWEuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBTYXRlbGxpdGU6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0YW50cyBpbmRpY2F0aW5nIHRoZSBzeXN0ZW0gb2YgbWVhc3VyZW1lbnQgZGlzcGxheWVkIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IERpc3RhbmNlczoge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBjb25zdGFudCBpbmRpY2F0aW5nIHRoZSBtZWFzdXJlbWVudCBzeXN0ZW0gaXMgYWRhcHRpdmUsIGFuZCBkZXRlcm1pbmVkXHJcbiAgICAgICAgICAgICAqIGJhc2VkIG9uIHRoZSBtYXAncyBsYW5ndWFnZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJlYWRvbmx5IEFkYXB0aXZlOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIGNvbnN0YW50IGluZGljYXRpbmcgdGhlIG1lYXN1cmVtZW50IHN5c3RlbSBpcyBpbXBlcmlhbC5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHJlYWRvbmx5IEltcGVyaWFsOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIGNvbnN0YW50IGluZGljYXRpbmcgdGhlIG1lYXN1cmVtZW50IHN5c3RlbSBpcyBtZXRyaWMuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBNZXRyaWM6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXDigJlzIGNvbG9yIHNjaGVtZSB3aGVuIGRpc3BsYXlpbmcgc3RhbmRhcmQgb3IgbXV0ZWQgc3RhbmRhcmQgbWFwIHR5cGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbG9yU2NoZW1lOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN5c3RlbSBvZiBtZWFzdXJlbWVudCBkaXNwbGF5ZWQgb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXN0YW5jZXM6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdHlwZSBvZiBkYXRhIGRpc3BsYXllZCBieSB0aGUgbWFwIHZpZXcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWFwVHlwZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAncyBpbnNldCBtYXJnaW5zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhZGRpbmc6IFBhZGRpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmZWF0dXJlIHZpc2liaWxpdHkgc2V0dGluZyB0aGF0IGRldGVybWluZXMgd2hlbiB0aGUgY29tcGFzcyBpcyB2aXNpYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzQ29tcGFzczogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IGEgY29udHJvbCB0aGF0IGxldHNcclxuICAgICAgICAgKiB1c2VycyBjaG9vc2UgdGhlIG1hcCB0eXBlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzTWFwVHlwZUNvbnRyb2w6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRpc3BsYXkgYSBjb250cm9sIGZvciB6b29taW5nXHJcbiAgICAgICAgICogaW4gYW5kIHpvb21pbmcgb3V0IG9uIGEgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzWm9vbUNvbnRyb2w6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIGxvY2F0aW9uIGNvbnRyb2wgaXMgdmlzaWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1VzZXJMb2NhdGlvbkNvbnRyb2w6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGZpbHRlciB1c2VkIHRvIGRldGVybWluZSB0aGUgcG9pbnRzIG9mIGludGVyZXN0IHNob3duIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0RmlsdGVyOiBQb2ludE9mSW50ZXJlc3RGaWx0ZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBtYXAgZGlzcGxheXMgcG9pbnRzIG9mIGludGVyZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzUG9pbnRzT2ZJbnRlcmVzdDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZlYXR1cmUgdmlzaWJpbGl0eSBzZXR0aW5nIHRoYXQgZGV0ZXJtaW5lcyB3aGVuIHRoZSBtYXAncyBzY2FsZSBpcyBkaXNwbGF5ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd3NTY2FsZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBDU1MgY29sb3IgdGhhdCBpcyB1c2VkIHRvIHBhaW50IHRoZSB1c2VyIGludGVyZmFjZSBjb250cm9scyBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpbnRDb2xvcjogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGp1c3RzIHRoZSBtYXBzIHZpc2libGUgcmVnaW9uIHRvIGJyaW5nIHRoZSBzcGVjaWZpZWQgb3ZlcmxheXMgYW5kXHJcbiAgICAgICAgICogYW5ub3RhdGlvbnMgaW50byB2aWV3LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dJdGVtczxJID0gQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+PihpdGVtczogSSwgb3B0aW9ucz86IE1hcFNob3dJdGVtc09wdGlvbnMpOiBJO1xyXG5cclxuICAgICAgICAvLyBBbm5vdGF0aW5nIHRoZSBNYXBcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgYWxsIHRoZSBhbm5vdGF0aW9ucyBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFubm90YXRpb25zOiBBbm5vdGF0aW9uW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFubm90YXRpb24gdGhhdCBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZEFubm90YXRpb246IEFubm90YXRpb24gfCBudWxsO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGRlbGVnYXRlIG1ldGhvZCBmb3IgbW9kaWZ5aW5nIGFuIGFubm90YXRpb24gdGhhdCByZXByZXNlbnRzIGEgZ3JvdXAgb2ZcclxuICAgICAgICAgKiBhbm5vdGF0aW9ucyB0aGF0IGFyZSBjb21iaW5lZCBpbnRvIGEgY2x1c3Rlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbm5vdGF0aW9uRm9yQ2x1c3RlcihjbHVzdGVyQW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIGxpc3Qgb2YgYW5ub3RhdGlvbiBvYmplY3RzIGxvY2F0ZWQgaW4gdGhlIHNwZWNpZmllZCBtYXBcclxuICAgICAgICAgKiByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYW5ub3RhdGlvbnNJbk1hcFJlY3QobWFwUmVjdDogTWFwUmVjdCk6IEFubm90YXRpb25bXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBhbm5vdGF0aW9uIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkQW5ub3RhdGlvbihhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogQW5ub3RhdGlvbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBtdWx0aXBsZSBhbm5vdGF0aW9ucyB0byB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZEFubm90YXRpb25zKGFubm90YXRpb25zOiBBbm5vdGF0aW9uW10pOiBBbm5vdGF0aW9uW107XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgYW4gYW5ub3RhdGlvbiBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlQW5ub3RhdGlvbihhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogQW5ub3RhdGlvbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBtdWx0aXBsZSBhbm5vdGF0aW9ucyBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnM6IEFubm90YXRpb25bXSk6IEFubm90YXRpb25bXTtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGFuZCBSZW1vdmluZyBPdmVybGF5c1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBhbGwgdGhlIG1hcCdzIG92ZXJsYXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG92ZXJsYXlzOiBPdmVybGF5W107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG92ZXJsYXkgb24gdGhlIG1hcCB0aGF0IGlzIHNlbGVjdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdGVkT3ZlcmxheTogT3ZlcmxheSB8IG51bGw7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2Ygb3ZlcmxheXMgYXQgYSBnaXZlbiBwb2ludCBvbiB0aGUgd2VicGFnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvdmVybGF5c0F0UG9pbnQocG9pbnQ6IERPTVBvaW50KTogT3ZlcmxheVtdO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIGFuIG92ZXJsYXkgdG8gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRPdmVybGF5KG92ZXJsYXk6IE92ZXJsYXkpOiBPdmVybGF5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIG11bHRpcGxlIG92ZXJsYXlzIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkT3ZlcmxheXMob3ZlcmxheXM6IE92ZXJsYXlbXSk6IE92ZXJsYXlbXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBhbiBvdmVybGF5IGZyb20gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVPdmVybGF5KG92ZXJsYXk6IE92ZXJsYXkpOiBPdmVybGF5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZW1vdmVzIG11bHRpcGxlIG92ZXJsYXlzIGZyb20gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVPdmVybGF5cyhvdmVybGF5czogT3ZlcmxheVtdKTogT3ZlcmxheVtdO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSB0b3Btb3N0IG92ZXJsYXkgYXQgYSBnaXZlbiBwb2ludCBvbiB0aGUgd2VicGFnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b3BPdmVybGF5QXRQb2ludChwb2ludDogRE9NUG9pbnQpOiBPdmVybGF5IHwgbnVsbDtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGFuZCBSZW1vdmluZyBHZW9ncmFwaGljYWwgRmVhdHVyZXNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIGNvbGxlY3Rpb24gb2YgYW5ub3RhdGlvbnMsIG92ZXJsYXlzLCBvciBvdGhlciBpdGVtIGNvbGxlY3Rpb25zIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkSXRlbXMoXHJcbiAgICAgICAgICAgIGl0ZW1zOiBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEl0ZW1Db2xsZWN0aW9uPiB8IEl0ZW1Db2xsZWN0aW9uXHJcbiAgICAgICAgKTogQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBJdGVtQ29sbGVjdGlvbj4gfCBJdGVtQ29sbGVjdGlvbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBhIGNvbGxlY3Rpb24gb2YgYW5ub3RhdGlvbnMsIG92ZXJsYXlzLCBvciBvdGhlciBpdGVtIGNvbGxlY3Rpb25zIGZyb20gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVJdGVtcyhcclxuICAgICAgICAgICAgaXRlbXM6IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5IHwgSXRlbUNvbGxlY3Rpb24+IHwgSXRlbUNvbGxlY3Rpb25cclxuICAgICAgICApOiBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEl0ZW1Db2xsZWN0aW9uPiB8IEl0ZW1Db2xsZWN0aW9uO1xyXG5cclxuICAgICAgICAvLyBBZGRpbmcgYW5kIFJlbW92aW5nIFRpbGUgT3ZlcmxheXNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgYWxsIHRoZSBtYXAncyB0aWxlIG92ZXJsYXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpbGVPdmVybGF5czogVGlsZU92ZXJsYXlbXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIHRpbGUgb3ZlcmxheSB0byB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZFRpbGVPdmVybGF5KHRpbGVPdmVybGF5OiBUaWxlT3ZlcmxheSk6IFRpbGVPdmVybGF5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIGFuIGFycmF5IG9mIHRpbGUgb3ZlcmxheXMgdG8gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRUaWxlT3ZlcmxheXModGlsZU92ZXJsYXlzOiBUaWxlT3ZlcmxheVtdKTogVGlsZU92ZXJsYXlbXTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBhIHRpbGUgb3ZlcmxheSBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlVGlsZU92ZXJsYXkodGlsZU92ZXJsYXk6IFRpbGVPdmVybGF5KTogVGlsZU92ZXJsYXk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgYW4gYXJyYXkgb2YgdGlsZSBvdmVybGF5cyBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlVGlsZU92ZXJsYXlzKHRpbGVPdmVybGF5czogVGlsZU92ZXJsYXlbXSk6IFRpbGVPdmVybGF5W107XHJcblxyXG4gICAgICAgIC8vIERpc3BsYXlpbmcgdGhlIFVzZXIncyBMb2NhdGlvblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyB0aGUgdXNlcidzIGxvY2F0aW9uIG9uXHJcbiAgICAgICAgICogdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1VzZXJMb2NhdGlvbjogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gY2VudGVyIHRoZSBtYXAgb24gdGhlIHVzZXInc1xyXG4gICAgICAgICAqIGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYWNrc1VzZXJMb2NhdGlvbjogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhbm5vdGF0aW9uIHRoYXQgaW5kaWNhdGVzIHRoZSB1c2VyJ3MgbG9jYXRpb24gb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSB1c2VyTG9jYXRpb25Bbm5vdGF0aW9uOiBBbm5vdGF0aW9uIHwgbnVsbDtcclxuXHJcbiAgICAgICAgLy8gQ29udmVydGluZyBNYXAgQ29vcmRpbmF0ZXNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYSBjb29yZGluYXRlIG9uIHRoZSBtYXAgdG8gYSBwb2ludCBpbiB0aGUgcGFnZSdzIGNvb3JkaW5hdGUgc3lzdGVtLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRDb29yZGluYXRlVG9Qb2ludE9uUGFnZShjb29yZGluYXRlOiBDb29yZGluYXRlKTogRE9NUG9pbnQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnZlcnRzIGEgcG9pbnQgaW4gcGFnZSBjb29yZGluYXRlcyB0byB0aGUgY29ycmVzcG9uZGluZyBtYXAgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb252ZXJ0UG9pbnRPblBhZ2VUb0Nvb3JkaW5hdGUocG9pbnQ6IERPTVBvaW50KTogQ29vcmRpbmF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIG9wdGlvbnMgZm9yIGluaXRpYWxpemluZyBhIG1hcCdzIGZlYXR1cmVzLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgTWFwQ29uc3RydWN0b3JPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdmlzaWJsZSBhcmVhIG9mIHRoZSBtYXAgZGVmaW5lZCBpbiBtYXAgdW5pdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmlzaWJsZU1hcFJlY3Q/OiBNYXBSZWN0IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhcmVhIGN1cnJlbnRseSBkaXNwbGF5ZWQgYnkgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb24/OiBDb29yZGluYXRlUmVnaW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAgY29vcmRpbmF0ZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBtYXAgdmlldy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjZW50ZXI/OiBDb29yZGluYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAncyByb3RhdGlvbiwgaW4gZGVncmVlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICByb3RhdGlvbj86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgQ1NTIGNvbG9yIHRoYXQgaXMgdXNlZCB0byBwYWludCB0aGUgdXNlciBpbnRlcmZhY2UgY29udHJvbHMgb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aW50Q29sb3I/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1hcOKAmXMgY29sb3Igc2NoZW1lIHdoZW4gZGlzcGxheWluZyBzdGFuZGFyZCBvciBtdXRlZCBzdGFuZGFyZCBtYXAgdHlwZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29sb3JTY2hlbWU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHR5cGUgb2YgZGF0YSBkaXNwbGF5ZWQgYnkgdGhlIG1hcCB2aWV3LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hcFR5cGU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1hcCdzIGluc2V0IG1hcmdpbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGFkZGluZz86IFBhZGRpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIGRpc3BsYXkgYSBjb250cm9sIHRoYXQgbGV0c1xyXG4gICAgICAgICAqIHVzZXJzIGNob29zZSB0aGUgbWFwIHR5cGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd3NNYXBUeXBlQ29udHJvbD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIG1heSByb3RhdGUgdGhlIG1hcCB1c2luZ1xyXG4gICAgICAgICAqIHRoZSBjb21wYXNzIGNvbnRyb2wgb3IgYSByb3RhdGUgZ2VzdHVyZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1JvdGF0aW9uRW5hYmxlZD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmZWF0dXJlIHZpc2liaWxpdHkgc2V0dGluZyB0aGF0IGRldGVybWluZXMgd2hlbiB0aGUgY29tcGFzcyBpcyB2aXNpYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzQ29tcGFzcz86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHVzZXIgbWF5IHpvb20gaW4gYW5kIG91dCBvblxyXG4gICAgICAgICAqIHRoZSBtYXAgdXNpbmcgcGluY2ggZ2VzdHVyZXMgb3IgdGhlIHpvb20gY29udHJvbC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1pvb21FbmFibGVkPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gZGlzcGxheSBhIGNvbnRyb2wgZm9yIHpvb21pbmdcclxuICAgICAgICAgKiBpbiBhbmQgem9vbWluZyBvdXQgb24gYSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd3Nab29tQ29udHJvbD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIG1heSBzY3JvbGwgdGhlIG1hcCB3aXRoXHJcbiAgICAgICAgICogYSBwb2ludGluZyBkZXZpY2Ugb3IgZ2VzdHVyZXMgb24gYSB0b3VjaHNjcmVlbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1Njcm9sbEVuYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmVhdHVyZSB2aXNpYmlsaXR5IHNldHRpbmcgdGhhdCBkZXRlcm1pbmVzIHdoZW4gdGhlIG1hcCdzIHNjYWxlIGlzXHJcbiAgICAgICAgICogZGlzcGxheWVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzU2NhbGU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZGVsZWdhdGUgbWV0aG9kIGZvciBtb2RpZnlpbmcgY2x1c3RlciBhbm5vdGF0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbm5vdGF0aW9uRm9yQ2x1c3Rlcj8oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGFsbCB0aGUgYW5ub3RhdGlvbnMgb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbm5vdGF0aW9ucz86IEFubm90YXRpb25bXSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW5ub3RhdGlvbiBvbiB0aGUgbWFwIHRoYXQgaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWRBbm5vdGF0aW9uPzogQW5ub3RhdGlvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBhbGwgdGhlIG1hcCdzIG92ZXJsYXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG92ZXJsYXlzPzogT3ZlcmxheVtdIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvdmVybGF5IG9uIHRoZSBtYXAgdGhhdCBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZE92ZXJsYXk/OiBPdmVybGF5IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgbWFwIGRpc3BsYXlzIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1BvaW50c09mSW50ZXJlc3Q/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVGhlIGZpbHRlciB1c2VkIHRvIGRldGVybWluZSB0aGUgcG9pbnRzIG9mIGludGVyZXN0IHNob3duIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0RmlsdGVyPzogUG9pbnRPZkludGVyZXN0RmlsdGVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0byBzaG93IHRoZSB1c2VyJ3MgbG9jYXRpb24gb25cclxuICAgICAgICAgKiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzVXNlckxvY2F0aW9uPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gY2VudGVyIHRoZSBtYXAgb24gdGhlIHVzZXInc1xyXG4gICAgICAgICAqIGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYWNrc1VzZXJMb2NhdGlvbj86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIGxvY2F0aW9uIGNvbnRyb2wgaXMgdmlzaWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1VzZXJMb2NhdGlvbkNvbnRyb2w/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IGxpdGVyYWwgY29udGFpbmluZyBhdCBsZWFzdCBvbmUgcHJvcGVydHkgZGVmaW5pbmcgYW4gYXJlYSBvbiB0aGUgbWFwLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgQ2FtZXJhQm91bmRhcnlEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSByZWN0YW5ndWxhciBhcmVhIG9uIGEgdHdvLWRpbWVuc2lvbmFsIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hcFJlY3Q/OiBNYXBSZWN0IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgcmVjdGFuZ3VsYXIgYXJlYSBvbiBhIG1hcCwgZGVmaW5lZCBieSBjb29yZGluYXRlcyBvZiB0aGUgcmVjdGFuZ2xlJ3Mgbm9ydGhlYXN0IGFuZCBzb3V0aHdlc3QgY29ybmVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb24/OiBDb29yZGluYXRlUmVnaW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gYXJyYXkgdG8gd2hpY2ggbWFwcyBhcmUgYXV0b21hdGljYWxseSBhZGRlZCBhbmQgcmVtb3ZlZCBhcyB0aGV5IGFyZVxyXG4gICAgICogaW5pdGlhbGl6ZWQgYW5kIGRlc3Ryb3llZC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY29uc3QgbWFwczogTWFwW107XHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEV2ZW50QmFzZTxUPiB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nO1xyXG4gICAgICAgIHRhcmdldDogVDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYXAgRGlzcGxheSBFdmVudHNcclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBNYXBEaXNwbGF5RXZlbnRzPFQ+IHtcclxuICAgICAgICBcInJlZ2lvbi1jaGFuZ2Utc3RhcnRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwicmVnaW9uLWNoYW5nZS1lbmRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwicm90YXRpb24tc3RhcnRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwicm90YXRpb24tZW5kXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgICAgICBcInNjcm9sbC1zdGFydFwiOiBFdmVudEJhc2U8VD47XHJcbiAgICAgICAgXCJzY3JvbGwtZW5kXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgICAgICBcInpvb20tc3RhcnRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwiem9vbS1lbmRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwibWFwLXR5cGUtY2hhbmdlXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYXAgQW5ub3RhdGlvbnMgT3ZlcmxheSBFdmVudHNcclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBNYXBBbm5vdGF0aW9uT3ZlcmxheUV2ZW50czxUPiB7XHJcbiAgICAgICAgc2VsZWN0OiBFdmVudEJhc2U8VD4gJiB7YW5ub3RhdGlvbj86IEFubm90YXRpb24gfCB1bmRlZmluZWQ7IG92ZXJsYXk/OiBPdmVybGF5IHwgdW5kZWZpbmVkfTtcclxuICAgICAgICBkZXNlbGVjdDogRXZlbnRCYXNlPFQ+ICYge2Fubm90YXRpb24/OiBBbm5vdGF0aW9uIHwgdW5kZWZpbmVkOyBvdmVybGF5PzogT3ZlcmxheSB8IHVuZGVmaW5lZH07XHJcbiAgICAgICAgXCJkcmFnLXN0YXJ0XCI6IEV2ZW50QmFzZTxUPiAmIHthbm5vdGF0aW9uOiBBbm5vdGF0aW9ufTtcclxuICAgICAgICBkcmFnZ2luZzogRXZlbnRCYXNlPFQ+ICYge2Fubm90YXRpb246IEFubm90YXRpb247IGNvb3JkaW5hdGU6IENvb3JkaW5hdGV9O1xyXG4gICAgICAgIFwiZHJhZy1lbmRcIjogRXZlbnRCYXNlPFQ+ICYge2Fubm90YXRpb246IEFubm90YXRpb259O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVzZXIgTG9jYXRpb24gRXZlbnRzXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgTWFwVXNlckxvY2F0aW9uRXZlbnRzPFQ+IHtcclxuICAgICAgICBcInVzZXItbG9jYXRpb24tY2hhbmdlXCI6IEV2ZW50QmFzZTxUPiAmIHtjb29yZGluYXRlOiBDb29yZGluYXRlOyB0aW1lc3RhbXA6IERhdGV9O1xyXG4gICAgICAgIFwidXNlci1sb2NhdGlvbi1lcnJvclwiOiBFdmVudEJhc2U8VD4gJiB7Y29kZTogbnVtYmVyOyBtZXNzYWdlOiBzdHJpbmd9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE1hcCBJbnRlcmFjdGlvbiBFdmVudHNcclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBNYXBJbnRlcmFjdGlvbkV2ZW50czxUPiB7XHJcbiAgICAgICAgXCJzaW5nbGUtdGFwXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgICAgICBcImRvdWJsZS10YXBcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwibG9uZy1wcmVzc1wiOiBFdmVudEJhc2U8VD47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWxsIG1hcCBldmVudHNcclxuICAgIGV4cG9ydCBkZWNsYXJlIHR5cGUgTWFwRXZlbnRzPFQ+ID1cclxuICAgICAgICAmIE1hcERpc3BsYXlFdmVudHM8VD5cclxuICAgICAgICAmIE1hcEFubm90YXRpb25PdmVybGF5RXZlbnRzPFQ+XHJcbiAgICAgICAgJiBNYXBVc2VyTG9jYXRpb25FdmVudHM8VD5cclxuICAgICAgICAmIE1hcEludGVyYWN0aW9uRXZlbnRzPFQ+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyB0aGF0IGRldGVybWluZSBtYXAgcGFyYW1ldGVycyB1c2VkIHdoZW4gc2hvd2luZyBpdGVtcy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE1hcFNob3dJdGVtc09wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgbWFwIGlzIGFuaW1hdGVkIGFzIHRoZSBtYXBcclxuICAgICAgICAgKiByZWdpb24gY2hhbmdlcyB0byBzaG93IHRoZSBpdGVtcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbmltYXRlPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWluaW11bSBsb25naXR1ZGluYWwgYW5kIGxhdGl0dWRpbmFsIHNwYW4gdGhlIG1hcCBzaG91bGQgZGlzcGxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwYWRkaW5nPzogUGFkZGluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGFjaW5nIHRoYXQgaXMgYWRkZWQgYXJvdW5kIHRoZSBjb21wdXRlZCBtYXAgcmVnaW9uIHdoZW4gc2hvd2luZyBpdGVtcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5pbXVtU3Bhbj86IENvb3JkaW5hdGVTcGFuIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSByZWN0YW5ndWxhciBhcmVhIG9uIGEgdHdvLWRpbWVuc2lvbmFsIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBNYXBSZWN0IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0aWFsaXplcyBhIE1hcFJlY3Qgb2JqZWN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHggVGhlIG9yaWdpbiBwb2ludCBhbG9uZyB0aGUgZWFzdC13ZXN0IGF4aXMgb2YgdGhlIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB5IFRoZSBvcmlnaW4gcG9pbnQgYWxvbmcgdGhlIG5vcnRoLXNvdXRoIGF4aXMgb2YgdGhlIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB3aWR0aCBUaGUgZGlzdGFuY2UgKG1lYXN1cmVkIHVzaW5nIG1hcCBwb2ludHMpIGFsb25nIHRoZSBlYXN0LXdlc3RcclxuICAgICAgICAgKiBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0gaGVpZ2h0IFRoZSBkaXN0YW5jZSAobWVhc3VyZWQgdXNpbmcgbWFwIHBvaW50cykgYWxvbmcgdGhlIG5vcnRoLXNvdXRoXHJcbiAgICAgICAgICogYXhpcyBvZiB0aGUgbWFwIHByb2plY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9yaWdpbiBwb2ludCBvZiBhIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcmlnaW46IE1hcFBvaW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIGEgcmVjdGFuZ2xlLCBzdGFydGluZyBmcm9tIHRoZSBvcmlnaW4gcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2l6ZTogTWFwU2l6ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWF4aW11bSB4LWF4aXMgdmFsdWUgb2YgYSByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4WDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIHktYXhpcyB2YWx1ZSBvZiBhIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtYXhZOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pZC1wb2ludCBhbG9uZyB0aGUgeC1heGlzIG9mIGEgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pZFg6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWlkLXBvaW50IGFsb25nIHRoZSB5LWF4aXMgb2YgYSByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWlkWTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIHgtYXhpcyB2YWx1ZSBvZiBhIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5YOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0geS1heGlzIHZhbHVlIG9mIGEgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pblk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgYSBtYXAgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcHkoKTogTWFwUmVjdDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdHdvIG1hcCByZWN0YW5nbGVzIGFyZSBlcXVhbC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBhbm90aGVyUmVjdCBUaGUgbWFwIHJlY3RhbmdsZSB0byBlcXVhdGUgdG8uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXF1YWxzKGFub3RoZXJSZWN0OiBNYXBSZWN0KTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHNjYWxlRmFjdG9yIFRoZSBzY2FsZSBmYWN0b3IuXHJcbiAgICAgICAgICogQHBhcmFtIHNjYWxlQ2VudGVyIFRoZSBjZW50ZXIgbWFwIHBvaW50IGZvciBzY2FsaW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNjYWxlKHNjYWxlRmFjdG9yOiBudW1iZXIsIHNjYWxlQ2VudGVyOiBNYXBQb2ludCk6IE1hcFJlY3Q7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIHJlZ2lvbiB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgbWFwIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b0Nvb3JkaW5hdGVSZWdpb24oKTogQ29vcmRpbmF0ZVJlZ2lvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgcmVjdGFuZ3VsYXIgYXJlYSBvbiBhIG1hcCBkZWZpbmVkIGJ5IGEgY2VudGVyIGNvb3JkaW5hdGUgYW5kIGEgc3BhbixcclxuICAgICAqIGV4cHJlc3NlZCBpbiBkZWdyZWVzIG9mIGxhdGl0dWRlIGFuZCBsb25naXR1ZGUuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIENvb3JkaW5hdGVSZWdpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgQSByZWN0YW5ndWxhciBnZW9ncmFwaGljIHJlZ2lvbiBjZW50ZXJlZCBhcm91bmQgYSBsYXRpdHVkZSBhbmRcclxuICAgICAgICAgKiBsb25naXR1ZGUgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBjZW50ZXIgQ29vcmRpbmF0ZSB0aGF0IGlzIGNlbnRlciBwb2ludCBvZiB0aGUgcmVnaW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSBzcGFuIEEgQ29vcmRpbmF0ZVNwYW4gdGhhdCByZXByZXNlbnRzIHRoZSBhbW91bnQgb2YgbWFwIHRvXHJcbiAgICAgICAgICogZGlzcGxheS4gVGhlIHNwYW4gYWxzbyBkZWZpbmVzIHRoZSBjdXJyZW50IHpvb20gbGV2ZWwgdXNlZCBieSB0aGUgbWFwIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihjZW50ZXI6IENvb3JkaW5hdGUsIHNwYW46IENvb3JkaW5hdGVTcGFuKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNlbnRlciBwb2ludCBvZiB0aGUgcmVnaW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNlbnRlcjogQ29vcmRpbmF0ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgc3BhbiByZXByZXNlbnRpbmcgdGhlIGFtb3VudCBvZiBtYXAgdG8gZGlzcGxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzcGFuOiBDb29yZGluYXRlU3BhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGlzdGFuY2UgcHJvdmlkZWQgaW4gbWV0ZXJzIG9yIHRoZSBsb25nZXN0IGRpc3RhbmNlIGRlcml2ZWQgZnJvbSB0aGUgY2VudGVyIHBvaW50IHRvIHRoZSByZWdpb27igJlzIGJvdW5kaW5nIGJveC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSByYWRpdXM6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGNhbGxpbmcgY29vcmRpbmF0ZSByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weSgpOiBDb29yZGluYXRlUmVnaW9uO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdHdvIHJlZ2lvbnMgYXJlIGVxdWFsLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVxdWFscyhhbm90aGVyUmVnaW9uOiBDb29yZGluYXRlUmVnaW9uKTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgbWFwIHJlY3RhbmdsZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBjYWxsaW5nIGNvb3JkaW5hdGUgcmVnaW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvTWFwUmVjdCgpOiBNYXBSZWN0O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBib3VuZGluZyByZWdpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY2FsbGluZyBjb29yZGluYXRlIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b0JvdW5kaW5nUmVnaW9uKCk6IEJvdW5kaW5nUmVnaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBmb3IgYSBwb2ludCBvbiB0aGVcclxuICAgICAqIEVhcnRoJ3Mgc3VyZmFjZS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29vcmRpbmF0ZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIGNvb3JkaW5hdGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGxhdGl0dWRlOiBudW1iZXIsIGxvbmdpdHVkZTogbnVtYmVyKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxhdGl0dWRlIGluIGRlZ3JlZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGF0aXR1ZGU6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9uZ2l0dWRlIGluIGRlZ3JlZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbG9uZ2l0dWRlOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjb29yZGluYXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcHkoKTogQ29vcmRpbmF0ZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIEJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHR3byBjb29yZGluYXRlcyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXF1YWxzKGFub3RoZXJDb29yZGluYXRlOiBDb29yZGluYXRlKTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgbWFwIHBvaW50IHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGNvb3JkaW5hdGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9NYXBQb2ludCgpOiBNYXBQb2ludDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgdW53cmFwcGVkIG1hcCBwb2ludCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBjb29yZGluYXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvVW53cmFwcGVkTWFwUG9pbnQoKTogTWFwUG9pbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdmFsdWVzIHRoYXQgZGVmaW5lIGNvbnRlbnQgcGFkZGluZyB3aXRoaW4gdGhlIG1hcCB2aWV3IGZyYW1lLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBQYWRkaW5nIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgcGFkZGluZyBvYmplY3QsIGFuZCBpbml0aWFsaXplcyBpdHMgaW5zZXQgbWFyZ2luIHByb3BlcnRpZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdG9wIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tXHJcbiAgICAgICAgICogdGhlIHRvcCBlZGdlLlxyXG4gICAgICAgICAqIEBwYXJhbSByaWdodCBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbVxyXG4gICAgICAgICAqIHRoZSByaWdodCBlZGdlLlxyXG4gICAgICAgICAqIEBwYXJhbSBib3R0b20gVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb21cclxuICAgICAgICAgKiB0aGUgbGVmdCBlZGdlLlxyXG4gICAgICAgICAqIEBwYXJhbSBsZWZ0IFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tXHJcbiAgICAgICAgICogdGhlIGxlZnQgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcih0b3A/OiBudW1iZXIsIHJpZ2h0PzogbnVtYmVyLCBib3R0b20/OiBudW1iZXIsIGxlZnQ/OiBudW1iZXIpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBwYWRkaW5nIG9iamVjdCwgYW5kIGluaXRpYWxpemVzIGl0cyBpbnNldCBtYXJnaW4gcHJvcGVydGllcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBsaXRlcmFsIG9mIGluc2V0IG1hcmdpbiBwcm9wZXJ0aWVzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucz86IFBhZGRpbmdDb25zdHJ1Y3Rvck9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbSB0aGUgYm90dG9tIGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm90dG9tOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb20gdGhlIGxlZnQgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZWZ0OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb20gdGhlIHJpZ2h0IGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmlnaHQ6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbSB0aGUgdG9wIGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9wOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBhZGRpbmdDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tIHRoZSBib3R0b20gZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBib3R0b20/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb20gdGhlIGxlZnQgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZWZ0PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tIHRoZSByaWdodCBlZGdlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJpZ2h0PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tIHRoZSB0b3AgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b3A/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYmFzZSBhbm5vdGF0aW9uIG9iamVjdCwgdXNlZCBmb3IgY3JlYXRpbmcgY3VzdG9tIGFubm90YXRpb25zLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBBbm5vdGF0aW9uIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IGFubm90YXRpb24gZ2l2ZW4gaXRzIGxvY2F0aW9uIGFuZCBpbml0aWFsaXphdGlvbiBvcHRpb25zLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGUgVGhlIGNvb3JkaW5hdGUgYXQgd2hpY2ggdGhpcyBhbm5vdGF0aW9uIHNob3VsZCBhcHBlYXIuXHJcbiAgICAgICAgICogQHBhcmFtIGZhY3RvcnkgQSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIERPTSBlbGVtZW50IHVzZWQgdG9cclxuICAgICAgICAgKiByZXByZXNlbnQgdGhpcyBhbm5vdGF0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEEgaGFzaCBvZiBwcm9wZXJ0aWVzIHdpdGggd2hpY2ggdG8gaW5pdGlhbGl6ZSB0aGUgYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgICAgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZSxcclxuICAgICAgICAgICAgZmFjdG9yeTogKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIG9wdGlvbnM6IEFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMpID0+IEVsZW1lbnQsXHJcbiAgICAgICAgICAgIG9wdGlvbnM/OiBBbm5vdGF0aW9uQ29uc3RydWN0b3JPcHRpb25zXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBoYW5kbGUgZXZlbnRzIHRyaWdnZXJlZCBieSB1c2VyIGludGVyYWN0aW9uc1xyXG4gICAgICAgICAqIHdpdGggYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdHlwZSBUaGUgZXZlbnQgdHlwZSBvZiBpbnRlcmVzdCAoZS5nLiwgXCJzZWxlY3RcIikuXHJcbiAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBpbnZva2UuIGxpc3RlbmVyIGlzIHBhc3NlZCBhblxyXG4gICAgICAgICAqIGFubm90YXRpb24gZXZlbnQgYXMgaXRzIHNvbGUgYXJndW1lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHRoaXNPYmplY3QgQW4gb2JqZWN0IHRvIGJlIHNldCBhcyB0aGUgdGhpcyBrZXl3b3JkIG9uIHRoZVxyXG4gICAgICAgICAqIGxpc3RlbmVyIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI8VD4oXHJcbiAgICAgICAgICAgIHR5cGU6IEFubm90YXRpb25FdmVudFR5cGUsXHJcbiAgICAgICAgICAgIGxpc3RlbmVyOiAodGhpczogVCwgZXZlbnQ6IEV2ZW50QmFzZTxNYXA+KSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0aGlzT2JqZWN0PzogVFxyXG4gICAgICAgICk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gaGFuZGxlIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdXNlciBpbnRlcmFjdGlvbnNcclxuICAgICAgICAgKiB3aXRoIGFubm90YXRpb25zLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUgb2YgaW50ZXJlc3QgKGUuZy4sIFwic2VsZWN0XCIpLlxyXG4gICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlLlxyXG4gICAgICAgICAqIEBwYXJhbSB0aGlzT2JqZWN0IEFuIG9iamVjdCB0byBiZSBzZXQgYXMgdGhlIHRoaXMga2V5d29yZCBvbiB0aGUgbGlzdGVuZXJcclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyPFQ+KFxyXG4gICAgICAgICAgICB0eXBlOiBBbm5vdGF0aW9uRXZlbnRUeXBlLFxyXG4gICAgICAgICAgICBsaXN0ZW5lcjogKHRoaXM6IFQsIGV2ZW50OiBFdmVudEJhc2U8TWFwPikgPT4gdm9pZCxcclxuICAgICAgICAgICAgdGhpc09iamVjdD86IFRcclxuICAgICAgICApOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25zdGFudCB2YWx1ZXMgdXNlZCB0byBwcm92aWRlIGEgaGludCB0aGUgbWFwIHVzZXMgdG8gcHJpb3JpdGl6ZVxyXG4gICAgICAgICAqIGRpc3BsYXlpbmcgYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IERpc3BsYXlQcmlvcml0eToge1xyXG4gICAgICAgICAgICByZWFkb25seSBMb3c6IG51bWJlcjtcclxuICAgICAgICAgICAgcmVhZG9ubHkgSGlnaDogbnVtYmVyO1xyXG4gICAgICAgICAgICByZWFkb25seSBSZXF1aXJlZDogbnVtYmVyO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uc3RhbnRzIGluZGljYXRpbmcgaG93IHRvIGludGVycHJldCB0aGUgY29sbGlzaW9uIGZyYW1lIHJlY3RhbmdsZSBvZlxyXG4gICAgICAgICAqIGFuIGFubm90YXRpb24gdmlldy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgQ29sbGlzaW9uTW9kZToge1xyXG4gICAgICAgICAgICByZWFkb25seSBSZWN0YW5nbGU6IHN0cmluZztcclxuICAgICAgICAgICAgcmVhZG9ubHkgQ2lyY2xlOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHJlYWRvbmx5IE5vbmU6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9pbXBsOiBhbnk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbm5vdGF0aW9uJ3MgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlOiBDb29yZGluYXRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAgdG8gd2hpY2ggdGhlIGFubm90YXRpb24gd2FzIGFkZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRvbmx5IG1hcDogTWFwIHwgbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW5ub3RhdGlvbidzIGVsZW1lbnQgaW4gdGhlIERPTS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERhdGEgdGhhdCB5b3UgZGVmaW5lIHRoYXQgaXMgYXNzaWduZWQgdG8gdGhlIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YTogYW55O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGFubm90YXRpb24ncyBjYWxsb3V0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBhcyBhIHN1YnRpdGxlLCBvbiB0aGUgc2Vjb25kIGxpbmUgb2YgYW4gYW5ub3RhdGlvbidzXHJcbiAgICAgICAgICogY2FsbG91dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJ0aXRsZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIG9mZnNldCB0aGF0IGNoYW5nZXMgdGhlIGFubm90YXRpb24ncyBkZWZhdWx0IGFuY2hvciBwb2ludC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbmNob3JPZmZzZXQ6IERPTVBvaW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQ1NTIGFuaW1hdGlvbiB0aGF0IHJ1bnMgd2hlbiB0aGUgYW5ub3RhdGlvbiBhcHBlYXJzIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwZWFyYW5jZUFuaW1hdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbnVtZXJpYyBoaW50IHRoZSBtYXAgdXNlcyB0byBwcmlvcml0aXplIGRpc3BsYXlpbmcgYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzcGxheVByaW9yaXR5OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BhY2luZyBhZGRlZCBhcm91bmQgdGhlIGFubm90YXRpb24gd2hlbiBzaG93aW5nIGl0ZW1zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhZGRpbmc6IFBhZGRpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRlc2lyZWQgZGltZW5zaW9ucyBvZiB0aGUgYW5ub3RhdGlvbiwgaW4gQ1NTIHBpeGVscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaXplOiB7d2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXJ9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgaWYgdGhlIGFubm90YXRpb24gaXMgdmlzaWJsZSBvciBoaWRkZW4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmlzaWJsZTogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSBhbm5vdGF0aW9uIHNob3VsZCBiZSBhbmltYXRlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbmltYXRlczogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHVzZXIgY2FuIGRyYWcgdGhlIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZHJhZ2dhYmxlOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgYW5ub3RhdGlvbiBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFubm90YXRpb24gcmVzcG9uZHMgdG8gdXNlclxyXG4gICAgICAgICAqIGludGVyYWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBkZWxlZ2F0ZSB0aGF0IGVuYWJsZXMgeW91IHRvIGN1c3RvbWl6ZSB0aGUgYW5ub3RhdGlvbidzIGNhbGxvdXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dDogQW5ub3RhdGlvbkNhbGxvdXREZWxlZ2F0ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBvZmZzZXQgdGhhdCBjaGFuZ2VzIHRoZSBhbm5vdGF0aW9uIGNhbGxvdXQncyBkZWZhdWx0IHBsYWNlbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0T2Zmc2V0OiBET01Qb2ludDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYSBjYWxsb3V0IHNob3VsZCBiZSBzaG93bi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0RW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBhbm5vdGF0aW9ucyB0aGF0IGFyZSBncm91cGVkIHRvZ2V0aGVyIGluIGEgY2x1c3Rlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtZW1iZXJBbm5vdGF0aW9uczogQW5ub3RhdGlvbltdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGlkZW50aWZlciB1c2VkIGZvciBncm91cGluZyBhbm5vdGF0aW9ucyBpbnRvIHRoZSBzYW1lIGNsdXN0ZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2x1c3RlcmluZ0lkZW50aWZpZXI6IHN0cmluZyB8IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBtb2RlIHRoYXQgZGV0ZXJtaW5lcyB0aGUgc2hhcGUgb2YgdGhlIGNvbGxpc2lvbiBmcmFtZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb2xsaXNpb25Nb2RlOiBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyBvcHRpb25zIGZvciBpbml0aWFsaXppbmcgYW5ub3RhdGlvbiBmZWF0dXJlcy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGFubm90YXRpb24ncyBjYWxsb3V0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpdGxlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgYXMgYSBzdWJ0aXRsZSBvbiB0aGUgc2Vjb25kIGxpbmUgb2YgYW4gYW5ub3RhdGlvbidzXHJcbiAgICAgICAgICogY2FsbG91dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJ0aXRsZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBY2Nlc3NpYmlsaXR5IHRleHQgZm9yIHRoZSBhbm5vdGF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFjY2Vzc2liaWxpdHlMYWJlbD86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEYXRhIHlvdSBkZWZpbmUgdGhhdCBpcyBhc3NpZ25lZCB0byB0aGUgYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkYXRhPzogYW55O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgdXNlciBjYW4gZHJhZyB0aGUgYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkcmFnZ2FibGU/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgaWYgdGhlIGFubm90YXRpb24gaXMgdmlzaWJsZSBvciBoaWRkZW4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmlzaWJsZT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBhbm5vdGF0aW9uIHJlc3BvbmRzIHRvIHVzZXJcclxuICAgICAgICAgKiBpbnRlcmFjdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlbmFibGVkPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFubm90YXRpb24gaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciBhIGNhbGxvdXQgc2hvdWxkIGJlIHNob3duLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRFbmFibGVkPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIGlmIHRoZSBhbm5vdGF0aW9uIHNob3VsZCBiZSBhbmltYXRlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbmltYXRlcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBDU1MgYW5pbWF0aW9uIHRoYXQgcnVucyB3aGVuIHRoZSBhbm5vdGF0aW9uIGFwcGVhcnMgb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhcHBlYXJhbmNlQW5pbWF0aW9uPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvZmZzZXQgaW4gQ1NTIHBpeGVscyBvZiB0aGUgZWxlbWVudCBmcm9tIHRoZSBib3R0b20gY2VudGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFuY2hvck9mZnNldD86IERPTVBvaW50IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvZmZzZXQgaW4gQ1NTIHBpeGVscyBvZiBhIGNhbGxvdXQgZnJvbSB0aGUgdG9wIGNlbnRlciBvZiB0aGUgZWxlbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0T2Zmc2V0PzogRE9NUG9pbnQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBkZWxlZ2F0ZSB0aGF0IGVuYWJsZXMgeW91IHRvIGN1c3RvbWl6ZSB0aGUgYW5ub3RhdGlvbidzIGNhbGxvdXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dD86IEFubm90YXRpb25DYWxsb3V0RGVsZWdhdGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRlc2lyZWQgZGltZW5zaW9ucyBvZiB0aGUgYW5ub3RhdGlvbiwgaW4gQ1NTIHBpeGVscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaXplPzoge3dpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyfSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGhpbnQgdGhlIG1hcCB1c2VzIHRvIHByaW9yaXRpemUgZGlzcGxheWluZyB0aGUgYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXNwbGF5UHJpb3JpdHk/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BhY2luZyBhZGRlZCBhcm91bmQgdGhlIGFubm90YXRpb24gd2hlbiBzaG93aW5nIGl0ZW1zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhZGRpbmc/OiBQYWRkaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbW9kZSB0aGF0IGRldGVybWluZXMgdGhlIHNoYXBlIG9mIHRoZSBjb2xsaXNpb24gZnJhbWUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29sbGlzaW9uTW9kZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBpZGVudGlmZXIgdXNlZCBmb3IgZ3JvdXBpbmcgYW5ub3RhdGlvbnMgaW50byB0aGUgc2FtZSBjbHVzdGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsdXN0ZXJpbmdJZGVudGlmaWVyPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWV0aG9kcyBmb3IgY3VzdG9taXppbmcgdGhlIGJlaGF2aW9yIGFuZCBhcHBlYXJhbmNlIG9mIGFuIGFubm90YXRpb24gY2FsbG91dC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEFubm90YXRpb25DYWxsb3V0RGVsZWdhdGUge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBwb2ludCBkZXRlcm1pbmluZyB0aGUgY2FsbG91dCdzIGFuY2hvciBvZmZzZXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dEFuY2hvck9mZnNldEZvckFubm90YXRpb24/KGFubm90YXRpb246IEFubm90YXRpb24sIHNpemU6IHt3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcn0pOiBET01Qb2ludDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBjYWxsb3V0IHNob3VsZCBhcHBlYXIgZm9yIGFuIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dFNob3VsZEFwcGVhckZvckFubm90YXRpb24/KGFubm90YXRpb246IEFubm90YXRpb24pOiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNhbGxvdXQgc2hvdWxkIGFuaW1hdGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dFNob3VsZEFuaW1hdGVGb3JBbm5vdGF0aW9uPyhhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIENTUyBhbmltYXRpb24gdXNlZCB3aGVuIHRoZSBjYWxsb3V0IGFwcGVhcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dEFwcGVhcmFuY2VBbmltYXRpb25Gb3JBbm5vdGF0aW9uPyhhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGN1c3RvbSBjb250ZW50IGZvciB0aGUgY2FsbG91dCBidWJibGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dENvbnRlbnRGb3JBbm5vdGF0aW9uPyhhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogRWxlbWVudDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhbiBlbGVtZW50IHJlcHJlc2VudGluZyBhIGN1c3RvbSBjYWxsb3V0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRFbGVtZW50Rm9yQW5ub3RhdGlvbj8oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYW4gZWxlbWVudCB1c2VkIGFzIGEgY3VzdG9tIGFjY2Vzc29yeSBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZVxyXG4gICAgICAgICAqIGNhbGxvdXQgY29udGVudCBhcmVhLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRMZWZ0QWNjZXNzb3J5Rm9yQW5ub3RhdGlvbj8oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYW4gZWxlbWVudCB1c2VkIGFzIGEgY3VzdG9tIGFjY2Vzc29yeSBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGVcclxuICAgICAgICAgKiBjYWxsb3V0IGNvbnRlbnQgYXJlYS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0UmlnaHRBY2Nlc3NvcnlGb3JBbm5vdGF0aW9uPyhhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgY3VzdG9taXplZCBhbm5vdGF0aW9uIHdpdGggaW1hZ2UgcmVzb3VyY2VzIHRoYXQgeW91IHByb3ZpZGUuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIEltYWdlQW5ub3RhdGlvbiBleHRlbmRzIEFubm90YXRpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluaXRpYWxpemVzIGFuIGltYWdlIGFubm90YXRpb24gd2l0aCBhIFVSTCB0byBpdHMgaW1hZ2UgYW5kIGEgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcihjb29yZGluYXRlOiBDb29yZGluYXRlLCBvcHRpb25zOiBJbWFnZUFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgb3B0aW9ucyBmb3IgaW5pdGlhbGl6aW5nIGFuIGltYWdlIGFubm90YXRpb24uXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJbWFnZUFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMgZXh0ZW5kcyBBbm5vdGF0aW9uQ29uc3RydWN0b3JPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBVUkxzIGZvciB0aGUgaW1hZ2UgYXNzZXRzIGluIG11bHRpcGxlIHJlc29sdXRpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHVybDoge1xyXG4gICAgICAgICAgICAxOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIDI/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIDM/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBtYXJrZXIgYW5ub3RhdGlvbiBhdCB0aGUgY29vcmRpbmF0ZSBsb2NhdGlvbiB3aXRoIHByb3ZpZGVkIG9wdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hcmtlckFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9uIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgbWFya2VyIGFubm90YXRpb24gYXQgdGhlIGNvb3JkaW5hdGUgbG9jYXRpb24gd2l0aCBwcm92aWRlZCBvcHRpb25zLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGUgVGhlIGNvb3JkaW5hdGUgYXQgd2hpY2ggdGhpcyBhbm5vdGF0aW9uIHNob3VsZCBhcHBlYXIuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQSBoYXNoIG9mIHByb3BlcnRpZXMgd2l0aCB3aGljaCB0byBpbml0aWFsaXplIHRoZSBhbm5vdGF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIG9wdGlvbnM/OiBNYXJrZXJBbm5vdGF0aW9uQ29uc3RydWN0b3JPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSB2YWx1ZSB0aGF0IGRldGVybWluZXMgdGhlIGJlaGF2aW9yIG9mIHRoZSBzdWJ0aXRsZSdzIHZpc2liaWxpdHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3VidGl0bGVWaXNpYmlsaXR5OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSB2YWx1ZSB0aGF0IGRldGVybWluZXMgdGhlIGJlaGF2aW9yIG9mIHRoZSB0aXRsZSdzIHZpc2liaWxpdHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGl0bGVWaXNpYmlsaXR5OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIGJhbGxvb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29sb3I6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZmlsbCBjb2xvciBvZiB0aGUgZ2x5cGguXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2x5cGhDb2xvcjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIG1hcmtlciBiYWxsb29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdseXBoVGV4dDogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBpbWFnZSB0byBkaXNwbGF5IGluIHRoZSBtYXJrZXIgYmFsbG9vbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnbHlwaEltYWdlOiBvYmplY3QgfCBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBpbWFnZSB0byBkaXNwbGF5IGluIHRoZSBiYWxsb29uIHdoZW4gdGhlIG1hcmtlciBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZEdseXBoSW1hZ2U6IG9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBvcHRpb25zIHRoYXQgaW5pdGlhbGl6ZSBhIG1hcmtlciBhbm5vdGF0aW9uLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgTWFya2VyQW5ub3RhdGlvbkNvbnN0cnVjdG9yT3B0aW9ucyBleHRlbmRzIEFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSBiYWxsb29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbG9yPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBmaWxsIGNvbG9yIG9mIHRoZSBnbHlwaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnbHlwaENvbG9yPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIG1hcmtlciBiYWxsb29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdseXBoVGV4dD86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaW1hZ2UgdG8gZGlzcGxheSBpbiB0aGUgbWFya2VyIGJhbGxvb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2x5cGhJbWFnZT86XHJcbiAgICAgICAgICAgIHwge1xyXG4gICAgICAgICAgICAxOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIDI/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIDM/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgICB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaW1hZ2UgdG8gZGlzcGxheSBpbiB0aGUgYmFsbG9vbiB3aGVuIHRoZSBtYXJrZXIgaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWRHbHlwaEltYWdlPzogb2JqZWN0IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHRoZSBiZWhhdmlvciBvZiB0aGUgc3VidGl0bGUncyB2aXNpYmlsaXR5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1YnRpdGxlVmlzaWJpbGl0eT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB0aGUgYmVoYXZpb3Igb2YgdGhlIHRpdGxlJ3MgdmlzaWJpbGl0eS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aXRsZVZpc2liaWxpdHk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgdHlwZSBBbm5vdGF0aW9uRXZlbnRUeXBlID0gXCJzZWxlY3RcIiB8IFwiZGVzZWxlY3RcIiB8IFwiZHJhZy1zdGFydFwiIHwgXCJkcmFnZ2luZ1wiIHwgXCJkcmFnLWVuZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gYWJzdHJhY3QgYmFzZSBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSBtZXRob2RzIGFuZCBhdHRyaWJ1dGVzIGZvciBtYXAgb3ZlcmxheXMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIE92ZXJsYXkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFN0YXJ0cyBsaXN0ZW5pbmcgZm9yIHRoZSBzcGVjaWZpZWQgdHlwZSBvZiBldmVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKHR5cGU6IE92ZXJsYXlFdmVudFR5cGUsIGxpc3RlbmVyOiAoZXZlbnQ6IEV2ZW50QmFzZTx0aGlzPikgPT4gdm9pZCwgdGhpc09iamVjdD86IGFueSk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFN0b3BzIGxpc3RlbmluZyBmb3IgdGhlIHNwZWNpZmllZCB0eXBlIG9mIGV2ZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZTogT3ZlcmxheUV2ZW50VHlwZSwgbGlzdGVuZXI6IChldmVudDogRXZlbnRCYXNlPHRoaXM+KSA9PiB2b2lkLCB0aGlzT2JqZWN0PzogYW55KTogdm9pZDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3VzdG9tIGRhdGEgdG8gYXNzb2NpYXRlIHdpdGggdGhpcyBvdmVybGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRhdGE6IG9iamVjdDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIGlmIGFuIG92ZXJsYXkgaXMgdmlzaWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2aXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgb3ZlcmxheSByZXNwb25kcyB0byB1c2VyIGludGVyYWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIG92ZXJsYXkgaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3R5bGUgcHJvcGVydGllcyB0byBhcHBseSB0byB0aGUgb3ZlcmxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdHlsZTogU3R5bGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1hcCB0byB3aGljaCB0aGUgb3ZlcmxheSBpcyBhZGRlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSBtYXA6IE1hcCB8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGNpcmN1bGFyIG92ZXJsYXkgd2l0aCBhIGNvbmZpZ3VyYWJsZSByYWRpdXMsIGNlbnRlcmVkIG9uIGEgc3BlY2lmaWNcclxuICAgICAqIGdlb2dyYXBoaWMgY29vcmRpbmF0ZS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2lyY2xlT3ZlcmxheSBleHRlbmRzIE92ZXJsYXkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBjaXJjbGUgb3ZlcmxheSB3aXRoIGEgY2VudGVyIGNvb3JkaW5hdGUsIHJhZGl1cywgYW5kIHN0eWxlIG9wdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZSBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgY2lyY2xlJ3MgY2VudGVyLlxyXG4gICAgICAgICAqIEBwYXJhbSByYWRpdXMgVGhlIGNpcmNsZSdzIHJhZGl1cywgaW4gbWV0ZXJzLlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBsaXRlcmFsIG9mIE92ZXJsYXkgcHJvcGVydGllcyB1c2VkIHRvIGluaXRpYWxpemVcclxuICAgICAgICAgKiB0aGUgY2lyY2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIHJhZGl1czogbnVtYmVyLCBvcHRpb25zPzogU3R5bGVzT3ZlcmxheU9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgY2lyY2xlIG92ZXJsYXkncyBjZW50ZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgY2lyY2xlIG92ZXJsYXkncyByYWRpdXMgaW4gbWV0ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJhZGl1czogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcmxheSBtYWRlIHVwIG9mIGNvbm5lY3RlZCBsaW5lIHNlZ21lbnRzIHRoYXQgZG8gbm90IGZvcm0gYSBjbG9zZWQgc2hhcGUuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvbHlsaW5lT3ZlcmxheSBleHRlbmRzIE92ZXJsYXkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBwb2x5bGluZSBvdmVybGF5IHdpdGggY29vcmRpbmF0ZSBwb2ludHMgYW5kIHN0eWxlIG9wdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcG9pbnRzIFRoZSBwb2ludHMgaW4gdGhlIHBvbHlsaW5lIGFzIGFuIGFycmF5IG9mIENvb3JkaW5hdGVcclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgbGl0ZXJhbCBvZiBzdHlsZSBvcHRpb25zIHdpdGggd2hpY2ggdG8gaW5pdGlhbGl6ZVxyXG4gICAgICAgICAqIHRoZSBwb2x5bGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwb2ludHM6IENvb3JkaW5hdGVbXSwgb3B0aW9ucz86IFN0eWxlc092ZXJsYXlPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwb2ludHMgdGhhdCBkZWZpbmUgdGhlIHBvbHlsaW5lIG92ZXJsYXkncyBzaGFwZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludHM6IENvb3JkaW5hdGVbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJsYXkgbWFkZSB1cCBvZiBvbmUgb3IgbW9yZSBwb2ludHMsIGZvcm1pbmcgYSBjbG9zZWQgc2hhcGUuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvbHlnb25PdmVybGF5IGV4dGVuZHMgT3ZlcmxheSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHBvbHlnb24gb3ZlcmxheSB3aXRoIGFuIGFycmF5IG9mIHBvaW50cyBhbmQgc3R5bGUgb3B0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBwb2ludHMgVGhlIHBvaW50cyBpbiB0aGUgcG9seWdvbiBhcyBhbiBhcnJheSBvZiBhcnJheXMgb2ZcclxuICAgICAgICAgKiBDb29yZGluYXRlLCBvciBhbiBhcnJheSBvZiBDb29yZGluYXRlLiBJZiBpdCdzIHRoZSBsYXR0ZXIsXHJcbiAgICAgICAgICogdGhlIGFycmF5IGlzIGF1dG8td3JhcHBlZCBieSBhbiBlbmNsb3NpbmcgYXJyYXkuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IGxpdGVyYWwgb2Ygb3B0aW9ucyB3aXRoIHdoaWNoIHRvIGluaXRpYWxpemUgdGhlXHJcbiAgICAgICAgICogcG9seWdvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwb2ludHM6IENvb3JkaW5hdGVbXSwgb3B0aW9ucz86IFN0eWxlc092ZXJsYXlPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT25lIG9yIG1vcmUgYXJyYXlzIG9mIGNvb3JkaW5hdGVzIHRoYXQgZGVmaW5lIHRoZSBwb2x5Z29uIG92ZXJsYXkgc2hhcGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRzOiBDb29yZGluYXRlW107XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIE92ZXJsYXlPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDdXN0b20gZGF0YSB0byBhc3NvY2lhdGUgd2l0aCB0aGlzIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YT86IG9iamVjdCB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIGlmIGFuIG92ZXJsYXkgaXMgdmlzaWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2aXNpYmxlPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG92ZXJsYXkgcmVzcG9uZHMgdG8gdXNlclxyXG4gICAgICAgICAqIGludGVyYWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBvdmVybGF5IGlzIHNlbGVjdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdGVkPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9ic2VydmFibGUgc2V0IG9mIHN0eWxlIGF0dHJpYnV0ZXMgZm9yIGFuIG92ZXJsYXkuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTdHlsZXNPdmVybGF5T3B0aW9ucyBleHRlbmRzIE92ZXJsYXlPcHRpb25zIHtcclxuICAgICAgICBzdHlsZT86IFN0eWxlIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBkZWNsYXJlICB0eXBlIE92ZXJsYXlFdmVudFR5cGUgPSBcInNlbGVjdFwiIHwgXCJkZXNlbGVjdFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgYSBtYXAgcmVnaW9uLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBDb29yZGluYXRlU3BhbiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBjb29yZGluYXRlIHNwYW4gb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBsYXRpdHVkZSBhbmRcclxuICAgICAgICAgKiBsb25naXR1ZGUgZGVsdGFzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGxhdGl0dWRlRGVsdGEgVGhlIGFtb3VudCBvZiBub3J0aC10by1zb3V0aCBkaXN0YW5jZSAobWVhc3VyZWQgaW5cclxuICAgICAgICAgKiBkZWdyZWVzKSB0byBkaXNwbGF5IG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICogQHBhcmFtIGxvbmdpdHVkZURlbHRhIFRoZSBhbW91bnQgb2YgZWFzdC10by13ZXN0IGRpc3RhbmNlIChtZWFzdXJlZCBpblxyXG4gICAgICAgICAqIGRlZ3JlZXMpIHRvIGRpc3BsYXkgZm9yIHRoZSBtYXAgcmVnaW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGxhdGl0dWRlRGVsdGE6IG51bWJlciwgbG9uZ2l0dWRlRGVsdGE6IG51bWJlcik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2Ygbm9ydGgtdG8tc291dGggZGlzdGFuY2UgKG1lYXN1cmVkIGluIGRlZ3JlZXMpIHRvIGRpc3BsYXkgb25cclxuICAgICAgICAgKiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhdGl0dWRlRGVsdGE6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW1vdW50IG9mIGVhc3QtdG8td2VzdCBkaXN0YW5jZSAobWVhc3VyZWQgaW4gZGVncmVlcykgdG8gZGlzcGxheSBmb3JcclxuICAgICAgICAgKiB0aGUgbWFwIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb25naXR1ZGVEZWx0YTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgY29vcmRpbmF0ZSBzcGFuLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcHkoKTogQ29vcmRpbmF0ZVNwYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdHdvIHNwYW5zIGFyZSBlcXVhbC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlcXVhbHMoYW5vdGhlclNwYW46IENvb3JkaW5hdGVTcGFuKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJsYXkgdGhhdCBjb3ZlcnMgYW4gYXJlYSBvZiB0aGUgbWFwIHdpdGggYml0bWFwIHRpbGVzLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBUaWxlT3ZlcmxheSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHRpbGUgb3ZlcmxheSB3aXRoIGEgVVJMIHRlbXBsYXRlIGFuZCBzdHlsZSBvcHRpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHVybFRlbXBsYXRlOiBzdHJpbmcgfCBVUkxUZW1wbGF0ZUNhbGxiYWNrLCBvcHRpb25zPzogVGlsZU92ZXJsYXlDb25zdHJ1Y3Rvck9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHN0cmluZywgb3IgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nLCB3aXRoIGEgVVJMIHRoYXRcclxuICAgICAgICAgKiBwcm92aWRlcyB0aGUgcmVxdWVzdGVkIHRpbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXJsVGVtcGxhdGU6IHN0cmluZyB8IFVSTFRlbXBsYXRlQ2FsbGJhY2s7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbG9hZHMgdGhlIHRpbGUgb3ZlcmxheSBmb3IgdGhlIGRpc3BsYXllZCBtYXAgcmVnaW9uIHdpdGggdGhlIGxhdGVzdFxyXG4gICAgICAgICAqIGRhdGEgdmFsdWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbG9hZCgpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNaW5pbXVtIHpvb20gbGV2ZWwgb2YgdGhlIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluaW11bVo6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXhpbXVtIHpvb20gbGV2ZWwgb2YgdGhlIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4aW11bVo6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPcGFjaXR5IGxldmVsIG9mIHRoZSBvdmVybGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9wYWNpdHk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDdXN0b20gZGF0YSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBVUkwgdGVtcGxhdGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YTogb2JqZWN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0cmlidXRlcyB1c2VkIHdoZW4gaW5pdGlhbGl6aW5nIGEgdGlsZSBvdmVybGF5LCBpbmNsdWRpbmcgbWluaW11bSBhbmRcclxuICAgICAqIG1heGltdW0gem9vbSwgb3BhY2l0eSwgYW5kIGN1c3RvbSBkYXRhLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgVGlsZU92ZXJsYXlDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1pbmltdW0gem9vbSBsZXZlbCBvZiB0aGUgb3ZlcmxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5pbXVtWj86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNYXhpbXVtIHpvb20gbGV2ZWwgb2YgdGhlIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4aW11bVo/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3BhY2l0eSBsZXZlbCBvZiB0aGUgb3ZlcmxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcGFjaXR5PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEN1c3RvbSBkYXRhIHVzZWQgdG8gcG9wdWxhdGUgdGhlIFVSTCB0ZW1wbGF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkYXRhPzogb2JqZWN0IHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBkZWNsYXJlIHR5cGUgVVJMVGVtcGxhdGVDYWxsYmFjayA9ICh4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCBzY2FsZTogbnVtYmVyLCBkYXRhOiBvYmplY3QpID0+IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgc2V0IG9mIG9ic2VydmFibGUgYXR0cmlidXRlcyBmb3Igb3ZlcmxheXMsIGluY2x1ZGluZyBjb2xvciBhbmQgb3BhY2l0eSBvZlxyXG4gICAgICogc3Ryb2tlIGFuZCBmaWxsLCBhbmQgbGluZSBzdHlsZXMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIFN0eWxlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGFuZCBpbml0aWFsaXplcyBhIHN0eWxlIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zPzogU3R5bGVDb25zdHJ1Y3Rvck9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZmlsbCBjb2xvciBvZiBhIHNoYXBlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxDb2xvcjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcGFjaXR5IG9mIHRoZSBmaWxsIGNvbG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxPcGFjaXR5OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBydWxlIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIGEgcG9pbnQgaXMgaW5zaWRlIG9yIG91dHNpZGUgYSBwb2x5Z29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxSdWxlOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0eWxlIHRvIHVzZSB3aGVuIGRyYXdpbmcgbGluZSBlbmRpbmdzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbmVDYXA6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBsaW5lIGFuZCBnYXAgbGVuZ3RocywgdXNlZCB0byBjcmVhdGUgYSBkYXNoZWQgbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lRGFzaDogbnVtYmVyW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBDU1MgcGl4ZWxzIHRvIG9mZnNldCBkcmF3aW5nIG9mIGEgbGluZSdzIGRhc2ggcGF0dGVybi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lRGFzaE9mZnNldDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdHlsZSB0byB1c2Ugd2hlbiBkcmF3aW5nIGpvaW5zIGJldHdlZW4gbGluZSBzZWdtZW50cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lSm9pbjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiBhIGxpbmUncyBzdHJva2UsIGluIENTUyBwaXhlbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZVdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0cm9rZSBjb2xvciBvZiBhIGxpbmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlQ29sb3I6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3BhY2l0eSBvZiB0aGUgc3Ryb2tlIGNvbG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0cm9rZU9wYWNpdHk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdW5pdCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB3aGVyZSBhIHN0cm9rZSBiZWdpbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlU3RhcnQ6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdW5pdCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB3aGVyZSBhIHN0cm9rZSBlbmRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0cm9rZUVuZDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBncmFkaWVudCB0byBhcHBseSBhbG9uZyB0aGUgbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lR3JhZGllbnQ6IExpbmVHcmFkaWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWwgdmFsdWVzIG9mIG9wdGlvbnMgZm9yIGFwcGx5aW5nIHN0eWxlIHRvIG92ZXJsYXlzLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU3R5bGVDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBmaWxsIGNvbG9yIG9mIGEgc2hhcGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZmlsbENvbG9yPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcGFjaXR5IG9mIHRoZSBmaWxsIGNvbG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxPcGFjaXR5PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgcnVsZSBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciBhIHBvaW50IGlzIGluc2lkZSBvciBvdXRzaWRlIGEgcG9seWdvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmaWxsUnVsZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc3R5bGUgdG8gdXNlIHdoZW4gZHJhd2luZyBsaW5lIGVuZGluZ3MuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZUNhcD86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBsaW5lIGFuZCBnYXAgbGVuZ3RocywgdXNlZCB0byBjcmVhdGUgYSBkYXNoZWQgbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lRGFzaD86IG51bWJlcltdIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2YgQ1NTIHBpeGVscyB0byBvZmZzZXQgZHJhd2luZyBvZiBhIGxpbmUncyBkYXNoIHBhdHRlcm4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZURhc2hPZmZzZXQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0eWxlIHRvIHVzZSB3aGVuIGRyYXdpbmcgam9pbnMgYmV0d2VlbiBsaW5lIHNlZ21lbnRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbmVKb2luPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiBhIGxpbmUncyBzdHJva2UsIGluIENTUyBwaXhlbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZVdpZHRoPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdHJva2UgY29sb3Igb2YgYSBsaW5lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0cm9rZUNvbG9yPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcGFjaXR5IG9mIHRoZSBzdHJva2UgY29sb3IuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlT3BhY2l0eT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdW5pdCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB3aGVyZSBhIHN0cm9rZSBiZWdpbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlU3RhcnQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHVuaXQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgd2hlcmUgYSBzdHJva2UgZW5kcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdHJva2VFbmQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGdyYWRpZW50IHRvIGFwcGx5IGFsb25nIHRoZSBsaW5lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbmVHcmFkaWVudD86IExpbmVHcmFkaWVudCB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgbGluZSB0aGF0IGRpc3BsYXlzIHdpdGggYSBncmFkaWVudCBhbG9uZyB0aGUgbGVuZ3RoIG9mIHRoZSBsaW5lLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBMaW5lR3JhZGllbnQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBzdHlsZSB0aGF0IHJlbmRlcnMgYSBncmFkaWVudCBhbG9uZyB0aGUgbGVuZ3RoIG9mIGEgbGluZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCB1bml0IGRpc3RhbmNlIHZhbHVlcyBhcyBrZXlzIHdpdGggbWF0Y2hlZCBDU1MgY29sb3JzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBvYmplY3QpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIGEgY29sb3IgdHJhbnNpdGlvbiBwb2ludCB0byB0aGUgZ3JhZGllbnQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSB1bml0IGRpc3RhbmNlIGF0IHdoaWNoIHRvIGFkZCB0aGUgY29sb3IuXHJcbiAgICAgICAgICogQHBhcmFtIGNvbG9yIFRoZSBDU1MgY29sb3IgYXQgdGhlIHRyYW5zaXRpb24gcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkQ29sb3JTdG9wKG9mZnNldDogbnVtYmVyLCBjb2xvcjogc3RyaW5nKTogdm9pZDtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIGNvbG9yIHRyYW5zaXRpb24gYXQgdGhlIGluZGV4IHBvaW50IGluIHRoZSBsaXN0IG9mIHBvaW50cyB3aXRoaW4gYSBwb2x5bGluZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCBBIHZhbGlkIGluZGV4IGludG8gYSBwb2x5bGluZeKAmXMgcG9pbnRzLlxyXG4gICAgICAgICAqIEBwYXJhbSBjb2xvciBUaGUgQ1NTIGNvbG9yIGF0IHRoZSBpbmRleCBwb2ludC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRDb2xvclN0b3BBdEluZGV4KGluZGV4OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBnZW9jb2RlciB0aGF0IGNvbnZlcnRzIGh1bWFuLXJlYWRhYmxlIGFkZHJlc3NlcyB0byBnZW9ncmFwaGljIGNvb3JkaW5hdGVzXHJcbiAgICAgKiBhbmQgdmljZSB2ZXJzYS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2VvY29kZXIge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluaXRpYWxpemUgYSBnZW9jb2RlciBvYmplY3QgYW5kIHNldCBvcHRpb25hbCBsYW5ndWFnZSBhbmQgdXNlciBsb2NhdGlvblxyXG4gICAgICAgICAqIHByb3BlcnRpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucz86IEdlb2NvZGVyQ29uc3RydWN0b3JPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYW4gYWRkcmVzcyB0byBnZW9ncmFwaGljIGNvb3JkaW5hdGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxvb2t1cChcclxuICAgICAgICAgICAgcGxhY2U6IHN0cmluZyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBkYXRhOiBHZW9jb2RlclJlc3BvbnNlKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICBvcHRpb25zPzogR2VvY29kZXJMb29rdXBPcHRpb25zXHJcbiAgICAgICAgKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBhIGdlb2dyYXBoaWMgY29vcmRpbmF0ZSB0byBhbiBhZGRyZXNzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGVcclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50cyxcclxuICAgICAgICAgKiBlcnJvciBvbiBmYWlsdXJlIGFuZCBkYXRhIG9uIHN1Y2Nlc3MuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAgICAgKiByZXZlcnNlIGdlb2NvZGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJldmVyc2VMb29rdXAoXHJcbiAgICAgICAgICAgIGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoZXJyb3I6IEVycm9yIHwgbnVsbCwgZGF0YTogR2VvY29kZXJSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgICAgICAgICAgb3B0aW9ucz86IFBpY2s8R2VvY29kZXJDb25zdHJ1Y3Rvck9wdGlvbnMsIFwibGFuZ3VhZ2VcIj5cclxuICAgICAgICApOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbmNlbHMgdGhlIHBlbmRpbmcgbG9va3VwIG9yIHJldmVyc2UgbG9va3VwIHNwZWNpZmllZCBieSBpdHMgcmVxdWVzdCBJRC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBUaGUgcmVxdWVzdCBJRCBvZiB0aGUgbG9va3VwIG9yIHJldmVyc2VMb29rdXAgdG8gY2FuY2VsLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbmNlbChpZDogbnVtYmVyKTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdlb2NvZGVyIHNob3VsZCByZXR1cm4gcmVzdWx0c1xyXG4gICAgICAgICAqIG5lYXIgdGhlIHVzZXIncyBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdlb2NvZGVyIHNob3VsZCByZXR1cm4gcmVzdWx0c1xyXG4gICAgICAgICAqIG5lYXIgdGhlIHVzZXIncyBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldHNVc2VyTG9jYXRpb246IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemF0aW9uIG9wdGlvbnMgZm9yIGdlb2NvZGVyIG9iamVjdHMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBHZW9jb2RlckNvbnN0cnVjdG9yT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdlb2NvZGVyIHNob3VsZCByZXR1cm4gcmVzdWx0c1xyXG4gICAgICAgICAqIG5lYXIgdGhlIHVzZXIncyBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBnZW9jb2RlciBzaG91bGQgcmV0dXJuIHJlc3VsdHNcclxuICAgICAgICAgKiBuZWFyIHRoZSB1c2VyJ3MgY3VycmVudCBsb2NhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRzVXNlckxvY2F0aW9uPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgdGhhdCBjb25zdHJhaW4gZ2VvY29kZXIgbG9va3VwIHJlc3VsdHMgdG8gYSBzcGVjaWZpYyBhcmVhIG9yIHNldCBhXHJcbiAgICAgKiBsYW5ndWFnZSBmb3IgcmVzdWx0cy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIEdlb2NvZGVyTG9va3VwT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxhbmd1YWdlIGluIHdoaWNoIHRvIGRpc3BsYXkgdGhlIGxvb2t1cCByZXN1bHRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvb3JkaW5hdGVzIHVzZWQgdG8gY29uc3RyYWluIHRoZSBsb29rdXAgcmVzdWx0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlPzogQ29vcmRpbmF0ZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHJlZ2lvbiBpbiB3aGljaCB0byBjb25zdHJhaW4gbG9va3VwIHJlc3VsdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uPzogQ29vcmRpbmF0ZVJlZ2lvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGxpc3Qgb2YgY291bnRyaWVzIGluIHdoaWNoIHRvIGNvbnN0cmFpbiB0aGUgbG9va3VwIHJlc3VsdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGltaXRUb0NvdW50cmllcz86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXNwb25zZSBmcm9tIGEgZ2VvY29kZXIgbG9va3VwIG9yIHJldmVyc2UgbG9va3VwLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgR2VvY29kZXJSZXNwb25zZSB7XHJcbiAgICAgICAgcmVzdWx0czogUGxhY2VbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgcGxhY2Ugb2JqZWN0IHJldHVybmVkIGZyb20gYSBnZW9jb2RlciBsb29rdXAgb3IgcmV2ZXJzZSBsb29rdXAuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBQbGFjZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBmb3IgdGhlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvb3JkaW5hdGU6IENvb3JkaW5hdGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFkZHJlc3Mgb2YgdGhlIHBsYWNlLCBmb3JtYXR0ZWQgdXNpbmcgaXRzIGNvdW50cnkncyBjb252ZW50aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmb3JtYXR0ZWRBZGRyZXNzOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGdlb2dyYXBoaWMgcmVnaW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uOiBDb29yZGluYXRlUmVnaW9uO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjb3VudHJ5IGNvZGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb3VudHJ5Q29kZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjYXRlZ29yeSBvZiB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0Q2F0ZWdvcnk/OiBQb2ludE9mSW50ZXJlc3RDYXRlZ29yeSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgY291bnRyeSBvZiB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY291bnRyeT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc3RhdGUgb3IgcHJvdmluY2Ugb2YgdGhlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkbWluaXN0cmF0aXZlQXJlYT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc2hvcnQgY29kZSBmb3IgdGhlIHN0YXRlIG9yIGFyZWEuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRtaW5pc3RyYXRpdmVBcmVhQ29kZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgY2l0eSBvZiB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbG9jYWxpdHk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvc3RhbCBjb2RlIG9mIHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb3N0Q29kZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYXJlYSB3aXRoaW4gdGhlIGxvY2FsaXR5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1YkxvY2FsaXR5Pzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdHJlZXQgbmFtZSBhdCB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhvcm91Z2hmYXJlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBudW1iZXIgb24gdGhlIHN0cmVldCBhdCB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3ViVGhvcm91Z2hmYXJlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgY29tYmluYXRpb24gb2YgdGhvcm91Z2hmYXJlIGFuZCBzdWJ0aG9yb3VnaGZhcmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZnVsbFRob3JvdWdoZmFyZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb21tb24gbmFtZXMgb2YgdGhlIGFyZWEgaW4gd2hpY2ggdGhlIHBsYWNlIHJlc2lkZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXJlYXNPZkludGVyZXN0Pzogc3RyaW5nW10gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29tbW9uIG5hbWVzIGZvciB0aGUgbG9jYWwgYXJlYSBvciBuZWlnaGJvcmhvb2Qgb2YgdGhlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRlcGVuZGVudExvY2FsaXRpZXM/OiBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9iamVjdCB0aGF0IHJldHJpZXZlcyBtYXAtYmFzZWQgc2VhcmNoIHJlc3VsdHMgZm9yIGEgdXNlci1lbnRlcmVkIHF1ZXJ5LlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBTZWFyY2gge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBzZWFyY2ggb2JqZWN0IHdpdGggb3B0aW9uYWwgaW5pdGlhbCB2YWx1ZXMgdGhhdCB5b3UgcHJvdmlkZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUgd2hlbiBjcmVhdGluZyBhIHNlYXJjaCBvYmplY3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucz86IFNlYXJjaENvbnN0cnVjdG9yT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHJpZXZlcyB0aGUgcmVzdWx0cyBvZiBhIHNlYXJjaCBxdWVyeS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBxdWVyeSBBIFN0cmluZyBvciBhIFNlYXJjaEF1dG9jb21wbGV0ZVJlc3VsdC5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiBvciBkZWxlZ2F0ZSBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgV2l0aCB0aGUgb3B0aW9uIGhhc2gsIHlvdSBjYW4gY29uc3RyYWluIHRoZSBzZWFyY2ggdG8gYVxyXG4gICAgICAgICAqIGRlc2lyZWQgYXJlYSB1c2luZyB0aGUgY29vcmRpbmF0ZSBvciByZWdpb24gcHJvcGVydGllcy4gSWYgc2V0LCB0aGlzXHJcbiAgICAgICAgICogb3B0aW9uIG92ZXJyaWRlcyB0aGUgbGFuZ3VhZ2UgcHJvdmlkZWQgdG8gdGhlIHNlYXJjaCBjb25zdHJ1Y3Rvci5cclxuICAgICAgICAgKiBAcmV0dXJucyBhIHJlcXVlc3QgSUQgKGludGVnZXIpIHRoYXQgY2FuIGJlIHBhc3NlZCB0byBjYW5jZWwgdG8gYWJvcnQgYVxyXG4gICAgICAgICAqIHBlbmRpbmcgcmVxdWVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWFyY2g8USBleHRlbmRzIHN0cmluZyB8IFNlYXJjaEF1dG9jb21wbGV0ZVJlc3VsdD4oXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBRLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogU2VhcmNoRGVsZWdhdGUgfCBTZWFyY2hDYWxsYmFjazxRPixcclxuICAgICAgICAgICAgb3B0aW9ucz86IFNlYXJjaE9wdGlvbnNcclxuICAgICAgICApOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHJpZXZlcyBhIGxpc3Qgb2YgYXV0b2NvbXBsZXRlIHJlc3VsdHMgZm9yIHRoZSBzcGVjaWZpZWQgc2VhcmNoIHF1ZXJ5LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHF1ZXJ5IEEgc3RyaW5nIHRoYXQgcmVwcmVzZW50cyB0aGUgdXNlcidzIHNlYXJjaCB0ZXJtIGluIHByb2dyZXNzLlxyXG4gICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIGZ1bmN0aW9uIG9yIGRlbGVnYXRlIG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBXaXRoIHRoZSBvcHRpb24gaGFzaCwgeW91IGNhbiBjb25zdHJhaW5cclxuICAgICAgICAgKiB0aGUgc2VhcmNoIHRvIGEgZGVzaXJlZCBhcmVhIHVzaW5nIHRoZSBjb29yZGluYXRlIG9yIHJlZ2lvbiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAqIEEgY29vcmRpbmF0ZSBvciByZWdpb24gc3VwcGxpZWQgaGVyZSBvdmVycmlkZXMgdGhlIHNhbWUgcHJvcGVydHkgc3VwcGxpZWRcclxuICAgICAgICAgKiB0byB0aGUgYG1hcGtpdC5TZWFyY2hgIGNvbnN0cnVjdG9yLiBZb3UgY2FuIGFsc28gb3ZlcnJpZGVcclxuICAgICAgICAgKiB0aGUgbGFuZ3VhZ2UgcHJvdmlkZWQgdG8gdGhlIHNlYXJjaCBjb25zdHJ1Y3Rvci5cclxuICAgICAgICAgKiBGb3IgZXhhbXBsZSwgYHsgbGFuZ3VhZ2U6IOKAmGZyLUNB4oCYIH1gIHRlbGxzIHRoZSBzZXJ2ZXIgdG8gc2VuZCByZXN1bHRzXHJcbiAgICAgICAgICogbG9jYWxpemVkIHRvIENhbmFkaWFuIEZyZW5jaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhdXRvY29tcGxldGUoXHJcbiAgICAgICAgICAgIHF1ZXJ5OiBzdHJpbmcsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiBTZWFyY2hEZWxlZ2F0ZSB8IEF1dG9jb21wbGV0ZVNlYXJjaENhbGxiYWNrLFxyXG4gICAgICAgICAgICBvcHRpb25zPzogU2VhcmNoQXV0b2NvbXBsZXRlT3B0aW9uc1xyXG4gICAgICAgICk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbmNlbHMgYSBzZWFyY2ggcmVxdWVzdCB1c2luZyBpdHMgcmVxdWVzdCBJRC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBUaGUgaW50ZWdlciBJRCByZXR1cm5lZCBieSBhIGNhbGwgdG8gU2VhcmNoLnNlYXJjaFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgc2VydmVyIGNhbmNlbGVkIHRoZSBwZW5kaW5nIHNlYXJjaCByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbmNlbChpZDogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUgd2hlbiBjcmVhdGluZyBhIHNlYXJjaCBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTZWFyY2hDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGFuZ3VhZ2UgSUQgdGhhdCBkZXRlcm1pbmVzIHRoZSBsYW5ndWFnZSBmb3IgdGhlIHNlYXJjaCByZXN1bHQgdGV4dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsYW5ndWFnZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0byBsaW1pdCB0aGUgc2VhcmNoIHJlc3VsdHMgdG8gdGhlXHJcbiAgICAgICAgICogdXNlcidzIGN1cnJlbnQgbG9jYXRpb24sIGFzIGRldGVybWluZWQgYnkgdGhlIHdlYiBicm93c2VyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldHNVc2VyTG9jYXRpb24/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbWFwIGNvb3JkaW5hdGUgdGhhdCBwcm92aWRlcyBhIGhpbnQgZm9yIHRoZSBnZW9ncmFwaGljIGFyZWEgdG8gc2VhcmNoLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvb3JkaW5hdGU/OiBDb29yZGluYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbWFwIHJlZ2lvbiB0aGF0IHByb3ZpZGVzIGEgaGludCBmb3IgdGhlIGdlb2dyYXBoaWMgYXJlYSB0byBzZWFyY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uPzogQ29vcmRpbmF0ZVJlZ2lvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgc2VhcmNoIGF1dG9jb21wbGV0ZSByZXN1bHRzIHNob3VsZCBpbmNsdWRlIHF1ZXJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZVF1ZXJpZXM/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWFyY2ggcmVzdWx0cyBzaG91bGQgaW5jbHVkZSBhZGRyZXNzZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZUFkZHJlc3Nlcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBzdHJpbmcgdGhhdCBjb25zdHJhaW5zIHNlYXJjaCByZXN1bHRzIHRvIHdpdGhpbiB0aGUgcHJvdmlkZWQgY291bnRyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbWl0VG9Db3VudHJpZXM/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCByZXN1bHRzIHNob3VsZCBpbmNsdWRlIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlUG9pbnRzT2ZJbnRlcmVzdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmaWx0ZXIgdXNlZCB0byBpbmNsdWRlIG9yIGV4Y2x1ZGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludE9mSW50ZXJlc3RGaWx0ZXI/OiBQb2ludE9mSW50ZXJlc3RGaWx0ZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIHlvdSBwcm92aWRlIHRvIGNvbnN0cmFpbiBhbiBhdXRvY29tcGxldGUgcmVxdWVzdC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFNlYXJjaEF1dG9jb21wbGV0ZU9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGFuZ3VhZ2UgSUQgdGhhdCBkZXRlcm1pbmVzIHRoZSBsYW5ndWFnZSBmb3IgdGhlIHNlYXJjaCByZXN1bHQgdGV4dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsYW5ndWFnZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcCBjb29yZGluYXRlIHRoYXQgcHJvdmlkZXMgYSBoaW50IGZvciB0aGUgZ2VvZ3JhcGhpYyBhcmVhIHRvIHNlYXJjaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlPzogQ29vcmRpbmF0ZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcCByZWdpb24gdGhhdCBwcm92aWRlcyBhIGhpbnQgZm9yIHRoZSBnZW9ncmFwaGljIGFyZWEgdG8gc2VhcmNoLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZ2lvbj86IENvb3JkaW5hdGVSZWdpb24gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCByZXN1bHRzIHNob3VsZCBpbmNsdWRlIGFkZHJlc3Nlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlQWRkcmVzc2VzPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgc2VhcmNoIHJlc3VsdHMgc2hvdWxkIGluY2x1ZGUgcG9pbnRzIG9mIGludGVyZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluY2x1ZGVQb2ludHNPZkludGVyZXN0PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgc2VhcmNoIHJlc3VsdHMgc2hvdWxkIGluY2x1ZGUgcXVlcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlUXVlcmllcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmaWx0ZXIgdXNlZCB0byBpbmNsdWRlIG9yIGV4Y2x1ZGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcmllcyBpbiBzZWFyY2ggcmVzdWx0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludE9mSW50ZXJlc3RGaWx0ZXI/OiBQb2ludE9mSW50ZXJlc3RGaWx0ZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBzdHJpbmcgdGhhdCBjb25zdHJhaW5zIHNlYXJjaCByZXN1bHRzIHRvIHdpdGhpbiB0aGUgcHJvdmlkZWQgY291bnRyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbWl0VG9Db3VudHJpZXM/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgIHR5cGUgU2VhcmNoQ2FsbGJhY2s8UT4gPSAoXHJcbiAgICAgICAgZXJyb3I6IEVycm9yIHwgbnVsbCxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBUaGUgcXVlcnkgY29ycmVzcG9uZGluZyB0byB0aGUgcmVzdWx0cyAgVGhlIHF1ZXJ5IGNvcnJlc3BvbmRpbmcgdG8gdGhlXHJcbiAgICAgICAgICAgICAqIHJlc3VsdHMsIGlmIGEgU2VhcmNoQXV0b2NvbXBsZXRlUmVzdWx0IHdhcyBub3QgdXNlZCB0byBwZXJmb3JtIHRoZSBzZWFyY2guXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBxdWVyeTogUSBleHRlbmRzIFNlYXJjaEF1dG9jb21wbGV0ZVJlc3VsdCA/IHVuZGVmaW5lZCA6IHN0cmluZztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgcmVnaW9uIHRoYXQgZW5jbG9zZXMgdGhlIHNlYXJjaCByZXN1bHRzLiBUaGlzIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50XHJcbiAgICAgICAgICAgICAqIGlmIHRoZXJlIGFyZSBubyByZXN1bHRzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZGlzcGxheVJlZ2lvbj86IENvb3JkaW5hdGVSZWdpb24gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBbiBhcnJheSBvZiBQbGFjZSBvYmplY3RzLiBUaGUgcGxhY2UgYXJyYXkgaXMgZW1wdHkgaWYgdGhlcmUgaXMgbm8gbWF0Y2guXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwbGFjZXM6IFBsYWNlW107XHJcbiAgICAgICAgfVxyXG4gICAgKSA9PiB2b2lkO1xyXG5cclxuICAgIGV4cG9ydCBkZWNsYXJlICB0eXBlIEF1dG9jb21wbGV0ZVNlYXJjaENhbGxiYWNrID0gKGVycm9yOiBFcnJvciB8IG51bGwsIGRhdGE6IFNlYXJjaEF1dG9jb21wbGV0ZVJlc3BvbnNlKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IG9yIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHBlcmZvcm1pbmcgYSBzZWFyY2ggb3IgYXV0b2NvbXBsZXRlXHJcbiAgICAgKiByZXF1ZXN0LlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU2VhcmNoRGVsZWdhdGUge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwb24gc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGEgc2VhcmNoIHJlcXVlc3QsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBkYXRhXHJcbiAgICAgICAgICogb2JqZWN0IHRoYXQgaXMgdGhlIHNhbWUgYXMgdGhlIG9uZSBwYXNzZWQgdG8gdGhlIHNlYXJjaCBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWFyY2hEaWRDb21wbGV0ZT8oZGF0YTogU2VhcmNoUmVzcG9uc2UpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUgc2VhcmNoIHJlcXVlc3QgZmFpbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VhcmNoRGlkRXJyb3I/KGVycm9yOiBFcnJvcik6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdoZW4gYW4gYXV0b2NvbXBsZXRlIHJlcXVlc3Qgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlcywgdGhpcyBtZXRob2QgcmV0dXJuc1xyXG4gICAgICAgICAqIGEgZGF0YSBhcnJheSB0aGF0IGlzIHRoZSBzYW1lIGFzIHRoZSBvbmUgcGFzc2VkIHRvIHRoZSBhdXRvY29tcGxldGVcclxuICAgICAgICAgKiBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhdXRvY29tcGxldGVEaWRDb21wbGV0ZT8oZGF0YTogU2VhcmNoQXV0b2NvbXBsZXRlUmVzcG9uc2UpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbnZva2VkIHdoZW4gYW4gYXV0b2NvbXBsZXRlIHJlcXVlc3QgZmFpbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlRGlkRXJyb3I/KGVycm9yOiBFcnJvcik6IHZvaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIHlvdSBjYW4gcHJvdmlkZSB3aGVuIHBlcmZvcm1pbmcgYSBzZWFyY2guXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTZWFyY2hPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGxhbmd1YWdlIElEIHRoYXQgZGV0ZXJtaW5lcyB0aGUgbGFuZ3VhZ2UgZm9yIHRoZSBzZWFyY2ggcmVzdWx0IHRleHQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcCBjb29yZGluYXRlIHRoYXQgcHJvdmlkZXMgYSBoaW50IGZvciB0aGUgZ2VvZ3JhcGhpYyBhcmVhIHRvIHNlYXJjaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlOiBDb29yZGluYXRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbWFwIHJlZ2lvbiB0aGF0IHByb3ZpZGVzIGEgaGludCBmb3IgdGhlIGdlb2dyYXBoaWMgYXJlYSB0byBzZWFyY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uOiBDb29yZGluYXRlUmVnaW9uO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWFyY2ggcmVzdWx0cyBzaG91bGQgaW5jbHVkZSBhZGRyZXNzZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZUFkZHJlc3Nlcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCByZXN1bHRzIHNob3VsZCBpbmNsdWRlIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlUG9pbnRzT2ZJbnRlcmVzdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmaWx0ZXIgdXNlZCB0byBpbmNsdWRlIG9yIGV4Y2x1ZGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcmllcyBpbiBzZWFyY2ggcmVzdWx0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludE9mSW50ZXJlc3RGaWx0ZXI/OiBQb2ludE9mSW50ZXJlc3RGaWx0ZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVzdWx0IG9mIGEgc2VhcmNoLCBpbmNsdWRpbmcgdGhlIG9yaWdpbmFsIHNlYXJjaCBxdWVyeSwgdGhlIGJvdW5kaW5nXHJcbiAgICAgKiByZWdpb24sIGFuZCBhIGxpc3Qgb2YgcGxhY2VzIHRoYXQgbWF0Y2ggdGhlIHF1ZXJ5LlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU2VhcmNoUmVzcG9uc2Uge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBxdWVyeSBzdHJpbmcgdXNlZCB0byBwZXJmb3JtIHRoZSBzZWFyY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcXVlcnk6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcmVnaW9uIHRoYXQgZW5jbG9zZXMgdGhlIHBsYWNlcyBpbmNsdWRlZCBpbiB0aGUgc2VhcmNoIHJlc3VsdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm91bmRpbmdSZWdpb246IENvb3JkaW5hdGVSZWdpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIHBsYWNlcyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggcXVlcnkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGxhY2VzOiBQbGFjZVtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3BvbnNlIGZyb20gYW4gYXV0b2NvbXBsZXRlIHJlcXVlc3QuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBTZWFyY2hBdXRvY29tcGxldGVSZXNwb25zZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHF1ZXJ5IHN0cmluZyB1c2VkIHRvIHBlcmZvcm0gdGhlIGF1dG9jb21wbGV0ZSByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJlc3VsdHMgZnJvbSBhbiBhdXRvY29tcGxldGUgcmVxdWVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXN1bHRzOiBTZWFyY2hBdXRvY29tcGxldGVSZXN1bHRbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXN1bHQgb2YgYW4gYXV0b2NvbXBsZXRlIHF1ZXJ5LCBpbmNsdWRpbmcgZGlzcGxheSBsaW5lcyBhbmQgYSBjb29yZGluYXRlLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgU2VhcmNoQXV0b2NvbXBsZXRlUmVzdWx0IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBMaW5lcyBvZiB0ZXh0IHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIgaW4gYW4gYXV0b2NvbXBsZXRlIG1lbnUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzcGxheUxpbmVzOiBzdHJpbmdbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgcmVzdWx0LCBwcm92aWRlZCB3aGVuIGl0IGNvcnJlc3BvbmRzIHRvIGEgc2luZ2xlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvb3JkaW5hdGU6IENvb3JkaW5hdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZpbHRlciB1c2VkIHRvIGRldGVybWluZSB0aGUgcG9pbnRzIG9mIGludGVyZXN0IHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBvbiBhIG1hcCBvciBsb2NhbCBzZWFyY2guXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIFBvaW50T2ZJbnRlcmVzdEZpbHRlciB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHBvaW50IG9mIGludGVyZXN0IGZpbHRlciB0aGF0IGluY2x1ZGVzIGNhdGVnb3JpZXMgZnJvbSBhIGxpc3QgdGhhdCB5b3UgcHJvdmlkZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgaW5jbHVkaW5nKGNhdGVnb3J5TGlzdDogUG9pbnRPZkludGVyZXN0Q2F0ZWdvcnlbXSk6IFBvaW50T2ZJbnRlcmVzdEZpbHRlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHBvaW50IG9mIGludGVyZXN0IGZpbHRlciB0aGF0IGV4Y2x1ZGVzIGNhdGVnb3JpZXMgZnJvbSBhIGxpc3QgdGhhdCB5b3UgcHJvdmlkZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgZXhjbHVkaW5nKGNhdGVnb3J5TGlzdDogUG9pbnRPZkludGVyZXN0Q2F0ZWdvcnlbXSk6IFBvaW50T2ZJbnRlcmVzdEZpbHRlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmaWx0ZXIgdGhhdCBpbmNsdWRlcyBhbGwgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgZmlsdGVySW5jbHVkaW5nQWxsQ2F0ZWdvcmllczogUG9pbnRPZkludGVyZXN0RmlsdGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmlsdGVyIHRoYXQgZXhjbHVkZXMgYWxsIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3JpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IGZpbHRlckV4Y2x1ZGluZ0FsbENhdGVnb3JpZXM6IFBvaW50T2ZJbnRlcmVzdEZpbHRlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmlsdGVyIGluY2x1ZGVzIHRoZSBwcm92aWRlZCBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlc0NhdGVnb3J5KGNhdGVnb3J5OiBQb2ludE9mSW50ZXJlc3RDYXRlZ29yeSk6IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZpbHRlciBleGNsdWRlcyB0aGUgcHJvdmlkZWQgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhjbHVkZXNDYXRlZ29yeShjYXRlZ29yeTogUG9pbnRPZkludGVyZXN0Q2F0ZWdvcnkpOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IHRoYXQgZmV0Y2hlcyBwb2ludHMgb2YgaW50ZXJlc3Qgd2l0aGluIGEgc3BlY2lmaWVkIHJlZ2lvbi5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHNlYXJjaCBvYmplY3QgZm9yIGZldGNoaW5nIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUgd2hlbiB5b3UgY3JlYXRlIGEgcG9pbnRzIG9mIGludGVyZXN0IHNlYXJjaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zPzogUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaE9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcmVnaW9uIHRoYXQgYm91bmRzIHRoZSBhcmVhIGluIHdoaWNoIHRvIGZldGNoIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb246IENvb3JkaW5hdGVSZWdpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNlbnRlciBwb2ludCBvZiB0aGUgcmVxdWVzdCByZXByZXNlbnRlZCBhcyBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNlbnRlcjogQ29vcmRpbmF0ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGlzdGFuY2UgcHJvdmlkZWQgaW4gbWV0ZXJzLCBvciB0aGUgbG9uZ2VzdCBkaXN0YW5jZSBkZXJpdmVkIGZyb20gdGhlIGNlbnRlciBwb2ludCB0byB0aGUgcmVnaW9u4oCZcyBib3VuZGluZyBib3guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmFkaXVzOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmaWx0ZXIgdGhhdCBsaXN0cyBwb2ludHMgb2YgaW50ZXJlc3QgY2F0ZWdvcmllcyB0byBpbmNsdWRlIG9yIGV4Y2x1ZGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0RmlsdGVyOiBQb2ludE9mSW50ZXJlc3RGaWx0ZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxhbmd1YWdlIElEIHRvIHVzZSB3aGVuIGZldGNoaW5nIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsYW5ndWFnZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIGRpc3RhbmNlIHRvIHVzZSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIHJlZ2lvbiBmb3IgZmV0Y2hpbmcgcG9pbnRzIG9mIGludGVyZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRvbmx5IE1heFJhZGl1czogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGZXRjaGVzIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBxdWVyeSBBIFN0cmluZyBvciBhIFNlYXJjaEF1dG9jb21wbGV0ZVJlc3VsdC5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiBvciBkZWxlZ2F0ZSBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQSBQb2ludHNPZkludGVyZXN0U2VhcmNoT3B0aW9ucyBvYmplY3QuXHJcbiAgICAgICAgICogQHJldHVybnMgYSByZXF1ZXN0IElEIChpbnRlZ2VyKSB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY2FuY2VsIHRvIGFib3J0IGFcclxuICAgICAgICAgKiBwZW5kaW5nIHJlcXVlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VhcmNoKFxyXG4gICAgICAgICAgICBjYWxsYmFjazogUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaERlbGVnYXRlIHwgUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaENhbGxiYWNrLFxyXG4gICAgICAgICAgICBvcHRpb25zPzogUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaE9wdGlvbnNcclxuICAgICAgICApOiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbmNlbHMgYSBzZWFyY2ggcmVxdWVzdCB1c2luZyBpdHMgcmVxdWVzdCBJRC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBUaGUgaW50ZWdlciBJRCByZXR1cm5lZCBieSBhIGNhbGwgdG8gU2VhcmNoLnNlYXJjaFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgc2VydmVyIGNhbmNlbGVkIHRoZSBwZW5kaW5nIHNlYXJjaCByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbmNlbChpZDogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUgd2hlbiBjcmVhdGluZyBhIHNlYXJjaCBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBQb2ludHNPZkludGVyZXN0U2VhcmNoT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsYW5ndWFnZSBJRCB0aGF0IGRldGVybWluZXMgdGhlIGxhbmd1YWdlIGZvciB0aGUgc2VhcmNoIHJlc3VsdCB0ZXh0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHJlcXVlc3QgcmVwcmVzZW50ZWQgYXMgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjZW50ZXI/OiBDb29yZGluYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBkaXN0YW5jZSBwcm92aWRlZCBpbiBtZXRlcnMsIG9yIHRoZSBsb25nZXN0IGRpc3RhbmNlIGRlcml2ZWQgZnJvbSB0aGUgY2VudGVyIHBvaW50IHRvIHRoZSByZWdpb27igJlzIGJvdW5kaW5nIGJveC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByYWRpdXM/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJlZ2lvbiB0aGF0IGJvdW5kcyB0aGUgYXJlYSBpbiB3aGljaCB0byBmZXRjaCBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uPzogQ29vcmRpbmF0ZVJlZ2lvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZpbHRlciB1c2VkIHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvaW50T2ZJbnRlcmVzdEZpbHRlcj86IFBvaW50T2ZJbnRlcmVzdEZpbHRlciB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZGVjbGFyZSB0eXBlIFBvaW50c09mSW50ZXJlc3RTZWFyY2hDYWxsYmFjayA9IChlcnJvcjogRXJyb3IgfCBudWxsLCBkYXRhOiBQb2ludHNPZkludGVyZXN0U2VhcmNoUmVzcG9uc2UpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3Qgb3IgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBNYXBLaXQgSlMgY2FsbHMgd2hlbiBmZXRjaGluZyBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBQb2ludHNPZkludGVyZXN0U2VhcmNoRGVsZWdhdGUge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRlbGxzIHRoZSBkZWxlZ2F0ZSB0aGF0IHRoZSBzZWFyY2ggY29tcGxldGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlYXJjaERpZENvbXBsZXRlPyhkYXRhOiBQb2ludHNPZkludGVyZXN0U2VhcmNoUmVzcG9uc2UpOiB2b2lkO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUZWxscyB0aGUgZGVsZWdhdGUgdGhhdCB0aGUgc2VhcmNoIGZhaWxlZCBkdWUgdG8gYW4gZXJyb3IuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VhcmNoRGlkRXJyb3I/KGVycm9yOiBFcnJvcik6IHZvaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVzdWx0IG9mIGEgcmVxdWVzdCB1c2VkIHRvIGZldGNoIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFBvaW50c09mSW50ZXJlc3RTZWFyY2hSZXNwb25zZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGxpc3Qgb2YgcG9pbnRzIG9mIGludGVyZXN0IHRoYXQgbWF0Y2ggdGhlIHJlcXVlc3Qgb3B0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwbGFjZXM6IFBsYWNlW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yaWVzLlxyXG4gICAgICovXHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgZW51bSBQb2ludE9mSW50ZXJlc3RDYXRlZ29yeSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBhaXJwb3J0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBBaXJwb3J0LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgYW11c2VtZW50IHBhcmtzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFtdXNlbWVudFBhcmssXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBhcXVhcml1bXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQXF1YXJpdW0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBBVE0gbWFjaGluZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQVRNLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgYmFrZXJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFrZXJ5LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgYmFua3MuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmFuayxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGJlYWNoZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQmVhY2gsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBicmV3ZXJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQnJld2VyeSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGNhZmVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIENhZmUsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBjYW1wZ3JvdW5kcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBDYW1wZ3JvdW5kLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgY2FyIHJlbnRhbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQ2FyUmVudGFsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgRVYgY2hhcmdlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRVZDaGFyZ2VyLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgZmlyZSBzdGF0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBGaXJlU3RhdGlvbixcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGZpdG5lc3MgY2VudGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBGaXRuZXNzQ2VudGVyLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgZm9vZCBtYXJrZXRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEZvb2RNYXJrZXQsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBnYXMgc3RhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgR2FzU3RhdGlvbixcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGhvc3BpdGFscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBIb3NwaXRhbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGhvdGVscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBIb3RlbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGxhdW5kcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBMYXVuZHJ5LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbGlicmFyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIExpYnJhcnksXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBtYXJpbmFzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE1hcmluYSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIG1vdmllIHRoZWF0ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE1vdmllVGhlYXRlcixcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIG11c2V1bXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTXVzZXVtLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbmF0aW9uYWwgcGFya3MuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTmF0aW9uYWxQYXJrLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbmlnaHRsaWZlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIE5pZ2h0bGlmZSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHBhcmtzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUGFyayxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHBhcmtpbmcgbG9jYXRpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBhcmtpbmcsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBwaGFybWFjaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBoYXJtYWN5LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgcG9saWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBvbGljZSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHBvc3Qgb2ZmaWNlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBQb3N0T2ZmaWNlLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbG9jYXRpb25zIG9mIHB1YmxpYyB0cmFuc3BvcnRhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBQdWJsaWNUcmFuc3BvcnQsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciByZXN0YXVyYW50cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBSZXN0YXVyYW50LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgcmVzdHJvb21zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFJlc3Ryb29tLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3Igc2Nob29scy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBTY2hvb2wsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBzdGFkaXVtcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBTdGFkaXVtLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3Igc3RvcmVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFN0b3JlLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgdGhlYXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgVGhlYXRlcixcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHVuaXZlcnNpdGllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBVbml2ZXJzaXR5LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3Igd2luZXJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgV2luZXJ5LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3Igem9vcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBab28sXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZGlyZWN0aW9ucyBvYmplY3Qgd2l0aCBvcHRpb25zIHRoYXQgeW91IG1heSBwcm92aWRlLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBEaXJlY3Rpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgZGlyZWN0aW9ucyBvYmplY3Qgd2l0aCBvcHRpb25zIHRoYXQgeW91IG1heSBwcm92aWRlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogVGhpcyBwYXJhbWV0ZXIgaXMgb3B0aW9uYWwuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zPzogRGlyZWN0aW9uc0NvbnN0cnVjdG9yT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHJpZXZlcyBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lcyB0byB1cCB0byAxMCBkZXN0aW5hdGlvbnMgZnJvbSBhIHNpbmdsZSBzdGFydGluZyBwb2ludC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSByZXF1ZXN0IEFuIEV0YVJlcXVlc3RPcHRpb25zIG9iamVjdCB0aGF0IHNwZWNpZmllcyBkZXRhaWxzIGZvciB0aGUgc2VydmVyIHRvIHByb3ZpZGUgZXN0aW1hdGVkIGFycml2YWwgdGltZXMgYXQgb25lIG9yIG1vcmUgZGVzdGluYXRpb25zLlxyXG4gICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgdGhlIGVzdGltYXRlZCB0aW1lIHJlc3BvbnNlIG9iamVjdCwgcmV0dXJuZWQgYXN5bmNocm9ub3VzbHkuXHJcbiAgICAgICAgICogQHJldHVybiBBIHJlcXVlc3QgSUQsIHdoaWNoIHlvdSBjYW4gcGFzcyB0byBjYW5jZWwgdG8gYWJvcnQgYSBwZW5kaW5nIHJlcXVlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXRhKHJlcXVlc3Q6IEV0YVJlcXVlc3RPcHRpb25zLCBjYWxsYmFjazogKGVycm9yOiBFcnJvciB8IG51bGwsIGRhdGE6IEV0YVJlc3BvbnNlKSA9PiB2b2lkKTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZXMgZGlyZWN0aW9ucyBhbmQgZXN0aW1hdGVkIHRyYXZlbCB0aW1lIGZvciB0aGUgc3BlY2lmaWVkIHN0YXJ0XHJcbiAgICAgICAgICogYW5kIGVuZCBwb2ludHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCBEaXJlY3Rpb25zUmVxdWVzdCBvYmplY3QgdGhhdCBzcGVjaWZpZXMgZGV0YWlscyBmb3IgdGhlXHJcbiAgICAgICAgICogZGlyZWN0aW9ucyB5b3Ugd2FudCB0byByZXRyaWV2ZS5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBkaXJlY3Rpb25zLFxyXG4gICAgICAgICAqIHJldHVybmVkIGFzeW5jaHJvbm91c2x5LlxyXG4gICAgICAgICAqIEByZXR1cm4gQSByZXF1ZXN0IElELCB3aGljaCB5b3UgY2FuIHBhc3MgdG8gY2FuY2VsIHRvIGFib3J0IGEgcGVuZGluZyByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJvdXRlKHJlcXVlc3Q6IERpcmVjdGlvbnNSZXF1ZXN0LCBjYWxsYmFjazogKGVycm9yOiBFcnJvciB8IG51bGwsIGRhdGE6IERpcmVjdGlvbnNSZXNwb25zZSkgPT4gdm9pZCk6IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2FuY2VscyBhIHByZXZpb3VzIHJlcXVlc3QgZm9yIHJvdXRlIGRpcmVjdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaWQgVGhlIElEIHJldHVybmVkIGJ5IGEgY2FsbCB0byByb3V0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW5jZWwoaWQ6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIERpcmVjdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtb2RlcyBvZiB0cmFuc3BvcnRhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlbnVtIFRyYW5zcG9ydCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIGNvbnN0YW50IGlkZW50aWZ5aW5nIHRoZSBtb2RlIG9mIHRyYW5zcG9ydGF0aW9uIGFzIGRyaXZpbmcuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBBdXRvbW9iaWxlLFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBjb25zdGFudCBpZGVudGlmeWluZyB0aGUgbW9kZSBvZiB0cmFuc3BvcnRhdGlvbiBhcyB3YWxraW5nLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgV2Fsa2luZyxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIHRoYXQgeW91IG1heSBwcm92aWRlIHdoZW4gY3JlYXRpbmcgYSBkaXJlY3Rpb25zIG9iamVjdC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERpcmVjdGlvbnNDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGFuZ3VhZ2UgSUQgdGhhdCBkZXRlcm1pbmVzIHRoZSBsYW5ndWFnZSBmb3Igcm91dGUgaW5mb3JtYXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgb3B0aW9ucyB5b3UgbWF5IHByb3ZpZGUgZm9yIHJlcXVlc3RpbmcgZXN0aW1hdGVkIGFycml2YWwgdGltZXMuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBFdGFSZXF1ZXN0T3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0YXJ0aW5nIHBvaW50IGZvciBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lIHJlcXVlc3RzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG9yaWdpbjogQ29vcmRpbmF0ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdGltZSBvZiBkZXBhcnR1cmUgdXNlZCBpbiBhbiBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lIHJlcXVlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVzdGluYXRpb25zOiBDb29yZGluYXRlW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgY29vcmRpbmF0ZXMgdGhhdCByZXByZXNlbnQgZW5kIHBvaW50cyBmb3IgZXN0aW1hdGVkIGFycml2YWwgdGltZSByZXF1ZXN0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0cmFuc3BvcnRUeXBlOiBEaXJlY3Rpb25zLlRyYW5zcG9ydDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbW9kZSBvZiB0cmFuc3BvcnRhdGlvbiB0aGUgc2VydmVyIHVzZXMgd2hlbiBlc3RpbWF0aW5nIGFycml2YWwgdGltZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVwYXJ0dXJlRGF0ZTogRGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lcyBmb3IgYSBzZXQgb2YgZGVzdGluYXRpb25zLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRXRhUmVzcG9uc2Uge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSByZXF1ZXN0IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGVzdGltYXRlZCB0aW1lIG9mIGFycml2YWwgcmVzcG9uc2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVxdWVzdDogRXRhUmVxdWVzdE9wdGlvbnM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgZXN0aW1hdGVkIGFycml2YWwgdGltZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXRhczogRXRhUmVzdWx0W107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbW9kZSBvZiB0cmFuc3BvcnRhdGlvbiwgZGlzdGFuY2UsIGFuZCB0cmF2ZWwgdGltZSBlc3RpbWF0ZXMgZm9yIGEgc2luZ2xlIGRlc3RpbmF0aW9uLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRXRhUmVzdWx0IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbW9kZSBvZiB0cmFuc3BvcnRhdGlvbiB1c2VkIHRvIGVzdGltYXRlIHRoZSBhcnJpdmFsIHRpbWUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdHJhbnNwb3J0VHlwZTogRGlyZWN0aW9ucy5UcmFuc3BvcnQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJvdXRlIGRpc3RhbmNlIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBlc3RpbWF0ZWQgdHJhdmVsIHRpbWUgaW4gc2Vjb25kcywgaW5jbHVkaW5nIGVzdGltYXRlZCBkZWxheXMgZHVlIHRvIHRyYWZmaWMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXhwZWN0ZWRUcmF2ZWxUaW1lOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGVzdGltYXRlZCB0cmF2ZWwgdGltZSBpbiBzZWNvbmRzLCBleGNsdWRpbmcgZXN0aW1hdGVkIGRlbGF5cyBmb3IgdHJhZmZpYy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWNUcmF2ZWxUaW1lOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVxdWVzdGVkIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBhIHJvdXRlLCBhcyB3ZWxsIGFzIHRoZSBwbGFubmVkIG1vZGUgb2YgdHJhbnNwb3J0YXRpb24uXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEaXJlY3Rpb25zUmVxdWVzdCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0YXJ0IHBvaW50IGZvciByb3V0aW5nIGRpcmVjdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb3JpZ2luOiBzdHJpbmcgfCBDb29yZGluYXRlIHwgUGxhY2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGVuZCBwb2ludCBmb3Igcm91dGluZyBkaXJlY3Rpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRlc3RpbmF0aW9uOiBzdHJpbmcgfCBDb29yZGluYXRlIHwgUGxhY2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFycml2YWwgZGF0ZSBmb3IgdGhlIHRyaXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXJyaXZhbERhdGU/OiBEYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBkZXBhcnR1cmUgZGF0ZSBmb3IgdGhlIHRyaXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVwYXJ0dXJlRGF0ZT86IERhdGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1vZGUgb2YgdHJhbnNwb3J0YXRpb24gdG8gd2hpY2ggZGlyZWN0aW9ucyBzaG91bGQgYXBwbHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdHJhbnNwb3J0VHlwZT86IERpcmVjdGlvbnMuVHJhbnNwb3J0IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZXJ2ZXIgc2hvdWxkIHJldHVybiBtdWx0aXBsZVxyXG4gICAgICAgICAqIHJvdXRlcyB3aGVuIHRoZXkgYXJlIGF2YWlsYWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXF1ZXN0c0FsdGVybmF0ZVJvdXRlcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGlyZWN0aW9ucyBhbmQgZXN0aW1hdGVkIHRyYXZlbCB0aW1lIHJldHVybmVkIGZvciBhIHJvdXRlLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRGlyZWN0aW9uc1Jlc3BvbnNlIHtcclxuICAgICAgICByZXF1ZXN0OiBhbnk7XHJcbiAgICAgICAgcm91dGVzOiBSb3V0ZVtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5mb3JtYXRpb24gYWJvdXQgYSByb3V0ZSwgaW5jbHVkaW5nIHN0ZXAtYnktc3RlcCBpbnN0cnVjdGlvbnMsIGRpc3RhbmNlLFxyXG4gICAgICogYW5kIGVzdGltYXRlZCB0cmF2ZWwgdGltZS5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFJvdXRlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBpbnN0YW5jZSBvZiBhIHBvbHlsaW5lIG92ZXJsYXkgdGhhdCByZXByZXNlbnRzIHRoZSBwYXRoIG9mIGEgcm91dGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9seWxpbmU6IFBvbHlsaW5lT3ZlcmxheTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBjb29yZGluYXRlIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHRoZSByb3V0ZS5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhdGg6IENvb3JkaW5hdGVbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBzdGVwcyB0aGF0IGNvbXByaXNlIHRoZSBvdmVyYWxsIHJvdXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0ZXBzOiBSb3V0ZVN0ZXBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbmFtZSBhc3NpZ25lZCB0byB0aGUgcm91dGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSByb3V0ZSBkaXN0YW5jZSBpbiBtZXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzdGFuY2U6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZXhwZWN0ZWQgdHJhdmVsIHRpbWUgaW4gc2Vjb25kcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBlY3RlZFRyYXZlbFRpbWU6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3ZlcmFsbCByb3V0ZSB0cmFuc3BvcnQgdHlwZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0cmFuc3BvcnRUeXBlOiBEaXJlY3Rpb25zLlRyYW5zcG9ydDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgc2luZ2xlIHJvdXRlIGJldHdlZW4gYSByZXF1ZXN0ZWQgc3RhcnQgYW5kIGVuZCBwb2ludC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFJvdXRlU3RlcCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgcGF0aCBvZiB0aGUgcm91dGUgc2VnbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwYXRoOiBDb29yZGluYXRlW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHdyaXR0ZW4gaW5zdHJ1Y3Rpb25zIGZvciBmb2xsb3dpbmcgdGhlIHBhdGggcmVwcmVzZW50ZWQgYnkgdGhlIHN0ZXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5zdHJ1Y3Rpb25zOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0ZXAgZGlzdGFuY2UgaW4gbWV0ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRpc3RhbmNlOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRyYW5zcG9ydCB0eXBlIG9mIHRoZSBzdGVwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYW5zcG9ydFR5cGU6IERpcmVjdGlvbnMuVHJhbnNwb3J0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBsb2NhdGlvbiBvbiBhIG1hcCB3aGVuIHRoZSBFYXJ0aCdzIHN1cmZhY2UgaXMgcHJvamVjdGVkIG9udG8gYVxyXG4gICAgICogdHdvLWRpbWVuc2lvbmFsIHN1cmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hcFBvaW50IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0aWFsaXplcyBhIE1hcFBvaW50IG9iamVjdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB4IFRoZSBwb2ludCBhbG9uZyB0aGUgZWFzdC13ZXN0IGF4aXMgb2YgdGhlIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSAgVGhlIHBvaW50IGFsb25nIHRoZSBub3J0aC1zb3V0aCBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2NhdGlvbiBvZiB0aGUgcG9pbnQgYWxvbmcgdGhlIHgtYXhpcyBvZiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHg6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9jYXRpb24gb2YgdGhlIHBvaW50IGFsb25nIHRoZSB5LWF4aXMgb2YgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB5OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBjb3B5IG9mIGEgbWFwIHBvaW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcHkoKTogTWFwUG9pbnQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHR3byBtYXAgcG9pbnRzIGFyZSBlcXVhbC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBhbm90aGVyUG9pbnQgQSBtYXAgcG9pbnQgdG8gdXNlIGZvciBjb21wYXJpc29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVxdWFscyhhbm90aGVyUG9pbnQ6IE1hcFBvaW50KTogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvb3JkaW5hdGUgY29udGFpbmluZyB0aGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBjb3JyZXNwb25kaW5nXHJcbiAgICAgICAgICogdG8gYSBtYXAgcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9Db29yZGluYXRlKCk6IENvb3JkaW5hdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHBhaXIgb2YgdmFsdWVzIGluIG1hcCB1bml0cyB0aGF0IGRlZmluZSB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiBhXHJcbiAgICAgKiBwcm9qZWN0ZWQgY29vcmRpbmF0ZSBzcGFuLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBjbGFzcyBNYXBTaXplIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0aWFsaXplcyBhIE1hcFNpemUgb2JqZWN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHdpZHRoIFRoZSBkaXN0YW5jZSAobWVhc3VyZWQgdXNpbmcgbWFwIHBvaW50cykgYWxvbmcgdGhlIGVhc3Qtd2VzdFxyXG4gICAgICAgICAqIGF4aXMgb2YgdGhlIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSBoZWlnaHQgVGhlIGRpc3RhbmNlIChtZWFzdXJlZCB1c2luZyBtYXAgcG9pbnRzKSBhbG9uZyB0aGVcclxuICAgICAgICAgKiBub3J0aC1zb3V0aCBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBoZWlnaHQgdmFsdWUsIGluIG1hcCBwb2ludCB1bml0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgd2lkdGggdmFsdWUsIGluIG1hcCBwb2ludCB1bml0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB3aWR0aDogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgY29weSBvZiBhIG1hcCBzaXplLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcHkoKTogTWFwU2l6ZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdHdvIG1hcCBzaXplcyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gYW5vdGhlclNpemUgVGhlIG1hcCBzaXplIHRvIGVxdWF0ZSB0by5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlcXVhbHMoYW5vdGhlclNpemU6IE1hcFNpemUpOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSByZWN0YW5ndWxhciBhcmVhIG9uIGEgbWFwLCBkZWZpbmVkIGJ5IGNvb3JkaW5hdGVzIG9mIHRoZSByZWN0YW5nbGUnc1xyXG4gICAgICogbm9ydGhlYXN0IGFuZCBzb3V0aHdlc3QgY29ybmVycy5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgQm91bmRpbmdSZWdpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSByZWN0YW5ndWxhciBib3VuZGluZyByZWdpb24gZGVmaW5lZCBieSB0aGUgbGF0aXR1ZGUgYW5kXHJcbiAgICAgICAgICogbG9uZ2l0dWRlIGNvb3JkaW5hdGVzIG9mIHRoZSByZWN0YW5nbGUncyBub3J0aGVhc3QgYW5kIHNvdXRod2VzdCBjb3JuZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG5vcnRoTGF0aXR1ZGUgVGhlIG5vcnRoIGxhdGl0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIGVhc3RMb25naXR1ZGUgVGhlIGVhc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHNvdXRoTGF0aXR1ZGUgVGhlIHNvdXRoIGxhdGl0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHdlc3RMb25naXR1ZGUgVGhlIHdlc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3Iobm9ydGhMYXRpdHVkZTogbnVtYmVyLCBlYXN0TG9uZ2l0dWRlOiBudW1iZXIsIHNvdXRoTGF0aXR1ZGU6IG51bWJlciwgd2VzdExvbmdpdHVkZTogbnVtYmVyKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGVhc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZWFzdExvbmdpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBub3J0aCBsYXRpdHVkZSBvZiB0aGUgYm91bmRpbmcgcmVnaW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG5vcnRoTGF0aXR1ZGU6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc291dGggbGF0aXR1ZGUgb2YgdGhlIGJvdW5kaW5nIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzb3V0aExhdGl0dWRlOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHdlc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgd2VzdExvbmdpdHVkZTogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgY2FsbGluZyBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weSgpOiBCb3VuZGluZ1JlZ2lvbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgY29vcmRpbmF0ZSByZWdpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY2FsbGluZyBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9Db29yZGluYXRlUmVnaW9uKCk6IENvb3JkaW5hdGVSZWdpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIG1pbmltdW0gYW5kIG1heGltdW0gY2FtZXJhIGRpc3RhbmNlIGFzIG1ldGVycyBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIG1hcC5cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FtZXJhWm9vbVJhbmdlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXNjcmliZXMgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gY2FtZXJhIGRpc3RhbmNlIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihtaW5DYW1lcmFEaXN0YW5jZTogQ2FtZXJhWm9vbVJhbmdlQ29uc3RydWN0b3JPcHRpb25zIHwgbnVtYmVyLCBtYXhDYW1lcmFEaXN0YW5jZT86IG51bWJlcik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIGFsbG93ZWQgZGlzdGFuY2Ugb2YgdGhlIGNhbWVyYSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIG1hcCBpbiBtZXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluQ2FtZXJhRGlzdGFuY2U6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIGRpc3RhbmNlIG9mIHRoZSBjYW1lcmEgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBtYXAgaW4gbWV0ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1heENhbWVyYURpc3RhbmNlOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXphdGlvbiBvcHRpb25zIGZvciB0aGUgY2FtZXJhIHpvb20gcmFuZ2UuXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDYW1lcmFab29tUmFuZ2VDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIGFsbG93ZWQgZGlzdGFuY2Ugb2YgdGhlIGNhbWVyYSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIG1hcCBpbiBtZXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluQ2FtZXJhRGlzdGFuY2U/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1heGltdW0gYWxsb3dlZCBkaXN0YW5jZSBvZiB0aGUgY2FtZXJhIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgbWFwIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtYXhDYW1lcmFEaXN0YW5jZT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBvcmlnaW5hbCBHZW9KU09OIGRhdGEsIHdoaWNoIG1heSBiZSBhIFVSTCB0byBhIEdlb0pTT04gZmlsZSxcclxuICAgICAqIG9yIGEgR2VvSlNPTiBvYmplY3QuXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIHJlcXVpcmVkIGlmIHlvdSBwcm92aWRlIGEgVVJMXHJcbiAgICAgKiBmb3IgdGhlIGRhdGEgcGFyYW1ldGVyLCBhbmQgb3B0aW9uYWwgb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBpbXBvcnRHZW9KU09OKFxyXG4gICAgICAgIGRhdGE6IHN0cmluZyB8IG9iamVjdCxcclxuICAgICAgICBjYWxsYmFjaz86IEdlb0pTT05EZWxlZ2F0ZSB8IEltcG9ydEdlb0pTT05DYWxsYmFja1xyXG4gICAgKTogSXRlbUNvbGxlY3Rpb24gfCBFcnJvcjtcclxuXHJcbiAgICBleHBvcnQgZGVjbGFyZSB0eXBlIEltcG9ydEdlb0pTT05DYWxsYmFjayA9IChlcnJvcjogRXJyb3IsIHJlc3VsdDogSXRlbUNvbGxlY3Rpb24pID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGRlbGVnYXRlIG9iamVjdCB0aGF0IGNvbnRyb2xzIGEgR2VvSlNPTiBpbXBvcnQgaW4gb3JkZXIgdG8gb3ZlcnJpZGVcclxuICAgICAqIGRlZmF1bHQgYmVoYXZpb3IgYW5kIHByb3ZpZGUgY3VzdG9tIHN0eWxlLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgR2VvSlNPTkRlbGVnYXRlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgYSBmZWF0dXJlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGl0ZW0gQW4gaXRlbSBjcmVhdGVkIGZvciB0aGUgZ2VvbWV0cnkgb2YgdGhpcyBmZWF0dXJlIG9yIG51bGwgZm9yXHJcbiAgICAgICAgICogZmVhdHVyZXMgd2l0aCBudWxsIGdlb21ldHJ5LlxyXG4gICAgICAgICAqIEBwYXJhbSBnZW9KU09OIFRoZSBvcmlnaW5hbCBHZW9KU09OIG9iamVjdCBmb3IgdGhpcyBmZWF0dXJlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGl0ZW1Gb3JGZWF0dXJlPyhcclxuICAgICAgICAgICAgaXRlbTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBJdGVtQ29sbGVjdGlvbiB8IG51bGwsXHJcbiAgICAgICAgICAgIGdlb0pTT046IG9iamVjdFxyXG4gICAgICAgICk6IEFubm90YXRpb24gfCBPdmVybGF5IHwgQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgYSBmZWF0dXJlIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbUNvbGxlY3Rpb24gQSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgYXNzb2NpYXRlZCBhbm5vdGF0aW9ucyBhbmRcclxuICAgICAgICAgKiBvdmVybGF5cy5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgRmVhdHVyZUNvbGxlY3Rpb24uXHJcbiAgICAgICAgICogVGhpcyB3aWxsIGNvbnRhaW4gYW4gYXJyYXkgb2YgZmVhdHVyZSB0eXBlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yRmVhdHVyZUNvbGxlY3Rpb24/KFxyXG4gICAgICAgICAgICBpdGVtQ29sbGVjdGlvbjogSXRlbUNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgIGdlb0pTT046IG9iamVjdFxyXG4gICAgICAgICk6IEFubm90YXRpb24gfCBPdmVybGF5IHwgQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgYSBsaW5lIHN0cmluZy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvdmVybGF5IEEgUG9seWxpbmVPdmVybGF5IG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBvcmlnaW5hbCBHZW9KU09OIG9iamVjdCBmb3IgdGhpcyBMaW5lU3RyaW5nIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yTGluZVN0cmluZz8oXHJcbiAgICAgICAgICAgIG92ZXJsYXk6IFBvbHlsaW5lT3ZlcmxheSxcclxuICAgICAgICAgICAgZ2VvSlNPTjogb2JqZWN0XHJcbiAgICAgICAgKTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIG11bHRpbGluZSBzdHJpbmcuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbUNvbGxlY3Rpb24gQW4gaXRlbSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgYXNzb2NpYXRlZCBvdmVybGF5cy5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgTXVsdGlMaW5lU3RyaW5nLiBUaGlzXHJcbiAgICAgICAgICogd2lsbCBjb250YWluIGFuIGFycmF5IG9mIGdlb21ldHJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXRlbUZvck11bHRpTGluZVN0cmluZz8oXHJcbiAgICAgICAgICAgIGl0ZW1Db2xsZWN0aW9uOiBJdGVtQ29sbGVjdGlvbixcclxuICAgICAgICAgICAgZ2VvSlNPTjogb2JqZWN0XHJcbiAgICAgICAgKTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIHBvaW50LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGUgQSBHZW9KU09OIFBvaW50IGdlbmVyYXRlcyB0aGUgY29vcmRpbmF0ZS4gWW91IGNhbiB1c2VcclxuICAgICAgICAgKiB0aGUgY29vcmRpbmF0ZSB0byBpbnN0YW50aWF0ZSBhbiBpdGVtIHRvIHJldHVybi5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgUG9pbnQuIFRoaXMgb2JqZWN0IGNvdWxkXHJcbiAgICAgICAgICogYmUgYSBzaW1wbGUgUG9pbnQgb3IgYSBGZWF0dXJlIHdpdGggdGhlIFBvaW50IGdlb21ldHJ5IHR5cGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXRlbUZvclBvaW50Pyhjb29yZGluYXRlOiBDb29yZGluYXRlLCBnZW9KU09OOiBvYmplY3QpOiBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIG11bHRpcG9pbnQgb2JqZWN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGl0ZW1Db2xsZWN0aW9uIEEgY29sbGVjdGlvbiBjb250YWluaW5nIGFzc29jaWF0ZWQgYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIEdlb0pTT04gb2JqZWN0IGZvciB0aGlzIE11bHRpUG9pbnQuIFRoaXMgd2lsbFxyXG4gICAgICAgICAqIGNvbnRhaW4gYW4gYXJyYXkgb2YgZ2VvbWV0cmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yTXVsdGlQb2ludD8oXHJcbiAgICAgICAgICAgIGl0ZW1Db2xsZWN0aW9uOiBJdGVtQ29sbGVjdGlvbixcclxuICAgICAgICAgICAgZ2VvSlNPTjogb2JqZWN0XHJcbiAgICAgICAgKTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIHBvbHlnb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gb3ZlcmxheSBZb3UgY2FuIGN1c3RvbWl6ZSB0aGUgcHJvdmlkZWQgb3ZlcmxheSBiZWZvcmUgcmV0dXJuaW5nIGl0LFxyXG4gICAgICAgICAqIG9yIHlvdSBjb3VsZCBjb21wbGV0ZWx5IHJlcGxhY2UgdGhlIG92ZXJsYXkuXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIEdlb0pTT04gb2JqZWN0IGZvciB0aGlzIHBvbHlnb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXRlbUZvclBvbHlnb24/KG92ZXJsYXk6IFBvbHlnb25PdmVybGF5LCBnZW9KU09OOiBvYmplY3QpOiBBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5PjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3ZlcnJpZGVzIGEgbXVsdGlwb2x5Z29uLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGl0ZW1Db2xsZWN0aW9uIEEgY29sbGVjdGlvbiBjb250YWluaW5nIGFzc29jaWF0ZWQgb3ZlcmxheXMuXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIEdlb0pTT04gb2JqZWN0IGZvciB0aGlzIE11bHRpUG9seWdvbi4gVGhpc1xyXG4gICAgICAgICAqIHdpbGwgY29udGFpbiBhbiBhcnJheSBvZiBnZW9tZXRyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGl0ZW1Gb3JNdWx0aVBvbHlnb24/KFxyXG4gICAgICAgICAgICBpdGVtQ29sbGVjdGlvbjogSXRlbUNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgIGdlb0pTT046IG9iamVjdFxyXG4gICAgICAgICk6IEFubm90YXRpb24gfCBPdmVybGF5IHwgQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgdGhlIHN0eWxlIG9mIG92ZXJsYXlzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG92ZXJsYXkgVGhlIG92ZXJsYXkgdG8gc3R5bGUuXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIEdlb0pTT04gZm9yIHRoaXMgZmVhdHVyZSBvciBnZW9tZXRyeSBvYmplY3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3R5bGVGb3JPdmVybGF5PyhvdmVybGF5OiBPdmVybGF5LCBnZW9KU09OOiBvYmplY3QpOiBTdHlsZTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29tcGxldGVzIHRoZSBHZW9KU09OIGltcG9ydC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSByZXN1bHQgVGhlIG1hcHBlZCBpdGVtIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIHBhcnNlZCBHZW9KU09OIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZW9KU09ORGlkQ29tcGxldGU/KHJlc3VsdDogSXRlbUNvbGxlY3Rpb24sIGdlb0pTT046IG9iamVjdCk6IHZvaWQ7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluZGljYXRlcyB0aGUgR2VvSlNPTiBpbXBvcnQgZmFpbGVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGVycm9yIEFuIEVycm9yIGluc3RhbmNlIHJlbGF0ZWQgdG8gdGhlIGxhc3QgYmxvY2tpbmcgZXJyb3IuXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIHBhcnNlZCBHZW9KU09OIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZW9KU09ORGlkRXJyb3I/KGVycm9yOiBFcnJvciwgZ2VvSlNPTjogb2JqZWN0KTogdm9pZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgdHJlZSBzdHJ1Y3R1cmUgY29udGFpbmluZyBhbm5vdGF0aW9ucywgb3ZlcmxheXMsIGFuZCBuZXN0ZWQgaXRlbVxyXG4gICAgICogY29sbGVjdGlvbiBvYmplY3RzLlxyXG4gICAgICovXHJcbiAgICBleHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgSXRlbUNvbGxlY3Rpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSByYXcgR2VvSlNPTiBkYXRhLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRhdGE6IG9iamVjdDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZsYXR0ZW5lZCBhcnJheSBvZiBpdGVtcyB0aGF0IGluY2x1ZGUgYW5ub3RhdGlvbnMgb3Igb3ZlcmxheXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RmxhdHRlbmVkSXRlbUxpc3Q6IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5PjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG5lc3RlZCBsaXN0IG9mIGFubm90YXRpb25zLCBvdmVybGF5cywgb3Igb3RoZXIgaXRlbSBjb2xsZWN0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtczogQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBJdGVtQ29sbGVjdGlvbj47XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBtYXBraXQ6ICh0eXBlb2YgTWFwS2l0KSA9IHdpbmRvdy5tYXBraXQgYXMgYW55O1xyXG4iXX0=