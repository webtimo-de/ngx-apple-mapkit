export var mapkit;
(function (mapkit) {
})(mapkit || (mapkit = {}));
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"mapkit.js","sourceRoot":"","sources":["../../../../projects/ngx-apple-mapkit/src/lib/mapkit.ts"],"names":[],"mappings":"AAAA,MAAM,KAAW,MAAM,CAk7FtB;AAl7FD,WAAiB,MAAM;AAk7FvB,CAAC,EAl7FgB,MAAM,KAAN,MAAM,QAk7FtB","sourcesContent":["export namespace mapkit {\r\n    /**\r\n     * Initialize a mapkit object by providing an authorization callback and language.\r\n     */\r\n    export declare function init(options: MapKitInitOptions): void;\r\n\r\n    /**\r\n     * Subscribes a listener function to an event type.\r\n     *\r\n     * @param type The type of event (e.g., \"configuration-change\").\r\n     * @param listener The callback function to invoke. listener is passed an\r\n     * Event as its sole argument.\r\n     * @param thisObject An object set as the this keyword on the listener function.\r\n     */\r\n    export declare function addEventListener<T>(\r\n        type: InitializationEventType,\r\n        listener: (this: T, event: InitializationEvent) => void,\r\n        thisObject?: T\r\n    ): void;\r\n\r\n    /**\r\n     * Unsubscribes a listener function from an event type.\r\n     *\r\n     * @param type The type of event (e.g., \"configuration-change\").\r\n     * @param listener The callback function to remove.\r\n     * @param thisObject An object set as the this keyword on the listener function.\r\n     */\r\n    export declare function removeEventListener<T>(\r\n        type: InitializationEventType,\r\n        listener: (this: T, event: InitializationEvent) => void,\r\n        thisObject?: T\r\n    ): void;\r\n\r\n    /**\r\n     * A language ID indicating the selected language.\r\n     */\r\n    export declare let language: string;\r\n    /**\r\n     * The build string.\r\n     */\r\n    export declare const build: string;\r\n    /**\r\n     * The version of MapKit JS.\r\n     */\r\n    export declare const version: string;\r\n\r\n    /**\r\n     * Initialization options for MapKit JS.\r\n     */\r\n    export declare interface MapKitInitOptions {\r\n        /**\r\n         * A callback function that obtains a token.\r\n         *\r\n         * @param done A function that completes the MapKit JS token request. Called\r\n         * after creating a new token.\r\n         */\r\n        authorizationCallback: (done: (token: string) => void) => void;\r\n        /**\r\n         * An ID that indicates the preferred language in which to display map\r\n         * labels, controls, directions, and other text.\r\n         */\r\n        language?: string | undefined;\r\n    }\r\n\r\n    /**\r\n     * Constants indicating the visibility of different adaptive map features.\r\n     */\r\n    export declare const FeatureVisibility: {\r\n        /**\r\n         * A constant indicating that feature visibility adapts to the current map state.\r\n         */\r\n        readonly Adaptive: string;\r\n        /**\r\n         * A constant indicating that the feature is always hidden.\r\n         */\r\n        readonly Hidden: string;\r\n        /**\r\n         * A constant indicating that the feature is always visible.\r\n         */\r\n        readonly Visible: string;\r\n    };\r\n\r\n    export declare type InitializationEventType = \"configuration-change\" | \"error\";\r\n\r\n    export declare interface InitializationEvent {\r\n        status: \"Initialized\" | \"Refreshed\" | \"Unauthorized\" | \"Too Many Requests\";\r\n    }\r\n\r\n    /**\r\n     * An embeddable interactive map that you add to a webpage.\r\n     */\r\n    export declare class Map {\r\n        /**\r\n         * Creates a map that you embed on a webpage, and initializes its display\r\n         * properties and other options.\r\n         *\r\n         * @parent parent A DOM element or the ID of a DOM element to use as this\r\n         * map's container.\r\n         * @param parent\r\n         * @param options An object that contains options for initializing a map's\r\n         * features.\r\n         */\r\n        constructor(parent: string | Element, options?: MapConstructorOptions);\r\n\r\n        /**\r\n         * Adds an event listener to handle events triggered by user interactions\r\n         * and the framework.\r\n         *\r\n         * @param type The event type of interest (e.g., \"select\").\r\n         * @param listener The callback function to invoke. Listener is passed a\r\n         * Map event as its sole argument.\r\n         * @param thisObject An object to be set as the this keyword on the listener\r\n         * function.\r\n         */\r\n        addEventListener<T, K extends keyof MapEvents<this>>(\r\n            type: K,\r\n            listener: (this: T, event: MapEvents<this>[K]) => void,\r\n            thisObject?: T\r\n        ): void;\r\n\r\n        /**\r\n         * Removes an event listener.\r\n         */\r\n        removeEventListener<T, K extends keyof MapEvents<this>>(\r\n            type: K,\r\n            listener: (type: T, event: MapEvents<this>[K]) => void,\r\n            thisObject?: T\r\n        ): void;\r\n\r\n        /**\r\n         * Removes the map's element from the DOM and releases internal references to\r\n         * this map to free up memory.\r\n         */\r\n        destroy(): void;\r\n\r\n        /**\r\n         * The map's DOM element.\r\n         */\r\n        readonly element: Element;\r\n\r\n        // Accessing Interaction Properties\r\n\r\n        /**\r\n         * A Boolean value that indicates if map rotation is available.\r\n         */\r\n        isRotationAvailable: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the user may rotate the map using\r\n         * the compass control or a rotate gesture.\r\n         */\r\n        isRotationEnabled: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the user may scroll the map with\r\n         * a pointing device or with gestures on a touchscreen.\r\n         */\r\n        isScrollEnabled: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the user may zoom in and out on\r\n         * the map using pinch gestures or the zoom control.\r\n         */\r\n        isZoomEnabled: boolean;\r\n\r\n        // Manipulating the Visible Portion of the Map\r\n\r\n        /**\r\n         * The map coordinate at the center of the map view.\r\n         */\r\n        center: Coordinate;\r\n\r\n        /**\r\n         * Centers the map to the provided coordinate, with optional animation.\r\n         */\r\n        setCenterAnimated(coordinate: Coordinate, animate?: boolean): this;\r\n\r\n        /**\r\n         * The area currently displayed by the map.\r\n         */\r\n        region: CoordinateRegion;\r\n\r\n        /**\r\n         * Changes the map's region to the region provided, with optional animation.\r\n         */\r\n        setRegionAnimated(region: CoordinateRegion, animate?: boolean): this;\r\n\r\n        /**\r\n         * The map's rotation, in degrees.\r\n         */\r\n        rotation: number;\r\n\r\n        /**\r\n         * Changes the map's rotation setting to the number of degrees specified.\r\n         */\r\n        setRotationAnimated(degrees: number, animate?: boolean): this;\r\n\r\n        /**\r\n         * The visible area of the map defined in map units.\r\n         */\r\n        visibleMapRect: MapRect;\r\n\r\n        /**\r\n         * Changes the map's visible map rectangle to the specified map rectangle.\r\n         */\r\n        setVisibleMapRectAnimated(mapRect: MapRect, animate?: boolean): this;\r\n\r\n        /**\r\n         * Sets a constraint for the center of the map.\r\n         */\r\n        cameraBoundary: CameraBoundaryDescription;\r\n\r\n        /**\r\n         * Changes the map's camera boundary with an animated transition.\r\n         */\r\n        setCameraBoundaryAnimated(coordinateRegionOrMapRect: CoordinateRegion | MapRect, animate?: boolean): this;\r\n\r\n        /**\r\n         * Sets the altitude of the camera above the center of the map.\r\n         */\r\n        cameraDistance: number;\r\n\r\n        /**\r\n         * Changes the map's camera distance with an animated transition.\r\n         */\r\n        setCameraDistanceAnimated(distance: number, animate?: boolean): this;\r\n\r\n        /**\r\n         * Sets the minimum and maximum distance of the camera from the map center.\r\n         */\r\n        cameraZoomRange: CameraZoomRange;\r\n\r\n        /**\r\n         * Changes the map's camera zoom range with an animated transition.\r\n         */\r\n        setCameraZoomRangeAnimated(cameraZoomRange: CameraZoomRange, animate?: boolean): this;\r\n\r\n        // Configuring the Map's Appearance\r\n\r\n        /**\r\n         * Constants indicating the color scheme of the map.\r\n         */\r\n        static readonly ColorSchemes: {\r\n            /**\r\n             * A constant indicating a light color scheme.\r\n             */\r\n            readonly Light: string;\r\n            /**\r\n             * A constant indicating a dark color scheme.\r\n             */\r\n            readonly Dark: string;\r\n        };\r\n        /**\r\n         * Constants representing the type of map to display.\r\n         */\r\n        static readonly MapTypes: {\r\n            /**\r\n             * A street map that shows the position of all roads and some road names.\r\n             */\r\n            readonly Standard: string;\r\n            /**\r\n             * A street map where your data is emphasized over the underlying map details.\r\n             */\r\n            readonly MutedStandard: string;\r\n            /**\r\n             * A satellite image of the area with road and road name information\r\n             * layered on top.\r\n             */\r\n            readonly Hybrid: string;\r\n            /**\r\n             * A satellite image of the area.\r\n             */\r\n            readonly Satellite: string;\r\n        };\r\n        /**\r\n         * Constants indicating the system of measurement displayed on the map.\r\n         */\r\n        static readonly Distances: {\r\n            /**\r\n             * A constant indicating the measurement system is adaptive, and determined\r\n             * based on the map's language.\r\n             */\r\n            readonly Adaptive: string;\r\n            /**\r\n             * A constant indicating the measurement system is imperial.\r\n             */\r\n            readonly Imperial: string;\r\n            /**\r\n             * A constant indicating the measurement system is metric.\r\n             */\r\n            readonly Metric: string;\r\n        };\r\n        /**\r\n         * The map’s color scheme when displaying standard or muted standard map types.\r\n         */\r\n        colorScheme: string;\r\n        /**\r\n         * The system of measurement displayed on the map.\r\n         */\r\n        distances: string;\r\n        /**\r\n         * The type of data displayed by the map view.\r\n         */\r\n        mapType: string;\r\n        /**\r\n         * The map's inset margins.\r\n         */\r\n        padding: Padding;\r\n        /**\r\n         * A feature visibility setting that determines when the compass is visible.\r\n         */\r\n        showsCompass: string;\r\n        /**\r\n         * A Boolean value that determines whether to display a control that lets\r\n         * users choose the map type.\r\n         */\r\n        showsMapTypeControl: boolean;\r\n        /**\r\n         * A Boolean value that determines whether to display a control for zooming\r\n         * in and zooming out on a map.\r\n         */\r\n        showsZoomControl: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the user location control is visible.\r\n         */\r\n        showsUserLocationControl: boolean;\r\n        /**\r\n         * The filter used to determine the points of interest shown on the map.\r\n         */\r\n        pointOfInterestFilter: PointOfInterestFilter;\r\n        /**\r\n         * A Boolean value that determines whether the map displays points of interest.\r\n         */\r\n        showsPointsOfInterest: boolean;\r\n        /**\r\n         * A feature visibility setting that determines when the map's scale is displayed.\r\n         */\r\n        showsScale: string;\r\n        /**\r\n         * The CSS color that is used to paint the user interface controls on the map.\r\n         */\r\n        tintColor: string;\r\n\r\n        /**\r\n         * Adjusts the maps visible region to bring the specified overlays and\r\n         * annotations into view.\r\n         */\r\n        showItems<I = Array<Annotation | Overlay>>(items: I, options?: MapShowItemsOptions): I;\r\n\r\n        // Annotating the Map\r\n\r\n        /**\r\n         * An array of all the annotations on the map.\r\n         */\r\n        annotations: Annotation[];\r\n        /**\r\n         * The annotation that is selected.\r\n         */\r\n        selectedAnnotation: Annotation | null;\r\n\r\n        /**\r\n         * A delegate method for modifying an annotation that represents a group of\r\n         * annotations that are combined into a cluster.\r\n         */\r\n        annotationForCluster(clusterAnnotation: Annotation): void;\r\n\r\n        /**\r\n         * Returns the list of annotation objects located in the specified map\r\n         * rectangle.\r\n         */\r\n        annotationsInMapRect(mapRect: MapRect): Annotation[];\r\n\r\n        /**\r\n         * Adds an annotation to the map.\r\n         */\r\n        addAnnotation(annotation: Annotation): Annotation;\r\n\r\n        /**\r\n         * Adds multiple annotations to the map.\r\n         */\r\n        addAnnotations(annotations: Annotation[]): Annotation[];\r\n\r\n        /**\r\n         * Removes an annotation from the map.\r\n         */\r\n        removeAnnotation(annotation: Annotation): Annotation;\r\n\r\n        /**\r\n         * Removes multiple annotations from the map.\r\n         */\r\n        removeAnnotations(annotations: Annotation[]): Annotation[];\r\n\r\n        // Adding and Removing Overlays\r\n\r\n        /**\r\n         * An array of all the map's overlays.\r\n         */\r\n        overlays: Overlay[];\r\n        /**\r\n         * The overlay on the map that is selected.\r\n         */\r\n        selectedOverlay: Overlay | null;\r\n\r\n        /**\r\n         * Returns an array of overlays at a given point on the webpage.\r\n         */\r\n        overlaysAtPoint(point: DOMPoint): Overlay[];\r\n\r\n        /**\r\n         * Adds an overlay to the map.\r\n         */\r\n        addOverlay(overlay: Overlay): Overlay;\r\n\r\n        /**\r\n         * Adds multiple overlays to the map.\r\n         */\r\n        addOverlays(overlays: Overlay[]): Overlay[];\r\n\r\n        /**\r\n         * Removes an overlay from the map.\r\n         */\r\n        removeOverlay(overlay: Overlay): Overlay;\r\n\r\n        /**\r\n         * Removes multiple overlays from the map.\r\n         */\r\n        removeOverlays(overlays: Overlay[]): Overlay[];\r\n\r\n        /**\r\n         * Returns the topmost overlay at a given point on the webpage.\r\n         */\r\n        topOverlayAtPoint(point: DOMPoint): Overlay | null;\r\n\r\n        // Adding and Removing Geographical Features\r\n\r\n        /**\r\n         * Adds a collection of annotations, overlays, or other item collections to the map.\r\n         */\r\n        addItems(\r\n            items: Array<Annotation | Overlay | ItemCollection> | ItemCollection\r\n        ): Array<Annotation | Overlay | ItemCollection> | ItemCollection;\r\n\r\n        /**\r\n         * Removes a collection of annotations, overlays, or other item collections from the map.\r\n         */\r\n        removeItems(\r\n            items: Array<Annotation | Overlay | ItemCollection> | ItemCollection\r\n        ): Array<Annotation | Overlay | ItemCollection> | ItemCollection;\r\n\r\n        // Adding and Removing Tile Overlays\r\n\r\n        /**\r\n         * An array of all the map's tile overlays.\r\n         */\r\n        tileOverlays: TileOverlay[];\r\n\r\n        /**\r\n         * Adds a tile overlay to the map.\r\n         */\r\n        addTileOverlay(tileOverlay: TileOverlay): TileOverlay;\r\n\r\n        /**\r\n         * Adds an array of tile overlays to the map.\r\n         */\r\n        addTileOverlays(tileOverlays: TileOverlay[]): TileOverlay[];\r\n\r\n        /**\r\n         * Removes a tile overlay from the map.\r\n         */\r\n        removeTileOverlay(tileOverlay: TileOverlay): TileOverlay;\r\n\r\n        /**\r\n         * Removes an array of tile overlays from the map.\r\n         */\r\n        removeTileOverlays(tileOverlays: TileOverlay[]): TileOverlay[];\r\n\r\n        // Displaying the User's Location\r\n\r\n        /**\r\n         * A Boolean value that determines whether to show the user's location on\r\n         * the map.\r\n         */\r\n        showsUserLocation: boolean;\r\n        /**\r\n         * A Boolean value that determines whether to center the map on the user's\r\n         * location.\r\n         */\r\n        tracksUserLocation: boolean;\r\n        /**\r\n         * An annotation that indicates the user's location on the map.\r\n         */\r\n        readonly userLocationAnnotation: Annotation | null;\r\n\r\n        // Converting Map Coordinates\r\n\r\n        /**\r\n         * Converts a coordinate on the map to a point in the page's coordinate system.\r\n         */\r\n        convertCoordinateToPointOnPage(coordinate: Coordinate): DOMPoint;\r\n\r\n        /**\r\n         * Converts a point in page coordinates to the corresponding map coordinate.\r\n         */\r\n        convertPointOnPageToCoordinate(point: DOMPoint): Coordinate;\r\n    }\r\n\r\n    /**\r\n     * An object that contains options for initializing a map's features.\r\n     */\r\n    export declare interface MapConstructorOptions {\r\n        /**\r\n         * The visible area of the map defined in map units.\r\n         */\r\n        visibleMapRect?: MapRect | undefined;\r\n        /**\r\n         * The area currently displayed by the map.\r\n         */\r\n        region?: CoordinateRegion | undefined;\r\n        /**\r\n         * The map coordinate at the center of the map view.\r\n         */\r\n        center?: Coordinate | undefined;\r\n        /**\r\n         * The map's rotation, in degrees.\r\n         */\r\n        rotation?: number | undefined;\r\n        /**\r\n         * The CSS color that is used to paint the user interface controls on the map.\r\n         */\r\n        tintColor?: string | undefined;\r\n        /**\r\n         * The map’s color scheme when displaying standard or muted standard map types.\r\n         */\r\n        colorScheme?: string | undefined;\r\n        /**\r\n         * The type of data displayed by the map view.\r\n         */\r\n        mapType?: string | undefined;\r\n        /**\r\n         * The map's inset margins.\r\n         */\r\n        padding?: Padding | undefined;\r\n        /**\r\n         * A Boolean value that determines whether to display a control that lets\r\n         * users choose the map type.\r\n         */\r\n        showsMapTypeControl?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the user may rotate the map using\r\n         * the compass control or a rotate gesture.\r\n         */\r\n        isRotationEnabled?: boolean | undefined;\r\n        /**\r\n         * A feature visibility setting that determines when the compass is visible.\r\n         */\r\n        showsCompass?: string | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the user may zoom in and out on\r\n         * the map using pinch gestures or the zoom control.\r\n         */\r\n        isZoomEnabled?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether to display a control for zooming\r\n         * in and zooming out on a map.\r\n         */\r\n        showsZoomControl?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the user may scroll the map with\r\n         * a pointing device or gestures on a touchscreen.\r\n         */\r\n        isScrollEnabled?: boolean | undefined;\r\n        /**\r\n         * A feature visibility setting that determines when the map's scale is\r\n         * displayed.\r\n         */\r\n        showsScale?: string | undefined;\r\n\r\n        /**\r\n         * A delegate method for modifying cluster annotations.\r\n         */\r\n        annotationForCluster?(annotation: Annotation): void;\r\n\r\n        /**\r\n         * An array of all the annotations on the map.\r\n         */\r\n        annotations?: Annotation[] | undefined;\r\n        /**\r\n         * The annotation on the map that is selected.\r\n         */\r\n        selectedAnnotation?: Annotation | undefined;\r\n        /**\r\n         * An array of all the map's overlays.\r\n         */\r\n        overlays?: Overlay[] | undefined;\r\n        /**\r\n         * The overlay on the map that is selected.\r\n         */\r\n        selectedOverlay?: Overlay | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the map displays points of interest.\r\n         */\r\n        showsPointsOfInterest?: boolean | undefined;\r\n        /*\r\n         * The filter used to determine the points of interest shown on the map.\r\n         */\r\n        pointOfInterestFilter?: PointOfInterestFilter | undefined;\r\n        /**\r\n         * A Boolean value that determines whether to show the user's location on\r\n         * the map.\r\n         */\r\n        showsUserLocation?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether to center the map on the user's\r\n         * location.\r\n         */\r\n        tracksUserLocation?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the user location control is visible.\r\n         */\r\n        showsUserLocationControl?: boolean | undefined;\r\n    }\r\n\r\n    /**\r\n     * An object literal containing at least one property defining an area on the map.\r\n     */\r\n    export declare interface CameraBoundaryDescription {\r\n        /**\r\n         * A rectangular area on a two-dimensional map projection.\r\n         */\r\n        mapRect?: MapRect | undefined;\r\n        /**\r\n         * A rectangular area on a map, defined by coordinates of the rectangle's northeast and southwest corners.\r\n         */\r\n        region?: CoordinateRegion | undefined;\r\n    }\r\n\r\n    /**\r\n     * An array to which maps are automatically added and removed as they are\r\n     * initialized and destroyed.\r\n     */\r\n    export declare const maps: Map[];\r\n\r\n    export declare interface EventBase<T> {\r\n        type: string;\r\n        target: T;\r\n    }\r\n\r\n    // Map Display Events\r\n    export declare interface MapDisplayEvents<T> {\r\n        \"region-change-start\": EventBase<T>;\r\n        \"region-change-end\": EventBase<T>;\r\n        \"rotation-start\": EventBase<T>;\r\n        \"rotation-end\": EventBase<T>;\r\n        \"scroll-start\": EventBase<T>;\r\n        \"scroll-end\": EventBase<T>;\r\n        \"zoom-start\": EventBase<T>;\r\n        \"zoom-end\": EventBase<T>;\r\n        \"map-type-change\": EventBase<T>;\r\n    }\r\n\r\n    // Map Annotations Overlay Events\r\n    export declare interface MapAnnotationOverlayEvents<T> {\r\n        select: EventBase<T> & {annotation?: Annotation | undefined; overlay?: Overlay | undefined};\r\n        deselect: EventBase<T> & {annotation?: Annotation | undefined; overlay?: Overlay | undefined};\r\n        \"drag-start\": EventBase<T> & {annotation: Annotation};\r\n        dragging: EventBase<T> & {annotation: Annotation; coordinate: Coordinate};\r\n        \"drag-end\": EventBase<T> & {annotation: Annotation};\r\n    }\r\n\r\n    // User Location Events\r\n    export declare interface MapUserLocationEvents<T> {\r\n        \"user-location-change\": EventBase<T> & {coordinate: Coordinate; timestamp: Date};\r\n        \"user-location-error\": EventBase<T> & {code: number; message: string};\r\n    }\r\n\r\n    // Map Interaction Events\r\n    export declare interface MapInteractionEvents<T> {\r\n        \"single-tap\": EventBase<T>;\r\n        \"double-tap\": EventBase<T>;\r\n        \"long-press\": EventBase<T>;\r\n    }\r\n\r\n    // All map events\r\n    export declare type MapEvents<T> =\r\n        & MapDisplayEvents<T>\r\n        & MapAnnotationOverlayEvents<T>\r\n        & MapUserLocationEvents<T>\r\n        & MapInteractionEvents<T>;\r\n\r\n    /**\r\n     * Options that determine map parameters used when showing items.\r\n     */\r\n    export declare interface MapShowItemsOptions {\r\n        /**\r\n         * A Boolean value that determines whether the map is animated as the map\r\n         * region changes to show the items.\r\n         */\r\n        animate?: boolean | undefined;\r\n        /**\r\n         * The minimum longitudinal and latitudinal span the map should display.\r\n         */\r\n        padding?: Padding | undefined;\r\n        /**\r\n         * Spacing that is added around the computed map region when showing items.\r\n         */\r\n        minimumSpan?: CoordinateSpan | undefined;\r\n    }\r\n\r\n    /**\r\n     * A rectangular area on a two-dimensional map projection.\r\n     */\r\n    export declare class MapRect {\r\n        /**\r\n         * Initializes a MapRect object.\r\n         *\r\n         * @param x The origin point along the east-west axis of the map projection.\r\n         * @param y The origin point along the north-south axis of the map projection.\r\n         * @param width The distance (measured using map points) along the east-west\r\n         * axis of the map projection.\r\n         * @param height The distance (measured using map points) along the north-south\r\n         * axis of the map projection.\r\n         */\r\n        constructor(x: number, y: number, width: number, height: number);\r\n\r\n        /**\r\n         * The origin point of a rectangle.\r\n         */\r\n        origin: MapPoint;\r\n        /**\r\n         * The width and height of a rectangle, starting from the origin point.\r\n         */\r\n        size: MapSize;\r\n        /**\r\n         * The maximum x-axis value of a rectangle.\r\n         */\r\n        maxX: number;\r\n        /**\r\n         * The maximum y-axis value of a rectangle.\r\n         */\r\n        maxY: number;\r\n        /**\r\n         * The mid-point along the x-axis of a rectangle.\r\n         */\r\n        midX: number;\r\n        /**\r\n         * The mid-point along the y-axis of a rectangle.\r\n         */\r\n        midY: number;\r\n        /**\r\n         * The minimum x-axis value of a rectangle.\r\n         */\r\n        minX: number;\r\n        /**\r\n         * The minimum y-axis value of a rectangle.\r\n         */\r\n        minY: number;\r\n\r\n        /**\r\n         * Returns a copy of a map rectangle.\r\n         */\r\n        copy(): MapRect;\r\n\r\n        /**\r\n         * Indicates whether two map rectangles are equal.\r\n         *\r\n         * @param anotherRect The map rectangle to equate to.\r\n         */\r\n        equals(anotherRect: MapRect): boolean;\r\n\r\n        /**\r\n         * @param scaleFactor The scale factor.\r\n         * @param scaleCenter The center map point for scaling.\r\n         */\r\n        scale(scaleFactor: number, scaleCenter: MapPoint): MapRect;\r\n\r\n        /**\r\n         * Returns the region that corresponds to a map rectangle.\r\n         */\r\n        toCoordinateRegion(): CoordinateRegion;\r\n    }\r\n\r\n    /**\r\n     * A rectangular area on a map defined by a center coordinate and a span,\r\n     * expressed in degrees of latitude and longitude.\r\n     */\r\n    export declare class CoordinateRegion {\r\n        /**\r\n         * Creates A rectangular geographic region centered around a latitude and\r\n         * longitude coordinate.\r\n         *\r\n         * @param center Coordinate that is center point of the region.\r\n         * @param span A CoordinateSpan that represents the amount of map to\r\n         * display. The span also defines the current zoom level used by the map object.\r\n         */\r\n        constructor(center: Coordinate, span: CoordinateSpan);\r\n\r\n        /**\r\n         * The center point of the region.\r\n         */\r\n        center: Coordinate;\r\n        /**\r\n         * The horizontal and vertical span representing the amount of map to display.\r\n         */\r\n        span: CoordinateSpan;\r\n        /**\r\n         * The distance provided in meters or the longest distance derived from the center point to the region’s bounding box.\r\n         */\r\n        readonly radius: number;\r\n\r\n        /**\r\n         * Returns a copy of the calling coordinate region.\r\n         */\r\n        copy(): CoordinateRegion;\r\n\r\n        /**\r\n         * Returns a Boolean value indicating whether two regions are equal.\r\n         */\r\n        equals(anotherRegion: CoordinateRegion): boolean;\r\n\r\n        /**\r\n         * Returns the map rectangle that corresponds to the calling coordinate region.\r\n         */\r\n        toMapRect(): MapRect;\r\n\r\n        /**\r\n         * Returns the bounding region that corresponds to the calling coordinate region.\r\n         */\r\n        toBoundingRegion(): BoundingRegion;\r\n    }\r\n\r\n    /**\r\n     * An object representing the latitude and longitude for a point on the\r\n     * Earth's surface.\r\n     */\r\n    export declare class Coordinate {\r\n        /**\r\n         * Creates a coordinate object with the specified latitude and longitude.\r\n         */\r\n        constructor(latitude: number, longitude: number);\r\n\r\n        /**\r\n         * The latitude in degrees.\r\n         */\r\n        latitude: number;\r\n        /**\r\n         * The longitude in degrees.\r\n         */\r\n        longitude: number;\r\n\r\n        /**\r\n         * Returns a copy of the coordinate.\r\n         */\r\n        copy(): Coordinate;\r\n\r\n        /**\r\n         * Returns a Boolean value indicating whether two coordinates are equal.\r\n         */\r\n        equals(anotherCoordinate: Coordinate): boolean;\r\n\r\n        /**\r\n         * Returns the map point that corresponds to the coordinate.\r\n         */\r\n        toMapPoint(): MapPoint;\r\n\r\n        /**\r\n         * Returns the unwrapped map point that corresponds to the coordinate.\r\n         */\r\n        toUnwrappedMapPoint(): MapPoint;\r\n    }\r\n\r\n    /**\r\n     * The values that define content padding within the map view frame.\r\n     */\r\n    export declare class Padding {\r\n        /**\r\n         * Creates a padding object, and initializes its inset margin properties.\r\n         *\r\n         * @param top The amount of padding, in CSS pixels, to inset the map from\r\n         * the top edge.\r\n         * @param right The amount of padding, in CSS pixels, to inset the map from\r\n         * the right edge.\r\n         * @param bottom The amount of padding, in CSS pixels, to inset the map from\r\n         * the left edge.\r\n         * @param left The amount of padding, in CSS pixels, to inset the map from\r\n         * the left edge.\r\n         */\r\n        constructor(top?: number, right?: number, bottom?: number, left?: number);\r\n        /**\r\n         * Creates a padding object, and initializes its inset margin properties.\r\n         *\r\n         * @param options An object literal of inset margin properties\r\n         */\r\n        constructor(options?: PaddingConstructorOptions);\r\n\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the bottom edge.\r\n         */\r\n        bottom: number;\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the left edge.\r\n         */\r\n        left: number;\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the right edge.\r\n         */\r\n        right: number;\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the top edge.\r\n         */\r\n        top: number;\r\n    }\r\n\r\n    export declare interface PaddingConstructorOptions {\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the bottom edge.\r\n         */\r\n        bottom?: number | undefined;\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the left edge.\r\n         */\r\n        left?: number | undefined;\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the right edge.\r\n         */\r\n        right?: number | undefined;\r\n        /**\r\n         * The amount of padding, in CSS pixels, to inset the map from the top edge.\r\n         */\r\n        top?: number | undefined;\r\n    }\r\n\r\n    /**\r\n     * The base annotation object, used for creating custom annotations.\r\n     */\r\n    export declare class Annotation {\r\n        /**\r\n         * Creates a new annotation given its location and initialization options.\r\n         *\r\n         * @param coordinate The coordinate at which this annotation should appear.\r\n         * @param factory A factory function that returns a DOM element used to\r\n         * represent this annotation.\r\n         * @param options A hash of properties with which to initialize the annotation.\r\n         */\r\n        constructor(\r\n            coordinate: Coordinate,\r\n            factory: (coordinate: Coordinate, options: AnnotationConstructorOptions) => Element,\r\n            options?: AnnotationConstructorOptions\r\n        );\r\n\r\n        /**\r\n         * Adds an event listener to handle events triggered by user interactions\r\n         * with annotations.\r\n         *\r\n         * @param type The event type of interest (e.g., \"select\").\r\n         * @param listener The callback function to invoke. listener is passed an\r\n         * annotation event as its sole argument.\r\n         * @param thisObject An object to be set as the this keyword on the\r\n         * listener function.\r\n         */\r\n        addEventListener<T>(\r\n            type: AnnotationEventType,\r\n            listener: (this: T, event: EventBase<Map>) => void,\r\n            thisObject?: T\r\n        ): void;\r\n\r\n        /**\r\n         * Adds an event listener to handle events triggered by user interactions\r\n         * with annotations.\r\n         *\r\n         * @param type The event type of interest (e.g., \"select\").\r\n         * @param listener The callback function to remove.\r\n         * @param thisObject An object to be set as the this keyword on the listener\r\n         * function.\r\n         */\r\n        removeEventListener<T>(\r\n            type: AnnotationEventType,\r\n            listener: (this: T, event: EventBase<Map>) => void,\r\n            thisObject?: T\r\n        ): void;\r\n\r\n        /**\r\n         * Constant values used to provide a hint the map uses to prioritize\r\n         * displaying annotations.\r\n         */\r\n        static readonly DisplayPriority: {\r\n            readonly Low: number;\r\n            readonly High: number;\r\n            readonly Required: number;\r\n        };\r\n        /**\r\n         * Constants indicating how to interpret the collision frame rectangle of\r\n         * an annotation view.\r\n         */\r\n        static readonly CollisionMode: {\r\n            readonly Rectangle: string;\r\n            readonly Circle: string;\r\n            readonly None: string;\r\n        };\r\n        _impl: any;\r\n\r\n        /**\r\n         * The annotation's coordinate.\r\n         */\r\n        coordinate: Coordinate;\r\n        /**\r\n         * The map to which the annotation was added.\r\n         */\r\n        readonly map: Map | null;\r\n        /**\r\n         * The annotation's element in the DOM.\r\n         */\r\n        readonly element: Element;\r\n        /**\r\n         * Data that you define that is assigned to the annotation.\r\n         */\r\n        data: any;\r\n        /**\r\n         * The text to display in the annotation's callout.\r\n         */\r\n        title: string;\r\n        /**\r\n         * The text to display as a subtitle, on the second line of an annotation's\r\n         * callout.\r\n         */\r\n        subtitle: string;\r\n        /**\r\n         * An offset that changes the annotation's default anchor point.\r\n         */\r\n        anchorOffset: DOMPoint;\r\n        /**\r\n         * A CSS animation that runs when the annotation appears on the map.\r\n         */\r\n        appearanceAnimation: string;\r\n        /**\r\n         * A numeric hint the map uses to prioritize displaying annotations.\r\n         */\r\n        displayPriority: number;\r\n        /**\r\n         * Spacing added around the annotation when showing items.\r\n         */\r\n        padding: Padding;\r\n        /**\r\n         * The desired dimensions of the annotation, in CSS pixels.\r\n         */\r\n        size: {width: number; height: number};\r\n        /**\r\n         * A Boolean value that determines if the annotation is visible or hidden.\r\n         */\r\n        visible: boolean;\r\n        /**\r\n         * A Boolean value that determines if the annotation should be animated.\r\n         */\r\n        animates: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the user can drag the annotation.\r\n         */\r\n        draggable: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the annotation is selected.\r\n         */\r\n        selected: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the annotation responds to user\r\n         * interaction.\r\n         */\r\n        enabled: boolean;\r\n        /**\r\n         * A delegate that enables you to customize the annotation's callout.\r\n         */\r\n        callout: AnnotationCalloutDelegate;\r\n        /**\r\n         * An offset that changes the annotation callout's default placement.\r\n         */\r\n        calloutOffset: DOMPoint;\r\n        /**\r\n         * A Boolean value that determines whether a callout should be shown.\r\n         */\r\n        calloutEnabled: boolean;\r\n        /**\r\n         * An array of annotations that are grouped together in a cluster.\r\n         */\r\n        memberAnnotations: Annotation[];\r\n        /**\r\n         * An identifer used for grouping annotations into the same cluster.\r\n         */\r\n        clusteringIdentifier: string | null;\r\n        /**\r\n         * A mode that determines the shape of the collision frame.\r\n         */\r\n        collisionMode: string;\r\n    }\r\n\r\n    /**\r\n     * An object that contains options for initializing annotation features.\r\n     */\r\n    export declare interface AnnotationConstructorOptions {\r\n        /**\r\n         * The text to display in the annotation's callout.\r\n         */\r\n        title?: string | undefined;\r\n        /**\r\n         * The text to display as a subtitle on the second line of an annotation's\r\n         * callout.\r\n         */\r\n        subtitle?: string | undefined;\r\n        /**\r\n         * Accessibility text for the annotation.\r\n         */\r\n        accessibilityLabel?: string | undefined;\r\n        /**\r\n         * Data you define that is assigned to the annotation.\r\n         */\r\n        data?: any;\r\n        /**\r\n         * A Boolean value that determines whether the user can drag the annotation.\r\n         */\r\n        draggable?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines if the annotation is visible or hidden.\r\n         */\r\n        visible?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the annotation responds to user\r\n         * interaction.\r\n         */\r\n        enabled?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the annotation is selected.\r\n         */\r\n        selected?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether a callout should be shown.\r\n         */\r\n        calloutEnabled?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines if the annotation should be animated.\r\n         */\r\n        animates?: boolean | undefined;\r\n        /**\r\n         * A CSS animation that runs when the annotation appears on the map.\r\n         */\r\n        appearanceAnimation?: string | undefined;\r\n        /**\r\n         * The offset in CSS pixels of the element from the bottom center.\r\n         */\r\n        anchorOffset?: DOMPoint | undefined;\r\n        /**\r\n         * The offset in CSS pixels of a callout from the top center of the element.\r\n         */\r\n        calloutOffset?: DOMPoint | undefined;\r\n        /**\r\n         * A delegate that enables you to customize the annotation's callout.\r\n         */\r\n        callout?: AnnotationCalloutDelegate | undefined;\r\n        /**\r\n         * The desired dimensions of the annotation, in CSS pixels.\r\n         */\r\n        size?: {width: number; height: number} | undefined;\r\n        /**\r\n         * A hint the map uses to prioritize displaying the annotation.\r\n         */\r\n        displayPriority?: number | undefined;\r\n        /**\r\n         * Spacing added around the annotation when showing items.\r\n         */\r\n        padding?: Padding | undefined;\r\n        /**\r\n         * A mode that determines the shape of the collision frame.\r\n         */\r\n        collisionMode?: string | undefined;\r\n        /**\r\n         * An identifer used for grouping annotations into the same cluster.\r\n         */\r\n        clusteringIdentifier?: string | undefined;\r\n    }\r\n\r\n    /**\r\n     * Methods for customizing the behavior and appearance of an annotation callout.\r\n     */\r\n    export declare interface AnnotationCalloutDelegate {\r\n        /**\r\n         * Returns a point determining the callout's anchor offset.\r\n         */\r\n        calloutAnchorOffsetForAnnotation?(annotation: Annotation, size: {width: number; height: number}): DOMPoint;\r\n\r\n        /**\r\n         * Determines whether the callout should appear for an annotation.\r\n         */\r\n        calloutShouldAppearForAnnotation?(annotation: Annotation): boolean;\r\n\r\n        /**\r\n         * Determines whether the callout should animate.\r\n         */\r\n        calloutShouldAnimateForAnnotation?(annotation: Annotation): boolean;\r\n\r\n        /**\r\n         * Returns a CSS animation used when the callout appears.\r\n         */\r\n        calloutAppearanceAnimationForAnnotation?(annotation: Annotation): string;\r\n\r\n        /**\r\n         * Returns custom content for the callout bubble.\r\n         */\r\n        calloutContentForAnnotation?(annotation: Annotation): Element;\r\n\r\n        /**\r\n         * Returns an element representing a custom callout.\r\n         */\r\n        calloutElementForAnnotation?(annotation: Annotation): Element;\r\n\r\n        /**\r\n         * Returns an element used as a custom accessory on the left side of the\r\n         * callout content area.\r\n         */\r\n        calloutLeftAccessoryForAnnotation?(annotation: Annotation): Element;\r\n\r\n        /**\r\n         * Returns an element used as a custom accessory on the right side of the\r\n         * callout content area.\r\n         */\r\n        calloutRightAccessoryForAnnotation?(annotation: Annotation): Element;\r\n    }\r\n\r\n    /**\r\n     * A customized annotation with image resources that you provide.\r\n     */\r\n    export declare class ImageAnnotation extends Annotation {\r\n        /**\r\n         * Initializes an image annotation with a URL to its image and a coordinate.\r\n         */\r\n        constructor(coordinate: Coordinate, options: ImageAnnotationConstructorOptions);\r\n    }\r\n\r\n    /**\r\n     * An object containing options for initializing an image annotation.\r\n     */\r\n    export declare interface ImageAnnotationConstructorOptions extends AnnotationConstructorOptions {\r\n        /**\r\n         * An object containing URLs for the image assets in multiple resolutions.\r\n         */\r\n        url: {\r\n            1: string;\r\n            2?: string | undefined;\r\n            3?: string | undefined;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a marker annotation at the coordinate location with provided options.\r\n     */\r\n    export declare class MarkerAnnotation extends Annotation {\r\n        /**\r\n         * Creates a marker annotation at the coordinate location with provided options.\r\n         *\r\n         * @param coordinate The coordinate at which this annotation should appear.\r\n         * @param options A hash of properties with which to initialize the annotation.\r\n         */\r\n        constructor(coordinate: Coordinate, options?: MarkerAnnotationConstructorOptions);\r\n\r\n        /**\r\n         * A value that determines the behavior of the subtitle's visibility.\r\n         */\r\n        subtitleVisibility: string;\r\n        /**\r\n         * A value that determines the behavior of the title's visibility.\r\n         */\r\n        titleVisibility: string;\r\n        /**\r\n         * The background color of the balloon.\r\n         */\r\n        color: string;\r\n        /**\r\n         * The fill color of the glyph.\r\n         */\r\n        glyphColor: string;\r\n        /**\r\n         * The text to display in the marker balloon.\r\n         */\r\n        glyphText: string;\r\n        /**\r\n         * The image to display in the marker balloon.\r\n         */\r\n        glyphImage: object | null;\r\n        /**\r\n         * The image to display in the balloon when the marker is selected.\r\n         */\r\n        selectedGlyphImage: object;\r\n    }\r\n\r\n    /**\r\n     * An object containing the options that initialize a marker annotation.\r\n     */\r\n    export declare interface MarkerAnnotationConstructorOptions extends AnnotationConstructorOptions {\r\n        /**\r\n         * The background color of the balloon.\r\n         */\r\n        color?: string | undefined;\r\n        /**\r\n         * The fill color of the glyph.\r\n         */\r\n        glyphColor?: string | undefined;\r\n        /**\r\n         * The text to display in the marker balloon.\r\n         */\r\n        glyphText?: string | undefined;\r\n        /**\r\n         * The image to display in the marker balloon.\r\n         */\r\n        glyphImage?:\r\n            | {\r\n            1: string;\r\n            2?: string | undefined;\r\n            3?: string | undefined;\r\n        }\r\n            | undefined;\r\n        /**\r\n         * The image to display in the balloon when the marker is selected.\r\n         */\r\n        selectedGlyphImage?: object | undefined;\r\n        /**\r\n         * A value that determines the behavior of the subtitle's visibility.\r\n         */\r\n        subtitleVisibility?: string | undefined;\r\n        /**\r\n         * A value that determines the behavior of the title's visibility.\r\n         */\r\n        titleVisibility?: string | undefined;\r\n    }\r\n\r\n    export declare type AnnotationEventType = \"select\" | \"deselect\" | \"drag-start\" | \"dragging\" | \"drag-end\";\r\n\r\n    /**\r\n     * An abstract base object that defines the methods and attributes for map overlays.\r\n     */\r\n    export declare abstract class Overlay {\r\n        /**\r\n         * Starts listening for the specified type of event.\r\n         */\r\n        addEventListener(type: OverlayEventType, listener: (event: EventBase<this>) => void, thisObject?: any): void;\r\n\r\n        /**\r\n         * Stops listening for the specified type of event.\r\n         */\r\n        removeEventListener(type: OverlayEventType, listener: (event: EventBase<this>) => void, thisObject?: any): void;\r\n\r\n        /**\r\n         * Custom data to associate with this overlay.\r\n         */\r\n        data: object;\r\n        /**\r\n         * A Boolean value that determines if an overlay is visible.\r\n         */\r\n        visible: boolean;\r\n        /**\r\n         * A Boolean value that determines whether the overlay responds to user interaction.\r\n         */\r\n        enabled: boolean;\r\n        /**\r\n         * A Boolean value that indicates whether the overlay is selected.\r\n         */\r\n        selected: boolean;\r\n        /**\r\n         * Style properties to apply to the overlay.\r\n         */\r\n        style: Style;\r\n        /**\r\n         * The map to which the overlay is added.\r\n         */\r\n        readonly map: Map | null;\r\n    }\r\n\r\n    /**\r\n     * A circular overlay with a configurable radius, centered on a specific\r\n     * geographic coordinate.\r\n     */\r\n    export declare class CircleOverlay extends Overlay {\r\n        /**\r\n         * Creates a circle overlay with a center coordinate, radius, and style options.\r\n         *\r\n         * @param coordinate The coordinate of the circle's center.\r\n         * @param radius The circle's radius, in meters.\r\n         * @param options An object literal of Overlay properties used to initialize\r\n         * the circle.\r\n         */\r\n        constructor(coordinate: Coordinate, radius: number, options?: StylesOverlayOptions);\r\n\r\n        /**\r\n         * The coordinate of the circle overlay's center.\r\n         */\r\n        coordinate: Coordinate;\r\n        /**\r\n         * The circle overlay's radius in meters.\r\n         */\r\n        radius: number;\r\n    }\r\n\r\n    /**\r\n     * An overlay made up of connected line segments that do not form a closed shape.\r\n     */\r\n    export declare class PolylineOverlay extends Overlay {\r\n        /**\r\n         * Creates a polyline overlay with coordinate points and style options.\r\n         *\r\n         * @param points The points in the polyline as an array of Coordinate\r\n         * @param options An object literal of style options with which to initialize\r\n         * the polyline.\r\n         */\r\n        constructor(points: Coordinate[], options?: StylesOverlayOptions);\r\n\r\n        /**\r\n         * An array of coordinate points that define the polyline overlay's shape.\r\n         */\r\n        points: Coordinate[];\r\n    }\r\n\r\n    /**\r\n     * An overlay made up of one or more points, forming a closed shape.\r\n     */\r\n    export declare class PolygonOverlay extends Overlay {\r\n        /**\r\n         * Creates a polygon overlay with an array of points and style options.\r\n         *\r\n         * @param points The points in the polygon as an array of arrays of\r\n         * Coordinate, or an array of Coordinate. If it's the latter,\r\n         * the array is auto-wrapped by an enclosing array.\r\n         * @param options An object literal of options with which to initialize the\r\n         * polygon.\r\n         */\r\n        constructor(points: Coordinate[], options?: StylesOverlayOptions);\r\n\r\n        /**\r\n         * One or more arrays of coordinates that define the polygon overlay shape.\r\n         */\r\n        points: Coordinate[];\r\n    }\r\n\r\n    export declare interface OverlayOptions {\r\n        /**\r\n         * Custom data to associate with this overlay.\r\n         */\r\n        data?: object | undefined;\r\n        /**\r\n         * A Boolean value that determines if an overlay is visible.\r\n         */\r\n        visible?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that determines whether the overlay responds to user\r\n         * interaction.\r\n         */\r\n        enabled?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the overlay is selected.\r\n         */\r\n        selected?: boolean | undefined;\r\n    }\r\n\r\n    /**\r\n     * An observable set of style attributes for an overlay.\r\n     */\r\n    export declare interface StylesOverlayOptions extends OverlayOptions {\r\n        style?: Style | undefined;\r\n    }\r\n\r\n    export declare  type OverlayEventType = \"select\" | \"deselect\";\r\n\r\n    /**\r\n     * The width and height of a map region.\r\n     */\r\n    export declare class CoordinateSpan {\r\n        /**\r\n         * Creates a new coordinate span object with the specified latitude and\r\n         * longitude deltas.\r\n         *\r\n         * @param latitudeDelta The amount of north-to-south distance (measured in\r\n         * degrees) to display on the map.\r\n         * @param longitudeDelta The amount of east-to-west distance (measured in\r\n         * degrees) to display for the map region.\r\n         */\r\n        constructor(latitudeDelta: number, longitudeDelta: number);\r\n\r\n        /**\r\n         * The amount of north-to-south distance (measured in degrees) to display on\r\n         * the map.\r\n         */\r\n        latitudeDelta: number;\r\n        /**\r\n         * The amount of east-to-west distance (measured in degrees) to display for\r\n         * the map region.\r\n         */\r\n        longitudeDelta: number;\r\n\r\n        /**\r\n         * Returns a copy of the coordinate span.\r\n         */\r\n        copy(): CoordinateSpan;\r\n\r\n        /**\r\n         * Returns a Boolean value that indicates whether two spans are equal.\r\n         */\r\n        equals(anotherSpan: CoordinateSpan): boolean;\r\n    }\r\n\r\n    /**\r\n     * An overlay that covers an area of the map with bitmap tiles.\r\n     */\r\n    export declare class TileOverlay {\r\n        /**\r\n         * Creates a tile overlay with a URL template and style options.\r\n         */\r\n        constructor(urlTemplate: string | URLTemplateCallback, options?: TileOverlayConstructorOptions);\r\n\r\n        /**\r\n         * A string, or callback function that returns a string, with a URL that\r\n         * provides the requested tile.\r\n         */\r\n        urlTemplate: string | URLTemplateCallback;\r\n\r\n        /**\r\n         * Reloads the tile overlay for the displayed map region with the latest\r\n         * data values.\r\n         */\r\n        reload(): void;\r\n\r\n        /**\r\n         * Minimum zoom level of the overlay.\r\n         */\r\n        minimumZ: number;\r\n        /**\r\n         * Maximum zoom level of the overlay.\r\n         */\r\n        maximumZ: number;\r\n        /**\r\n         * Opacity level of the overlay.\r\n         */\r\n        opacity: number;\r\n        /**\r\n         * Custom data used to populate the URL template.\r\n         */\r\n        data: object;\r\n    }\r\n\r\n    /**\r\n     * Attributes used when initializing a tile overlay, including minimum and\r\n     * maximum zoom, opacity, and custom data.\r\n     */\r\n    export declare interface TileOverlayConstructorOptions {\r\n        /**\r\n         * Minimum zoom level of the overlay.\r\n         */\r\n        minimumZ?: number | undefined;\r\n        /**\r\n         * Maximum zoom level of the overlay.\r\n         */\r\n        maximumZ?: number | undefined;\r\n        /**\r\n         * Opacity level of the overlay.\r\n         */\r\n        opacity?: number | undefined;\r\n        /**\r\n         * Custom data used to populate the URL template.\r\n         */\r\n        data?: object | undefined;\r\n    }\r\n\r\n    export declare type URLTemplateCallback = (x: number, y: number, z: number, scale: number, data: object) => string;\r\n\r\n    /**\r\n     * A set of observable attributes for overlays, including color and opacity of\r\n     * stroke and fill, and line styles.\r\n     */\r\n    export declare class Style {\r\n        /**\r\n         * Creates and initializes a style object.\r\n         */\r\n        constructor(options?: StyleConstructorOptions);\r\n\r\n        /**\r\n         * The fill color of a shape.\r\n         */\r\n        fillColor: string;\r\n        /**\r\n         * The opacity of the fill color.\r\n         */\r\n        fillOpacity: number;\r\n        /**\r\n         * A rule for determining whether a point is inside or outside a polygon.\r\n         */\r\n        fillRule: string;\r\n        /**\r\n         * The style to use when drawing line endings.\r\n         */\r\n        lineCap: string;\r\n        /**\r\n         * An array of line and gap lengths, used to create a dashed line.\r\n         */\r\n        lineDash: number[];\r\n        /**\r\n         * The number of CSS pixels to offset drawing of a line's dash pattern.\r\n         */\r\n        lineDashOffset: number;\r\n        /**\r\n         * The style to use when drawing joins between line segments.\r\n         */\r\n        lineJoin: string;\r\n        /**\r\n         * The width of a line's stroke, in CSS pixels.\r\n         */\r\n        lineWidth: number;\r\n        /**\r\n         * The stroke color of a line.\r\n         */\r\n        strokeColor: string;\r\n        /**\r\n         * The opacity of the stroke color.\r\n         */\r\n        strokeOpacity: number;\r\n        /**\r\n         * The unit distance along the line where a stroke begins.\r\n         */\r\n        strokeStart: number;\r\n        /**\r\n         * The unit distance along the line where a stroke ends.\r\n         */\r\n        strokeEnd: number;\r\n        /**\r\n         * The gradient to apply along the line.\r\n         */\r\n        lineGradient: LineGradient;\r\n    }\r\n\r\n    /**\r\n     * Initial values of options for applying style to overlays.\r\n     */\r\n    export declare interface StyleConstructorOptions {\r\n        /**\r\n         * The fill color of a shape.\r\n         */\r\n        fillColor?: string | undefined;\r\n        /**\r\n         * The opacity of the fill color.\r\n         */\r\n        fillOpacity?: number | undefined;\r\n        /**\r\n         * A rule for determining whether a point is inside or outside a polygon.\r\n         */\r\n        fillRule?: string | undefined;\r\n        /**\r\n         * The style to use when drawing line endings.\r\n         */\r\n        lineCap?: string | undefined;\r\n        /**\r\n         * An array of line and gap lengths, used to create a dashed line.\r\n         */\r\n        lineDash?: number[] | undefined;\r\n        /**\r\n         * The number of CSS pixels to offset drawing of a line's dash pattern.\r\n         */\r\n        lineDashOffset?: number | undefined;\r\n        /**\r\n         * The style to use when drawing joins between line segments.\r\n         */\r\n        lineJoin?: string | undefined;\r\n        /**\r\n         * The width of a line's stroke, in CSS pixels.\r\n         */\r\n        lineWidth?: number | undefined;\r\n        /**\r\n         * The stroke color of a line.\r\n         */\r\n        strokeColor?: string | undefined;\r\n        /**\r\n         * The opacity of the stroke color.\r\n         */\r\n        strokeOpacity?: number | undefined;\r\n        /**\r\n         * The unit distance along the line where a stroke begins.\r\n         */\r\n        strokeStart?: number | undefined;\r\n        /**\r\n         * The unit distance along the line where a stroke ends.\r\n         */\r\n        strokeEnd?: number | undefined;\r\n        /**\r\n         * The gradient to apply along the line.\r\n         */\r\n        lineGradient?: LineGradient | undefined;\r\n    }\r\n\r\n    /**\r\n     * A line that displays with a gradient along the length of the line.\r\n     */\r\n    export declare class LineGradient {\r\n        /**\r\n         * Creates a style that renders a gradient along the length of a line.\r\n         *\r\n         * @param options A JavaScript object with unit distance values as keys with matched CSS colors.\r\n         */\r\n        constructor(options?: object);\r\n\r\n        /**\r\n         * Adds a color transition point to the gradient.\r\n         *\r\n         * @param offset The unit distance at which to add the color.\r\n         * @param color The CSS color at the transition point.\r\n         */\r\n        addColorStop(offset: number, color: string): void;\r\n\r\n        /**\r\n         * Adds a color transition at the index point in the list of points within a polyline.\r\n         *\r\n         * @param index A valid index into a polyline’s points.\r\n         * @param color The CSS color at the index point.\r\n         */\r\n        addColorStopAtIndex(index: number, color: string): void;\r\n    }\r\n\r\n    /**\r\n     * A geocoder that converts human-readable addresses to geographic coordinates\r\n     * and vice versa.\r\n     */\r\n    export declare class Geocoder {\r\n        /**\r\n         * Initialize a geocoder object and set optional language and user location\r\n         * properties.\r\n         */\r\n        constructor(options?: GeocoderConstructorOptions);\r\n\r\n        /**\r\n         * Converts an address to geographic coordinates.\r\n         */\r\n        lookup(\r\n            place: string,\r\n            callback: (error: Error | null, data: GeocoderResponse) => void,\r\n            options?: GeocoderLookupOptions\r\n        ): number;\r\n\r\n        /**\r\n         * Converts a geographic coordinate to an address.\r\n         *\r\n         * @param coordinate\r\n         * @param callback This callback function is invoked with two arguments,\r\n         * error on failure and data on success.\r\n         * @param options\r\n         * reverse geocoder.\r\n         */\r\n        reverseLookup(\r\n            coordinate: Coordinate,\r\n            callback: (error: Error | null, data: GeocoderResponse) => void,\r\n            options?: Pick<GeocoderConstructorOptions, \"language\">\r\n        ): number;\r\n\r\n        /**\r\n         * Cancels the pending lookup or reverse lookup specified by its request ID.\r\n         *\r\n         * @param id The request ID of the lookup or reverseLookup to cancel.\r\n         */\r\n        cancel(id: number): boolean;\r\n\r\n        /**\r\n         * A Boolean value that indicates whether the geocoder should return results\r\n         * near the user's current location.\r\n         */\r\n        language: string;\r\n        /**\r\n         * A Boolean value that indicates whether the geocoder should return results\r\n         * near the user's current location.\r\n         */\r\n        getsUserLocation: string;\r\n    }\r\n\r\n    /**\r\n     * Initialization options for geocoder objects.\r\n     */\r\n    export declare interface GeocoderConstructorOptions {\r\n        /**\r\n         * A Boolean value that indicates whether the geocoder should return results\r\n         * near the user's current location.\r\n         */\r\n        language?: string | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the geocoder should return results\r\n         * near the user's current location.\r\n         */\r\n        getsUserLocation?: boolean | undefined;\r\n    }\r\n\r\n    /**\r\n     * Options that constrain geocoder lookup results to a specific area or set a\r\n     * language for results.\r\n     */\r\n    export declare interface GeocoderLookupOptions {\r\n        /**\r\n         * The language in which to display the lookup results.\r\n         */\r\n        language?: string | undefined;\r\n        /**\r\n         * Coordinates used to constrain the lookup results.\r\n         */\r\n        coordinate?: Coordinate | undefined;\r\n        /**\r\n         * A region in which to constrain lookup results.\r\n         */\r\n        region?: CoordinateRegion | undefined;\r\n        /**\r\n         * A list of countries in which to constrain the lookup results.\r\n         */\r\n        limitToCountries?: string | undefined;\r\n    }\r\n\r\n    /**\r\n     * The response from a geocoder lookup or reverse lookup.\r\n     */\r\n    export declare interface GeocoderResponse {\r\n        results: Place[];\r\n    }\r\n\r\n    /**\r\n     * A place object returned from a geocoder lookup or reverse lookup.\r\n     */\r\n    export declare interface Place {\r\n        /**\r\n         * The name of the place.\r\n         */\r\n        name: string;\r\n        /**\r\n         * The latitude and longitude for the place.\r\n         */\r\n        coordinate: Coordinate;\r\n        /**\r\n         * The address of the place, formatted using its country's conventions.\r\n         */\r\n        formattedAddress: string;\r\n        /**\r\n         * The geographic region associated with the place.\r\n         */\r\n        region: CoordinateRegion;\r\n        /**\r\n         * The country code associated with the place.\r\n         */\r\n        countryCode: string;\r\n        /**\r\n         * The category of the place.\r\n         */\r\n        pointOfInterestCategory?: PointOfInterestCategory | undefined;\r\n        /**\r\n         * The country of the place.\r\n         */\r\n        country?: string | undefined;\r\n        /**\r\n         * The state or province of the place.\r\n         */\r\n        administrativeArea?: string | undefined;\r\n        /**\r\n         * The short code for the state or area.\r\n         */\r\n        administrativeAreaCode?: string | undefined;\r\n        /**\r\n         * The city of the place.\r\n         */\r\n        locality?: string | undefined;\r\n        /**\r\n         * The postal code of the place.\r\n         */\r\n        postCode?: string | undefined;\r\n        /**\r\n         * The name of the area within the locality.\r\n         */\r\n        subLocality?: string | undefined;\r\n        /**\r\n         * The street name at the place.\r\n         */\r\n        thoroughfare?: string | undefined;\r\n        /**\r\n         * The number on the street at the place.\r\n         */\r\n        subThoroughfare?: string | undefined;\r\n        /**\r\n         * A combination of thoroughfare and subthoroughfare.\r\n         */\r\n        fullThoroughfare?: string | undefined;\r\n        /**\r\n         * Common names of the area in which the place resides.\r\n         */\r\n        areasOfInterest?: string[] | undefined;\r\n        /**\r\n         * Common names for the local area or neighborhood of the place.\r\n         */\r\n        dependentLocalities?: string[] | undefined;\r\n    }\r\n\r\n    /**\r\n     * An object that retrieves map-based search results for a user-entered query.\r\n     */\r\n    export declare class Search {\r\n        /**\r\n         * Creates a search object with optional initial values that you provide.\r\n         *\r\n         * @param options Options that you may provide when creating a search object.\r\n         */\r\n        constructor(options?: SearchConstructorOptions);\r\n\r\n        /**\r\n         * Retrieves the results of a search query.\r\n         *\r\n         * @param query A String or a SearchAutocompleteResult.\r\n         * @param callback A callback function or delegate object.\r\n         * @param options With the option hash, you can constrain the search to a\r\n         * desired area using the coordinate or region properties. If set, this\r\n         * option overrides the language provided to the search constructor.\r\n         * @returns a request ID (integer) that can be passed to cancel to abort a\r\n         * pending request.\r\n         */\r\n        search<Q extends string | SearchAutocompleteResult>(\r\n            query: Q,\r\n            callback: SearchDelegate | SearchCallback<Q>,\r\n            options?: SearchOptions\r\n        ): number;\r\n\r\n        /**\r\n         * Retrieves a list of autocomplete results for the specified search query.\r\n         *\r\n         * @param query A string that represents the user's search term in progress.\r\n         * @param callback A callback function or delegate object.\r\n         * @param options With the option hash, you can constrain\r\n         * the search to a desired area using the coordinate or region properties.\r\n         * A coordinate or region supplied here overrides the same property supplied\r\n         * to the `mapkit.Search` constructor. You can also override\r\n         * the language provided to the search constructor.\r\n         * For example, `{ language: ‘fr-CA‘ }` tells the server to send results\r\n         * localized to Canadian French.\r\n         */\r\n        autocomplete(\r\n            query: string,\r\n            callback: SearchDelegate | AutocompleteSearchCallback,\r\n            options?: SearchAutocompleteOptions\r\n        ): void;\r\n\r\n        /**\r\n         * Cancels a search request using its request ID.\r\n         *\r\n         * @param id The integer ID returned by a call to Search.search\r\n         * @return true if the server canceled the pending search request.\r\n         */\r\n        cancel(id: number): boolean;\r\n    }\r\n\r\n    /**\r\n     * Options that you may provide when creating a search object.\r\n     */\r\n    export declare interface SearchConstructorOptions {\r\n        /**\r\n         * A language ID that determines the language for the search result text.\r\n         */\r\n        language?: string | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether to limit the search results to the\r\n         * user's current location, as determined by the web browser.\r\n         */\r\n        getsUserLocation?: boolean | undefined;\r\n        /**\r\n         * A map coordinate that provides a hint for the geographic area to search.\r\n         */\r\n        coordinate?: Coordinate | undefined;\r\n        /**\r\n         * A map region that provides a hint for the geographic area to search.\r\n         */\r\n        region?: CoordinateRegion | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search autocomplete results should include queries.\r\n         */\r\n        includeQueries?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include addresses.\r\n         */\r\n        includeAddresses?: boolean | undefined;\r\n        /**\r\n         * A string that constrains search results to within the provided countries.\r\n         */\r\n        limitToCountries?: string | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include points of interest.\r\n         */\r\n        includePointsOfInterest?: boolean | undefined;\r\n        /**\r\n         * A filter used to include or exclude point of interest categories.\r\n         */\r\n        pointOfInterestFilter?: PointOfInterestFilter | undefined;\r\n    }\r\n\r\n    /**\r\n     * Options you provide to constrain an autocomplete request.\r\n     */\r\n    export declare interface SearchAutocompleteOptions {\r\n        /**\r\n         * A language ID that determines the language for the search result text.\r\n         */\r\n        language?: string | undefined;\r\n        /**\r\n         * A map coordinate that provides a hint for the geographic area to search.\r\n         */\r\n        coordinate?: Coordinate | undefined;\r\n        /**\r\n         * A map region that provides a hint for the geographic area to search.\r\n         */\r\n        region?: CoordinateRegion | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include addresses.\r\n         */\r\n        includeAddresses?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include points of interest.\r\n         */\r\n        includePointsOfInterest?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include queries.\r\n         */\r\n        includeQueries?: boolean | undefined;\r\n        /**\r\n         * A filter used to include or exclude point of interest categories in search results.\r\n         */\r\n        pointOfInterestFilter?: PointOfInterestFilter | undefined;\r\n        /**\r\n         * A string that constrains search results to within the provided countries.\r\n         */\r\n        limitToCountries?: string | undefined;\r\n    }\r\n\r\n    export declare  type SearchCallback<Q> = (\r\n        error: Error | null,\r\n        data: {\r\n            /**\r\n             * The query corresponding to the results  The query corresponding to the\r\n             * results, if a SearchAutocompleteResult was not used to perform the search.\r\n             */\r\n            query: Q extends SearchAutocompleteResult ? undefined : string;\r\n            /**\r\n             * A region that encloses the search results. This property is not present\r\n             * if there are no results.\r\n             */\r\n            displayRegion?: CoordinateRegion | undefined;\r\n            /**\r\n             * An array of Place objects. The place array is empty if there is no match.\r\n             */\r\n            places: Place[];\r\n        }\r\n    ) => void;\r\n\r\n    export declare  type AutocompleteSearchCallback = (error: Error | null, data: SearchAutocompleteResponse) => void;\r\n\r\n    /**\r\n     * An object or callback function called when performing a search or autocomplete\r\n     * request.\r\n     */\r\n    export declare interface SearchDelegate {\r\n        /**\r\n         * Upon successful completion of a search request, this method returns a data\r\n         * object that is the same as the one passed to the search callback function.\r\n         */\r\n        searchDidComplete?(data: SearchResponse): void;\r\n\r\n        /**\r\n         * Called when the search request fails.\r\n         */\r\n        searchDidError?(error: Error): void;\r\n\r\n        /**\r\n         * When an autocomplete request successfully completes, this method returns\r\n         * a data array that is the same as the one passed to the autocomplete\r\n         * callback function.\r\n         */\r\n        autocompleteDidComplete?(data: SearchAutocompleteResponse): void;\r\n\r\n        /**\r\n         * Invoked when an autocomplete request fails.\r\n         */\r\n        autocompleteDidError?(error: Error): void;\r\n    }\r\n\r\n    /**\r\n     * Options you can provide when performing a search.\r\n     */\r\n    export declare interface SearchOptions {\r\n        /**\r\n         * A language ID that determines the language for the search result text.\r\n         */\r\n        language: string;\r\n        /**\r\n         * A map coordinate that provides a hint for the geographic area to search.\r\n         */\r\n        coordinate: Coordinate;\r\n        /**\r\n         * A map region that provides a hint for the geographic area to search.\r\n         */\r\n        region: CoordinateRegion;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include addresses.\r\n         */\r\n        includeAddresses?: boolean | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the search results should include points of interest.\r\n         */\r\n        includePointsOfInterest?: boolean | undefined;\r\n        /**\r\n         * A filter used to include or exclude point of interest categories in search results.\r\n         */\r\n        pointOfInterestFilter?: PointOfInterestFilter | undefined;\r\n    }\r\n\r\n    /**\r\n     * The result of a search, including the original search query, the bounding\r\n     * region, and a list of places that match the query.\r\n     */\r\n    export declare interface SearchResponse {\r\n        /**\r\n         * The query string used to perform the search.\r\n         */\r\n        query: string;\r\n        /**\r\n         * The region that encloses the places included in the search results.\r\n         */\r\n        boundingRegion: CoordinateRegion;\r\n        /**\r\n         * A list of places that match the search query.\r\n         */\r\n        places: Place[];\r\n    }\r\n\r\n    /**\r\n     * An object containing the response from an autocomplete request.\r\n     */\r\n    export declare interface SearchAutocompleteResponse {\r\n        /**\r\n         * The query string used to perform the autocomplete request.\r\n         */\r\n        query: string;\r\n        /**\r\n         * The results from an autocomplete request.\r\n         */\r\n        results: SearchAutocompleteResult[];\r\n    }\r\n\r\n    /**\r\n     * The result of an autocomplete query, including display lines and a coordinate.\r\n     */\r\n    export declare interface SearchAutocompleteResult {\r\n        /**\r\n         * Lines of text to display to the user in an autocomplete menu.\r\n         */\r\n        displayLines: string[];\r\n        /**\r\n         * The coordinate of the result, provided when it corresponds to a single place.\r\n         */\r\n        coordinate: Coordinate;\r\n    }\r\n\r\n    /**\r\n     * A filter used to determine the points of interest to include or exclude on a map or local search.\r\n     */\r\n    export declare class PointOfInterestFilter {\r\n        /**\r\n         * Creates a point of interest filter that includes categories from a list that you provide.\r\n         */\r\n        static including(categoryList: PointOfInterestCategory[]): PointOfInterestFilter;\r\n\r\n        /**\r\n         * Creates a point of interest filter that excludes categories from a list that you provide.\r\n         */\r\n        static excluding(categoryList: PointOfInterestCategory[]): PointOfInterestFilter;\r\n\r\n        /**\r\n         * A filter that includes all point of interest categories.\r\n         */\r\n        static readonly filterIncludingAllCategories: PointOfInterestFilter;\r\n        /**\r\n         * A filter that excludes all point of interest categories.\r\n         */\r\n        static readonly filterExcludingAllCategories: PointOfInterestFilter;\r\n\r\n        /**\r\n         * Returns a Boolean value that indicates whether the filter includes the provided point of interest category.\r\n         */\r\n        includesCategory(category: PointOfInterestCategory): boolean;\r\n\r\n        /**\r\n         * Returns a Boolean value that indicates whether the filter excludes the provided point of interest category.\r\n         */\r\n        excludesCategory(category: PointOfInterestCategory): boolean;\r\n    }\r\n\r\n    /**\r\n     * An object that fetches points of interest within a specified region.\r\n     */\r\n    export declare class PointsOfInterestSearch {\r\n        /**\r\n         * Creates a search object for fetching points of interest.\r\n         *\r\n         * @param options Options that you may provide when you create a points of interest search.\r\n         */\r\n        constructor(options?: PointsOfInterestSearchOptions);\r\n\r\n        /**\r\n         * The region that bounds the area in which to fetch points of interest.\r\n         */\r\n        region: CoordinateRegion;\r\n        /**\r\n         * The center point of the request represented as latitude and longitude.\r\n         */\r\n        center: Coordinate;\r\n        /**\r\n         * The distance provided in meters, or the longest distance derived from the center point to the region’s bounding box.\r\n         */\r\n        radius: number;\r\n        /**\r\n         * A filter that lists points of interest categories to include or exclude.\r\n         */\r\n        pointOfInterestFilter: PointOfInterestFilter;\r\n        /**\r\n         * The language ID to use when fetching points of interest.\r\n         */\r\n        language: string;\r\n        /**\r\n         * The maximum distance to use from the center of the region for fetching points of interest.\r\n         */\r\n        readonly MaxRadius: number;\r\n\r\n        /**\r\n         * Fetches points of interest.\r\n         *\r\n         * @param query A String or a SearchAutocompleteResult.\r\n         * @param callback A callback function or delegate object.\r\n         * @param options A PointsOfInterestSearchOptions object.\r\n         * @returns a request ID (integer) that can be passed to cancel to abort a\r\n         * pending request.\r\n         */\r\n        search(\r\n            callback: PointsOfInterestSearchDelegate | PointsOfInterestSearchCallback,\r\n            options?: PointsOfInterestSearchOptions\r\n        ): number;\r\n\r\n        /**\r\n         * Cancels a search request using its request ID.\r\n         *\r\n         * @param id The integer ID returned by a call to Search.search\r\n         * @return true if the server canceled the pending search request.\r\n         */\r\n        cancel(id: number): boolean;\r\n    }\r\n\r\n    /**\r\n     * Options that you may provide when creating a search object.\r\n     */\r\n    export declare interface PointsOfInterestSearchOptions {\r\n        /**\r\n         * A language ID that determines the language for the search result text.\r\n         */\r\n        language?: string | undefined;\r\n        /**\r\n         * The center point of the request represented as latitude and longitude.\r\n         */\r\n        center?: Coordinate | undefined;\r\n        /**\r\n         * The distance provided in meters, or the longest distance derived from the center point to the region’s bounding box.\r\n         */\r\n        radius?: number | undefined;\r\n        /**\r\n         * The region that bounds the area in which to fetch points of interest.\r\n         */\r\n        region?: CoordinateRegion | undefined;\r\n        /**\r\n         * A filter used to include or exclude point of interest categories.\r\n         */\r\n        pointOfInterestFilter?: PointOfInterestFilter | undefined;\r\n    }\r\n\r\n    export declare type PointsOfInterestSearchCallback = (error: Error | null, data: PointsOfInterestSearchResponse) => void;\r\n\r\n    /**\r\n     * An object or callback function that MapKit JS calls when fetching points of interest.\r\n     */\r\n    export declare interface PointsOfInterestSearchDelegate {\r\n        /**\r\n         * Tells the delegate that the search completed.\r\n         */\r\n        searchDidComplete?(data: PointsOfInterestSearchResponse): void;\r\n\r\n        /**\r\n         * Tells the delegate that the search failed due to an error.\r\n         */\r\n        searchDidError?(error: Error): void;\r\n    }\r\n\r\n    /**\r\n     * The result of a request used to fetch points of interest.\r\n     */\r\n    export declare interface PointsOfInterestSearchResponse {\r\n        /**\r\n         * The list of points of interest that match the request options.\r\n         */\r\n        places: Place[];\r\n    }\r\n\r\n    /**\r\n     * Point of interest categories.\r\n     */\r\n\r\n    export declare enum PointOfInterestCategory {\r\n        /**\r\n         * The point of interest category for airports.\r\n         */\r\n        Airport,\r\n        /**\r\n         * The point of interest category for amusement parks.\r\n         */\r\n        AmusementPark,\r\n        /**\r\n         * The point of interest category for aquariums.\r\n         */\r\n        Aquarium,\r\n        /**\r\n         * The point of interest category for ATM machines.\r\n         */\r\n        ATM,\r\n        /**\r\n         * The point of interest category for bakeries.\r\n         */\r\n        Bakery,\r\n        /**\r\n         * The point of interest category for banks.\r\n         */\r\n        Bank,\r\n        /**\r\n         * The point of interest category for beaches.\r\n         */\r\n        Beach,\r\n        /**\r\n         * The point of interest category for breweries.\r\n         */\r\n        Brewery,\r\n        /**\r\n         * The point of interest category for cafes.\r\n         */\r\n        Cafe,\r\n        /**\r\n         * The point of interest category for campgrounds.\r\n         */\r\n        Campground,\r\n        /**\r\n         * The point of interest category for car rentals.\r\n         */\r\n        CarRental,\r\n        /**\r\n         * The point of interest category for EV chargers.\r\n         */\r\n        EVCharger,\r\n        /**\r\n         * The point of interest category for fire stations.\r\n         */\r\n        FireStation,\r\n        /**\r\n         * The point of interest category for fitness centers.\r\n         */\r\n        FitnessCenter,\r\n        /**\r\n         * The point of interest category for food markets.\r\n         */\r\n        FoodMarket,\r\n        /**\r\n         * The point of interest category for gas stations.\r\n         */\r\n        GasStation,\r\n        /**\r\n         * The point of interest category for hospitals.\r\n         */\r\n        Hospital,\r\n        /**\r\n         * The point of interest category for hotels.\r\n         */\r\n        Hotel,\r\n        /**\r\n         * The point of interest category for laundries.\r\n         */\r\n        Laundry,\r\n        /**\r\n         * The point of interest category for libraries.\r\n         */\r\n        Library,\r\n        /**\r\n         * The point of interest category for marinas.\r\n         */\r\n        Marina,\r\n        /**\r\n         * The point of interest category for movie theaters.\r\n         */\r\n        MovieTheater,\r\n        /**\r\n         * The point of interest category for museums.\r\n         */\r\n        Museum,\r\n        /**\r\n         * The point of interest category for national parks.\r\n         */\r\n        NationalPark,\r\n        /**\r\n         * The point of interest category for nightlife.\r\n         */\r\n        Nightlife,\r\n        /**\r\n         * The point of interest category for parks\r\n         */\r\n        Park,\r\n        /**\r\n         * The point of interest category for parking locations.\r\n         */\r\n        Parking,\r\n        /**\r\n         * The point of interest category for pharmacies.\r\n         */\r\n        Pharmacy,\r\n        /**\r\n         * The point of interest category for police.\r\n         */\r\n        Police,\r\n        /**\r\n         * The point of interest category for post offices.\r\n         */\r\n        PostOffice,\r\n        /**\r\n         * The point of interest category for locations of public transportation.\r\n         */\r\n        PublicTransport,\r\n        /**\r\n         * The point of interest category for restaurants.\r\n         */\r\n        Restaurant,\r\n        /**\r\n         * The point of interest category for restrooms.\r\n         */\r\n        Restroom,\r\n        /**\r\n         * The point of interest category for schools.\r\n         */\r\n        School,\r\n        /**\r\n         * The point of interest category for stadiums.\r\n         */\r\n        Stadium,\r\n        /**\r\n         * The point of interest category for stores.\r\n         */\r\n        Store,\r\n        /**\r\n         * The point of interest category for theaters.\r\n         */\r\n        Theater,\r\n        /**\r\n         * The point of interest category for universities.\r\n         */\r\n        University,\r\n        /**\r\n         * The point of interest category for wineries.\r\n         */\r\n        Winery,\r\n        /**\r\n         * The point of interest category for zoos.\r\n         */\r\n        Zoo,\r\n    }\r\n\r\n    /**\r\n     * Creates a directions object with options that you may provide.\r\n     */\r\n    export declare class Directions {\r\n        /**\r\n         * Creates a directions object with options that you may provide.\r\n         *\r\n         * This parameter is optional.\r\n         * @param options\r\n         */\r\n        constructor(options?: DirectionsConstructorOptions);\r\n\r\n        /**\r\n         * Retrieves estimated arrival times to up to 10 destinations from a single starting point.\r\n         *\r\n         * @param request An EtaRequestOptions object that specifies details for the server to provide estimated arrival times at one or more destinations.\r\n         * @param callback A callback function that receives the estimated time response object, returned asynchronously.\r\n         * @return A request ID, which you can pass to cancel to abort a pending request.\r\n         */\r\n        eta(request: EtaRequestOptions, callback: (error: Error | null, data: EtaResponse) => void): number;\r\n\r\n        /**\r\n         * Retrieves directions and estimated travel time for the specified start\r\n         * and end points.\r\n         *\r\n         * @param request DirectionsRequest object that specifies details for the\r\n         * directions you want to retrieve.\r\n         * @param callback A callback function that receives the directions,\r\n         * returned asynchronously.\r\n         * @return A request ID, which you can pass to cancel to abort a pending request.\r\n         */\r\n        route(request: DirectionsRequest, callback: (error: Error | null, data: DirectionsResponse) => void): number;\r\n\r\n        /**\r\n         * Cancels a previous request for route directions.\r\n         *\r\n         * @param id The ID returned by a call to route.\r\n         */\r\n        cancel(id: number): boolean;\r\n    }\r\n\r\n    export declare namespace Directions {\r\n        /**\r\n         * The modes of transportation.\r\n         */\r\n        enum Transport {\r\n            /**\r\n             * A constant identifying the mode of transportation as driving.\r\n             */\r\n            Automobile,\r\n            /**\r\n             * A constant identifying the mode of transportation as walking.\r\n             */\r\n            Walking,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Options that you may provide when creating a directions object.\r\n     */\r\n    export declare interface DirectionsConstructorOptions {\r\n        /**\r\n         * A language ID that determines the language for route information.\r\n         */\r\n        language?: string | undefined;\r\n    }\r\n\r\n    /**\r\n     * The options you may provide for requesting estimated arrival times.\r\n     */\r\n    export declare interface EtaRequestOptions {\r\n        /**\r\n         * The starting point for estimated arrival time requests.\r\n         */\r\n        origin: Coordinate;\r\n        /**\r\n         * The time of departure used in an estimated arrival time request.\r\n         */\r\n        destinations: Coordinate[];\r\n        /**\r\n         * An array of coordinates that represent end points for estimated arrival time requests.\r\n         */\r\n        transportType: Directions.Transport;\r\n        /**\r\n         * The mode of transportation the server uses when estimating arrival times.\r\n         */\r\n        departureDate: Date;\r\n    }\r\n\r\n    /**\r\n     * The estimated arrival times for a set of destinations.\r\n     */\r\n    export declare interface EtaResponse {\r\n        /**\r\n         * The request object associated with the estimated time of arrival response.\r\n         */\r\n        request: EtaRequestOptions;\r\n        /**\r\n         * An array of estimated arrival times.\r\n         */\r\n        etas: EtaResult[];\r\n    }\r\n\r\n    /**\r\n     * The mode of transportation, distance, and travel time estimates for a single destination.\r\n     */\r\n    export declare interface EtaResult {\r\n        /**\r\n         * The mode of transportation used to estimate the arrival time.\r\n         */\r\n        transportType: Directions.Transport;\r\n        /**\r\n         * The route distance in meters.\r\n         */\r\n        distance: number;\r\n        /**\r\n         * The estimated travel time in seconds, including estimated delays due to traffic.\r\n         */\r\n        expectedTravelTime: number;\r\n        /**\r\n         * The estimated travel time in seconds, excluding estimated delays for traffic.\r\n         */\r\n        staticTravelTime: number;\r\n    }\r\n\r\n    /**\r\n     * The requested start and end points for a route, as well as the planned mode of transportation.\r\n     */\r\n    export declare interface DirectionsRequest {\r\n        /**\r\n         * The start point for routing directions.\r\n         */\r\n        origin: string | Coordinate | Place;\r\n        /**\r\n         * The end point for routing directions.\r\n         */\r\n        destination: string | Coordinate | Place;\r\n        /**\r\n         * The arrival date for the trip.\r\n         */\r\n        arrivalDate?: Date | undefined;\r\n        /**\r\n         * The departure date for the trip.\r\n         */\r\n        departureDate?: Date | undefined;\r\n        /**\r\n         * The mode of transportation to which directions should apply.\r\n         */\r\n        transportType?: Directions.Transport | undefined;\r\n        /**\r\n         * A Boolean value that indicates whether the server should return multiple\r\n         * routes when they are available.\r\n         */\r\n        requestsAlternateRoutes?: boolean | undefined;\r\n    }\r\n\r\n    /**\r\n     * The directions and estimated travel time returned for a route.\r\n     */\r\n    export declare interface DirectionsResponse {\r\n        request: any;\r\n        routes: Route[];\r\n    }\r\n\r\n    /**\r\n     * Information about a route, including step-by-step instructions, distance,\r\n     * and estimated travel time.\r\n     */\r\n    export declare interface Route {\r\n        /**\r\n         * An instance of a polyline overlay that represents the path of a route.\r\n         */\r\n        polyline: PolylineOverlay;\r\n        /**\r\n         * An array of coordinate objects representing the path of the route.\r\n         * @deprecated\r\n         */\r\n        path: Coordinate[];\r\n        /**\r\n         * An array of steps that comprise the overall route.\r\n         */\r\n        steps: RouteStep[];\r\n        /**\r\n         * The name assigned to the route.\r\n         */\r\n        name: string;\r\n        /**\r\n         * The route distance in meters.\r\n         */\r\n        distance: number;\r\n        /**\r\n         * The expected travel time in seconds.\r\n         */\r\n        expectedTravelTime: number;\r\n        /**\r\n         * The overall route transport type.\r\n         */\r\n        transportType: Directions.Transport;\r\n    }\r\n\r\n    /**\r\n     * A single route between a requested start and end point.\r\n     */\r\n    export declare interface RouteStep {\r\n        /**\r\n         * An array of coordinate objects representing the path of the route segment.\r\n         */\r\n        path: Coordinate[];\r\n        /**\r\n         * The written instructions for following the path represented by the step.\r\n         */\r\n        instructions: string;\r\n        /**\r\n         * The step distance in meters.\r\n         */\r\n        distance: number;\r\n        /**\r\n         * The transport type of the step.\r\n         */\r\n        transportType: Directions.Transport;\r\n    }\r\n\r\n    /**\r\n     * A location on a map when the Earth's surface is projected onto a\r\n     * two-dimensional surface.\r\n     */\r\n    export declare class MapPoint {\r\n        /**\r\n         * Initializes a MapPoint object.\r\n         *\r\n         * @param x The point along the east-west axis of the map projection.\r\n         * @param  The point along the north-south axis of the map projection.\r\n         */\r\n        constructor(x: number, y: number);\r\n\r\n        /**\r\n         * The location of the point along the x-axis of the map.\r\n         */\r\n        x: number;\r\n        /**\r\n         * The location of the point along the y-axis of the map.\r\n         */\r\n        y: number;\r\n\r\n        /**\r\n         * Returns a copy of a map point.\r\n         */\r\n        copy(): MapPoint;\r\n\r\n        /**\r\n         * Indicates whether two map points are equal.\r\n         *\r\n         * @param anotherPoint A map point to use for comparison.\r\n         */\r\n        equals(anotherPoint: MapPoint): boolean;\r\n\r\n        /**\r\n         * Returns a coordinate containing the latitude and longitude corresponding\r\n         * to a map point.\r\n         */\r\n        toCoordinate(): Coordinate;\r\n    }\r\n\r\n    /**\r\n     * A pair of values in map units that define the width and height of a\r\n     * projected coordinate span.\r\n     */\r\n    export declare class MapSize {\r\n        /**\r\n         * Initializes a MapSize object.\r\n         *\r\n         * @param width The distance (measured using map points) along the east-west\r\n         * axis of the map projection.\r\n         * @param height The distance (measured using map points) along the\r\n         * north-south axis of the map projection.\r\n         */\r\n        constructor(width: number, height: number);\r\n\r\n        /**\r\n         * The height value, in map point units.\r\n         */\r\n        height: number;\r\n        /**\r\n         * The width value, in map point units.\r\n         */\r\n        width: number;\r\n\r\n        /**\r\n         * Returns a copy of a map size.\r\n         */\r\n        copy(): MapSize;\r\n\r\n        /**\r\n         * Indicates whether two map sizes are equal.\r\n         *\r\n         * @param anotherSize The map size to equate to.\r\n         */\r\n        equals(anotherSize: MapSize): boolean;\r\n    }\r\n\r\n    /**\r\n     * A rectangular area on a map, defined by coordinates of the rectangle's\r\n     * northeast and southwest corners.\r\n     */\r\n    export declare class BoundingRegion {\r\n        /**\r\n         * Creates a rectangular bounding region defined by the latitude and\r\n         * longitude coordinates of the rectangle's northeast and southwest corners.\r\n         *\r\n         * @param northLatitude The north latitude of the bounding region.\r\n         * @param eastLongitude The east longitude of the bounding region.\r\n         * @param southLatitude The south latitude of the bounding region.\r\n         * @param westLongitude The west longitude of the bounding region.\r\n         */\r\n        constructor(northLatitude: number, eastLongitude: number, southLatitude: number, westLongitude: number);\r\n\r\n        /**\r\n         * The east longitude of the bounding region.\r\n         */\r\n        eastLongitude: number;\r\n        /**\r\n         * The north latitude of the bounding region.\r\n         */\r\n        northLatitude: number;\r\n        /**\r\n         * The south latitude of the bounding region.\r\n         */\r\n        southLatitude: number;\r\n        /**\r\n         * The west longitude of the bounding region.\r\n         */\r\n        westLongitude: number;\r\n\r\n        /**\r\n         * Returns a copy of the calling bounding region.\r\n         */\r\n        copy(): BoundingRegion;\r\n\r\n        /**\r\n         * Returns the coordinate region that corresponds to the calling bounding region.\r\n         */\r\n        toCoordinateRegion(): CoordinateRegion;\r\n    }\r\n\r\n    /**\r\n     * A minimum and maximum camera distance as meters from the center of the map.\r\n     */\r\n    export declare class CameraZoomRange {\r\n        /**\r\n         * Describes the minimum and maximum camera distance in meters.\r\n         */\r\n        constructor(minCameraDistance: CameraZoomRangeConstructorOptions | number, maxCameraDistance?: number);\r\n\r\n        /**\r\n         * The minimum allowed distance of the camera from the center of the map in meters.\r\n         */\r\n        minCameraDistance: number;\r\n        /**\r\n         * The maximum allowed distance of the camera from the center of the map in meters.\r\n         */\r\n        maxCameraDistance: number;\r\n    }\r\n\r\n    /**\r\n     * Initialization options for the camera zoom range.\r\n     */\r\n    export declare interface CameraZoomRangeConstructorOptions {\r\n        /**\r\n         * The minimum allowed distance of the camera from the center of the map in meters.\r\n         */\r\n        minCameraDistance?: number | undefined;\r\n        /**\r\n         * The maximum allowed distance of the camera from the center of the map in meters.\r\n         */\r\n        maxCameraDistance?: number | undefined;\r\n    }\r\n\r\n    /**\r\n     * @param data The original GeoJSON data, which may be a URL to a GeoJSON file,\r\n     * or a GeoJSON object.\r\n     * @param callback A callback function that is required if you provide a URL\r\n     * for the data parameter, and optional otherwise.\r\n     */\r\n    export declare function importGeoJSON(\r\n        data: string | object,\r\n        callback?: GeoJSONDelegate | ImportGeoJSONCallback\r\n    ): ItemCollection | Error;\r\n\r\n    export declare type ImportGeoJSONCallback = (error: Error, result: ItemCollection) => void;\r\n\r\n    /**\r\n     * A delegate object that controls a GeoJSON import in order to override\r\n     * default behavior and provide custom style.\r\n     */\r\n    export declare interface GeoJSONDelegate {\r\n        /**\r\n         * Overrides a feature.\r\n         *\r\n         * @param item An item created for the geometry of this feature or null for\r\n         * features with null geometry.\r\n         * @param geoJSON The original GeoJSON object for this feature.\r\n         */\r\n        itemForFeature?(\r\n            item: Annotation | Overlay | ItemCollection | null,\r\n            geoJSON: object\r\n        ): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a feature collection.\r\n         *\r\n         * @param itemCollection A collection containing associated annotations and\r\n         * overlays.\r\n         * @param geoJSON The original GeoJSON object for this FeatureCollection.\r\n         * This will contain an array of feature types.\r\n         */\r\n        itemForFeatureCollection?(\r\n            itemCollection: ItemCollection,\r\n            geoJSON: object\r\n        ): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a line string.\r\n         *\r\n         * @param overlay A PolylineOverlay object.\r\n         * @param geoJSON original GeoJSON object for this LineString object.\r\n         */\r\n        itemForLineString?(\r\n            overlay: PolylineOverlay,\r\n            geoJSON: object\r\n        ): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a multiline string.\r\n         *\r\n         * @param itemCollection An item collection containing associated overlays.\r\n         * @param geoJSON The original GeoJSON object for this MultiLineString. This\r\n         * will contain an array of geometries.\r\n         */\r\n        itemForMultiLineString?(\r\n            itemCollection: ItemCollection,\r\n            geoJSON: object\r\n        ): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a point.\r\n         *\r\n         * @param coordinate A GeoJSON Point generates the coordinate. You can use\r\n         * the coordinate to instantiate an item to return.\r\n         * @param geoJSON The original GeoJSON object for this Point. This object could\r\n         * be a simple Point or a Feature with the Point geometry type.\r\n         */\r\n        itemForPoint?(coordinate: Coordinate, geoJSON: object): Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a multipoint object.\r\n         *\r\n         * @param itemCollection A collection containing associated annotations.\r\n         * @param geoJSON The original GeoJSON object for this MultiPoint. This will\r\n         * contain an array of geometries.\r\n         */\r\n        itemForMultiPoint?(\r\n            itemCollection: ItemCollection,\r\n            geoJSON: object\r\n        ): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a polygon.\r\n         *\r\n         * @param overlay You can customize the provided overlay before returning it,\r\n         * or you could completely replace the overlay.\r\n         * @param geoJSON The original GeoJSON object for this polygon.\r\n         */\r\n        itemForPolygon?(overlay: PolygonOverlay, geoJSON: object): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides a multipolygon.\r\n         *\r\n         * @param itemCollection A collection containing associated overlays.\r\n         * @param geoJSON The original GeoJSON object for this MultiPolygon. This\r\n         * will contain an array of geometries.\r\n         */\r\n        itemForMultiPolygon?(\r\n            itemCollection: ItemCollection,\r\n            geoJSON: object\r\n        ): Annotation | Overlay | Array<Annotation | Overlay>;\r\n\r\n        /**\r\n         * Overrides the style of overlays.\r\n         *\r\n         * @param overlay The overlay to style.\r\n         * @param geoJSON The original GeoJSON for this feature or geometry object.\r\n         */\r\n        styleForOverlay?(overlay: Overlay, geoJSON: object): Style;\r\n\r\n        /**\r\n         * Completes the GeoJSON import.\r\n         *\r\n         * @param result The mapped item collection.\r\n         * @param geoJSON The original parsed GeoJSON object.\r\n         */\r\n        geoJSONDidComplete?(result: ItemCollection, geoJSON: object): void;\r\n\r\n        /**\r\n         * Indicates the GeoJSON import failed.\r\n         *\r\n         * @param error An Error instance related to the last blocking error.\r\n         * @param geoJSON The original parsed GeoJSON object.\r\n         */\r\n        geoJSONDidError?(error: Error, geoJSON: object): void;\r\n    }\r\n\r\n    /**\r\n     * A tree structure containing annotations, overlays, and nested item\r\n     * collection objects.\r\n     */\r\n    export declare interface ItemCollection {\r\n        /**\r\n         * The raw GeoJSON data.\r\n         */\r\n        data: object;\r\n        /**\r\n         * A flattened array of items that include annotations or overlays.\r\n         */\r\n        getFlattenedItemList: Array<Annotation | Overlay>;\r\n        /**\r\n         * A nested list of annotations, overlays, or other item collections.\r\n         */\r\n        items: Array<Annotation | Overlay | ItemCollection>;\r\n    }\r\n}\r\n\r\n"]}