export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwa2l0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWFwcGxlLW1hcGtpdC9zcmMvbGliL21hcGtpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIG1hcGtpdCB7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgYSBtYXBraXQgb2JqZWN0IGJ5IHByb3ZpZGluZyBhbiBhdXRob3JpemF0aW9uIGNhbGxiYWNrIGFuZCBsYW5ndWFnZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaW5pdChvcHRpb25zOiBNYXBLaXRJbml0T3B0aW9ucyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFN1YnNjcmliZXMgYSBsaXN0ZW5lciBmdW5jdGlvbiB0byBhbiBldmVudCB0eXBlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IChlLmcuLCBcImNvbmZpZ3VyYXRpb24tY2hhbmdlXCIpLlxyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBpbnZva2UuIGxpc3RlbmVyIGlzIHBhc3NlZCBhblxyXG4gICAgICogRXZlbnQgYXMgaXRzIHNvbGUgYXJndW1lbnQuXHJcbiAgICAgKiBAcGFyYW0gdGhpc09iamVjdCBBbiBvYmplY3Qgc2V0IGFzIHRoZSB0aGlzIGtleXdvcmQgb24gdGhlIGxpc3RlbmVyIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyPFQ+KFxyXG4gICAgICAgIHR5cGU6IEluaXRpYWxpemF0aW9uRXZlbnRUeXBlLFxyXG4gICAgICAgIGxpc3RlbmVyOiAodGhpczogVCwgZXZlbnQ6IEluaXRpYWxpemF0aW9uRXZlbnQpID0+IHZvaWQsXHJcbiAgICAgICAgdGhpc09iamVjdD86IFQsXHJcbiAgICApOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBVbnN1YnNjcmliZXMgYSBsaXN0ZW5lciBmdW5jdGlvbiBmcm9tIGFuIGV2ZW50IHR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgKGUuZy4sIFwiY29uZmlndXJhdGlvbi1jaGFuZ2VcIikuXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlbW92ZS5cclxuICAgICAqIEBwYXJhbSB0aGlzT2JqZWN0IEFuIG9iamVjdCBzZXQgYXMgdGhlIHRoaXMga2V5d29yZCBvbiB0aGUgbGlzdGVuZXIgZnVuY3Rpb24uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXI8VD4oXHJcbiAgICAgICAgdHlwZTogSW5pdGlhbGl6YXRpb25FdmVudFR5cGUsXHJcbiAgICAgICAgbGlzdGVuZXI6ICh0aGlzOiBULCBldmVudDogSW5pdGlhbGl6YXRpb25FdmVudCkgPT4gdm9pZCxcclxuICAgICAgICB0aGlzT2JqZWN0PzogVCxcclxuICAgICk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEEgbGFuZ3VhZ2UgSUQgaW5kaWNhdGluZyB0aGUgc2VsZWN0ZWQgbGFuZ3VhZ2UuXHJcbiAgICAgKi9cclxuICAgIGxldCBsYW5ndWFnZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYnVpbGQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBjb25zdCBidWlsZDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdmVyc2lvbiBvZiBNYXBLaXQgSlMuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IHZlcnNpb246IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemF0aW9uIG9wdGlvbnMgZm9yIE1hcEtpdCBKUy5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIE1hcEtpdEluaXRPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgb2J0YWlucyBhIHRva2VuLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGRvbmUgQSBmdW5jdGlvbiB0aGF0IGNvbXBsZXRlcyB0aGUgTWFwS2l0IEpTIHRva2VuIHJlcXVlc3QuIENhbGxlZFxyXG4gICAgICAgICAqIGFmdGVyIGNyZWF0aW5nIGEgbmV3IHRva2VuLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGF1dGhvcml6YXRpb25DYWxsYmFjazogKGRvbmU6ICh0b2tlbjogc3RyaW5nKSA9PiB2b2lkKSA9PiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIElEIHRoYXQgaW5kaWNhdGVzIHRoZSBwcmVmZXJyZWQgbGFuZ3VhZ2UgaW4gd2hpY2ggdG8gZGlzcGxheSBtYXBcclxuICAgICAgICAgKiBsYWJlbHMsIGNvbnRyb2xzLCBkaXJlY3Rpb25zLCBhbmQgb3RoZXIgdGV4dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsYW5ndWFnZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0YW50cyBpbmRpY2F0aW5nIHRoZSB2aXNpYmlsaXR5IG9mIGRpZmZlcmVudCBhZGFwdGl2ZSBtYXAgZmVhdHVyZXMuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IEZlYXR1cmVWaXNpYmlsaXR5OiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBjb25zdGFudCBpbmRpY2F0aW5nIHRoYXQgZmVhdHVyZSB2aXNpYmlsaXR5IGFkYXB0cyB0byB0aGUgY3VycmVudCBtYXAgc3RhdGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVhZG9ubHkgQWRhcHRpdmU6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGNvbnN0YW50IGluZGljYXRpbmcgdGhhdCB0aGUgZmVhdHVyZSBpcyBhbHdheXMgaGlkZGVuLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRvbmx5IEhpZGRlbjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgY29uc3RhbnQgaW5kaWNhdGluZyB0aGF0IHRoZSBmZWF0dXJlIGlzIGFsd2F5cyB2aXNpYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRvbmx5IFZpc2libGU6IHN0cmluZztcclxuICAgIH07XHJcblxyXG4gICAgdHlwZSBJbml0aWFsaXphdGlvbkV2ZW50VHlwZSA9IFwiY29uZmlndXJhdGlvbi1jaGFuZ2VcIiB8IFwiZXJyb3JcIjtcclxuXHJcbiAgICBpbnRlcmZhY2UgSW5pdGlhbGl6YXRpb25FdmVudCB7XHJcbiAgICAgICAgc3RhdHVzOiBcIkluaXRpYWxpemVkXCIgfCBcIlJlZnJlc2hlZFwiIHwgXCJVbmF1dGhvcml6ZWRcIiB8IFwiVG9vIE1hbnkgUmVxdWVzdHNcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGVtYmVkZGFibGUgaW50ZXJhY3RpdmUgbWFwIHRoYXQgeW91IGFkZCB0byBhIHdlYnBhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIE1hcCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIG1hcCB0aGF0IHlvdSBlbWJlZCBvbiBhIHdlYnBhZ2UsIGFuZCBpbml0aWFsaXplcyBpdHMgZGlzcGxheVxyXG4gICAgICAgICAqIHByb3BlcnRpZXMgYW5kIG90aGVyIG9wdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyZW50IHBhcmVudCBBIERPTSBlbGVtZW50IG9yIHRoZSBJRCBvZiBhIERPTSBlbGVtZW50IHRvIHVzZSBhcyB0aGlzXHJcbiAgICAgICAgICogbWFwJ3MgY29udGFpbmVyLlxyXG4gICAgICAgICAqIEBwYXJhbSBwYXJlbnRcclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgdGhhdCBjb250YWlucyBvcHRpb25zIGZvciBpbml0aWFsaXppbmcgYSBtYXAnc1xyXG4gICAgICAgICAqIGZlYXR1cmVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBhcmVudDogc3RyaW5nIHwgRWxlbWVudCwgb3B0aW9ucz86IE1hcENvbnN0cnVjdG9yT3B0aW9ucyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBoYW5kbGUgZXZlbnRzIHRyaWdnZXJlZCBieSB1c2VyIGludGVyYWN0aW9uc1xyXG4gICAgICAgICAqIGFuZCB0aGUgZnJhbWV3b3JrLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUgb2YgaW50ZXJlc3QgKGUuZy4sIFwic2VsZWN0XCIpLlxyXG4gICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gaW52b2tlLiBMaXN0ZW5lciBpcyBwYXNzZWQgYVxyXG4gICAgICAgICAqIE1hcCBldmVudCBhcyBpdHMgc29sZSBhcmd1bWVudC5cclxuICAgICAgICAgKiBAcGFyYW0gdGhpc09iamVjdCBBbiBvYmplY3QgdG8gYmUgc2V0IGFzIHRoZSB0aGlzIGtleXdvcmQgb24gdGhlIGxpc3RlbmVyXHJcbiAgICAgICAgICogZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcjxULCBLIGV4dGVuZHMga2V5b2YgTWFwRXZlbnRzPHRoaXM+PihcclxuICAgICAgICAgICAgdHlwZTogSyxcclxuICAgICAgICAgICAgbGlzdGVuZXI6ICh0aGlzOiBULCBldmVudDogTWFwRXZlbnRzPHRoaXM+W0tdKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0aGlzT2JqZWN0PzogVCxcclxuICAgICAgICApOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxULCBLIGV4dGVuZHMga2V5b2YgTWFwRXZlbnRzPHRoaXM+PihcclxuICAgICAgICAgICAgdHlwZTogSyxcclxuICAgICAgICAgICAgbGlzdGVuZXI6ICh0eXBlOiBULCBldmVudDogTWFwRXZlbnRzPHRoaXM+W0tdKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0aGlzT2JqZWN0PzogVCxcclxuICAgICAgICApOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgdGhlIG1hcCdzIGVsZW1lbnQgZnJvbSB0aGUgRE9NIGFuZCByZWxlYXNlcyBpbnRlcm5hbCByZWZlcmVuY2VzIHRvXHJcbiAgICAgICAgICogdGhpcyBtYXAgdG8gZnJlZSB1cCBtZW1vcnkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVzdHJveSgpOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAncyBET00gZWxlbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50O1xyXG5cclxuICAgICAgICAvLyBBY2Nlc3NpbmcgSW50ZXJhY3Rpb24gUHJvcGVydGllc1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgaWYgbWFwIHJvdGF0aW9uIGlzIGF2YWlsYWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1JvdGF0aW9uQXZhaWxhYmxlOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgdXNlciBtYXkgcm90YXRlIHRoZSBtYXAgdXNpbmdcclxuICAgICAgICAgKiB0aGUgY29tcGFzcyBjb250cm9sIG9yIGEgcm90YXRlIGdlc3R1cmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXNSb3RhdGlvbkVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIG1heSBzY3JvbGwgdGhlIG1hcCB3aXRoXHJcbiAgICAgICAgICogYSBwb2ludGluZyBkZXZpY2Ugb3Igd2l0aCBnZXN0dXJlcyBvbiBhIHRvdWNoc2NyZWVuLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzU2Nyb2xsRW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHVzZXIgbWF5IHpvb20gaW4gYW5kIG91dCBvblxyXG4gICAgICAgICAqIHRoZSBtYXAgdXNpbmcgcGluY2ggZ2VzdHVyZXMgb3IgdGhlIHpvb20gY29udHJvbC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpc1pvb21FbmFibGVkOiBib29sZWFuO1xyXG5cclxuICAgICAgICAvLyBNYW5pcHVsYXRpbmcgdGhlIFZpc2libGUgUG9ydGlvbiBvZiB0aGUgTWFwXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAgY29vcmRpbmF0ZSBhdCB0aGUgY2VudGVyIG9mIHRoZSBtYXAgdmlldy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjZW50ZXI6IENvb3JkaW5hdGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2VudGVycyB0aGUgbWFwIHRvIHRoZSBwcm92aWRlZCBjb29yZGluYXRlLCB3aXRoIG9wdGlvbmFsIGFuaW1hdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXRDZW50ZXJBbmltYXRlZChjb29yZGluYXRlOiBDb29yZGluYXRlLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFyZWEgY3VycmVudGx5IGRpc3BsYXllZCBieSB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZ2lvbjogQ29vcmRpbmF0ZVJlZ2lvbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGFuZ2VzIHRoZSBtYXAncyByZWdpb24gdG8gdGhlIHJlZ2lvbiBwcm92aWRlZCwgd2l0aCBvcHRpb25hbCBhbmltYXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0UmVnaW9uQW5pbWF0ZWQocmVnaW9uOiBDb29yZGluYXRlUmVnaW9uLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1hcCdzIHJvdGF0aW9uLCBpbiBkZWdyZWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJvdGF0aW9uOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhbmdlcyB0aGUgbWFwJ3Mgcm90YXRpb24gc2V0dGluZyB0byB0aGUgbnVtYmVyIG9mIGRlZ3JlZXMgc3BlY2lmaWVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldFJvdGF0aW9uQW5pbWF0ZWQoZGVncmVlczogbnVtYmVyLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHZpc2libGUgYXJlYSBvZiB0aGUgbWFwIGRlZmluZWQgaW4gbWFwIHVuaXRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZpc2libGVNYXBSZWN0OiBNYXBSZWN0O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoYW5nZXMgdGhlIG1hcCdzIHZpc2libGUgbWFwIHJlY3RhbmdsZSB0byB0aGUgc3BlY2lmaWVkIG1hcCByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0VmlzaWJsZU1hcFJlY3RBbmltYXRlZChtYXBSZWN0OiBNYXBSZWN0LCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyBhIGNvbnN0cmFpbnQgZm9yIHRoZSBjZW50ZXIgb2YgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW1lcmFCb3VuZGFyeTogQ2FtZXJhQm91bmRhcnlEZXNjcmlwdGlvbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDaGFuZ2VzIHRoZSBtYXAncyBjYW1lcmEgYm91bmRhcnkgd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENhbWVyYUJvdW5kYXJ5QW5pbWF0ZWQoY29vcmRpbmF0ZVJlZ2lvbk9yTWFwUmVjdDogQ29vcmRpbmF0ZVJlZ2lvbiB8IE1hcFJlY3QsIGFuaW1hdGU/OiBib29sZWFuKTogdGhpcztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXRzIHRoZSBhbHRpdHVkZSBvZiB0aGUgY2FtZXJhIGFib3ZlIHRoZSBjZW50ZXIgb2YgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW1lcmFEaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENoYW5nZXMgdGhlIG1hcCdzIGNhbWVyYSBkaXN0YW5jZSB3aXRoIGFuIGFuaW1hdGVkIHRyYW5zaXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0Q2FtZXJhRGlzdGFuY2VBbmltYXRlZChkaXN0YW5jZTogbnVtYmVyLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU2V0cyB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBkaXN0YW5jZSBvZiB0aGUgY2FtZXJhIGZyb20gdGhlIG1hcCBjZW50ZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FtZXJhWm9vbVJhbmdlOiBDYW1lcmFab29tUmFuZ2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hhbmdlcyB0aGUgbWFwJ3MgY2FtZXJhIHpvb20gcmFuZ2Ugd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldENhbWVyYVpvb21SYW5nZUFuaW1hdGVkKGNhbWVyYVpvb21SYW5nZTogQ2FtZXJhWm9vbVJhbmdlLCBhbmltYXRlPzogYm9vbGVhbik6IHRoaXM7XHJcblxyXG4gICAgICAgIC8vIENvbmZpZ3VyaW5nIHRoZSBNYXAncyBBcHBlYXJhbmNlXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0YW50cyBpbmRpY2F0aW5nIHRoZSBjb2xvciBzY2hlbWUgb2YgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgQ29sb3JTY2hlbWVzOiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIGNvbnN0YW50IGluZGljYXRpbmcgYSBsaWdodCBjb2xvciBzY2hlbWUuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBMaWdodDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBjb25zdGFudCBpbmRpY2F0aW5nIGEgZGFyayBjb2xvciBzY2hlbWUuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBEYXJrOiBzdHJpbmc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25zdGFudHMgcmVwcmVzZW50aW5nIHRoZSB0eXBlIG9mIG1hcCB0byBkaXNwbGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyByZWFkb25seSBNYXBUeXBlczoge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBzdHJlZXQgbWFwIHRoYXQgc2hvd3MgdGhlIHBvc2l0aW9uIG9mIGFsbCByb2FkcyBhbmQgc29tZSByb2FkIG5hbWVzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVhZG9ubHkgU3RhbmRhcmQ6IHN0cmluZztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgc3RyZWV0IG1hcCB3aGVyZSB5b3VyIGRhdGEgaXMgZW1waGFzaXplZCBvdmVyIHRoZSB1bmRlcmx5aW5nIG1hcCBkZXRhaWxzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVhZG9ubHkgTXV0ZWRTdGFuZGFyZDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBzYXRlbGxpdGUgaW1hZ2Ugb2YgdGhlIGFyZWEgd2l0aCByb2FkIGFuZCByb2FkIG5hbWUgaW5mb3JtYXRpb25cclxuICAgICAgICAgICAgICogbGF5ZXJlZCBvbiB0b3AuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBIeWJyaWQ6IHN0cmluZztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgc2F0ZWxsaXRlIGltYWdlIG9mIHRoZSBhcmVhLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVhZG9ubHkgU2F0ZWxsaXRlOiBzdHJpbmc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25zdGFudHMgaW5kaWNhdGluZyB0aGUgc3lzdGVtIG9mIG1lYXN1cmVtZW50IGRpc3BsYXllZCBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyByZWFkb25seSBEaXN0YW5jZXM6IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgY29uc3RhbnQgaW5kaWNhdGluZyB0aGUgbWVhc3VyZW1lbnQgc3lzdGVtIGlzIGFkYXB0aXZlLCBhbmQgZGV0ZXJtaW5lZFxyXG4gICAgICAgICAgICAgKiBiYXNlZCBvbiB0aGUgbWFwJ3MgbGFuZ3VhZ2UuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBBZGFwdGl2ZTogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBjb25zdGFudCBpbmRpY2F0aW5nIHRoZSBtZWFzdXJlbWVudCBzeXN0ZW0gaXMgaW1wZXJpYWwuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICByZWFkb25seSBJbXBlcmlhbDogc3RyaW5nO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogQSBjb25zdGFudCBpbmRpY2F0aW5nIHRoZSBtZWFzdXJlbWVudCBzeXN0ZW0gaXMgbWV0cmljLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgcmVhZG9ubHkgTWV0cmljOiBzdHJpbmc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFw4oCZcyBjb2xvciBzY2hlbWUgd2hlbiBkaXNwbGF5aW5nIHN0YW5kYXJkIG9yIG11dGVkIHN0YW5kYXJkIG1hcCB0eXBlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb2xvclNjaGVtZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzeXN0ZW0gb2YgbWVhc3VyZW1lbnQgZGlzcGxheWVkIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzdGFuY2VzOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHR5cGUgb2YgZGF0YSBkaXNwbGF5ZWQgYnkgdGhlIG1hcCB2aWV3LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hcFR5cGU6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFwJ3MgaW5zZXQgbWFyZ2lucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwYWRkaW5nOiBQYWRkaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmVhdHVyZSB2aXNpYmlsaXR5IHNldHRpbmcgdGhhdCBkZXRlcm1pbmVzIHdoZW4gdGhlIGNvbXBhc3MgaXMgdmlzaWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c0NvbXBhc3M6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gZGlzcGxheSBhIGNvbnRyb2wgdGhhdCBsZXRzXHJcbiAgICAgICAgICogdXNlcnMgY2hvb3NlIHRoZSBtYXAgdHlwZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c01hcFR5cGVDb250cm9sOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IGEgY29udHJvbCBmb3Igem9vbWluZ1xyXG4gICAgICAgICAqIGluIGFuZCB6b29taW5nIG91dCBvbiBhIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1pvb21Db250cm9sOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgdXNlciBsb2NhdGlvbiBjb250cm9sIGlzIHZpc2libGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd3NVc2VyTG9jYXRpb25Db250cm9sOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBmaWx0ZXIgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHBvaW50cyBvZiBpbnRlcmVzdCBzaG93biBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvaW50T2ZJbnRlcmVzdEZpbHRlcjogUG9pbnRPZkludGVyZXN0RmlsdGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgbWFwIGRpc3BsYXlzIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1BvaW50c09mSW50ZXJlc3Q6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmZWF0dXJlIHZpc2liaWxpdHkgc2V0dGluZyB0aGF0IGRldGVybWluZXMgd2hlbiB0aGUgbWFwJ3Mgc2NhbGUgaXMgZGlzcGxheWVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzU2NhbGU6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgQ1NTIGNvbG9yIHRoYXQgaXMgdXNlZCB0byBwYWludCB0aGUgdXNlciBpbnRlcmZhY2UgY29udHJvbHMgb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aW50Q29sb3I6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGp1c3RzIHRoZSBtYXBzIHZpc2libGUgcmVnaW9uIHRvIGJyaW5nIHRoZSBzcGVjaWZpZWQgb3ZlcmxheXMgYW5kXHJcbiAgICAgICAgICogYW5ub3RhdGlvbnMgaW50byB2aWV3LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dJdGVtczxJID0gQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+PihpdGVtczogSSwgb3B0aW9ucz86IE1hcFNob3dJdGVtc09wdGlvbnMpOiBJO1xyXG5cclxuICAgICAgICAvLyBBbm5vdGF0aW5nIHRoZSBNYXBcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgYWxsIHRoZSBhbm5vdGF0aW9ucyBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFubm90YXRpb25zOiBBbm5vdGF0aW9uW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFubm90YXRpb24gdGhhdCBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZEFubm90YXRpb246IEFubm90YXRpb24gfCBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZGVsZWdhdGUgbWV0aG9kIGZvciBtb2RpZnlpbmcgYW4gYW5ub3RhdGlvbiB0aGF0IHJlcHJlc2VudHMgYSBncm91cCBvZlxyXG4gICAgICAgICAqIGFubm90YXRpb25zIHRoYXQgYXJlIGNvbWJpbmVkIGludG8gYSBjbHVzdGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFubm90YXRpb25Gb3JDbHVzdGVyKGNsdXN0ZXJBbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogdm9pZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIGFubm90YXRpb24gb2JqZWN0cyBsb2NhdGVkIGluIHRoZSBzcGVjaWZpZWQgbWFwXHJcbiAgICAgICAgICogcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFubm90YXRpb25zSW5NYXBSZWN0KG1hcFJlY3Q6IE1hcFJlY3QpOiBBbm5vdGF0aW9uW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBhbm5vdGF0aW9uIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkQW5ub3RhdGlvbihhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogQW5ub3RhdGlvbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIG11bHRpcGxlIGFubm90YXRpb25zIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnM6IEFubm90YXRpb25bXSk6IEFubm90YXRpb25bXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZW1vdmVzIGFuIGFubm90YXRpb24gZnJvbSB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZUFubm90YXRpb24oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IEFubm90YXRpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBtdWx0aXBsZSBhbm5vdGF0aW9ucyBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnM6IEFubm90YXRpb25bXSk6IEFubm90YXRpb25bXTtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGFuZCBSZW1vdmluZyBPdmVybGF5c1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBhbGwgdGhlIG1hcCdzIG92ZXJsYXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG92ZXJsYXlzOiBPdmVybGF5W107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG92ZXJsYXkgb24gdGhlIG1hcCB0aGF0IGlzIHNlbGVjdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdGVkT3ZlcmxheTogT3ZlcmxheSB8IG51bGw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBvdmVybGF5cyBhdCBhIGdpdmVuIHBvaW50IG9uIHRoZSB3ZWJwYWdlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG92ZXJsYXlzQXRQb2ludChwb2ludDogRE9NUG9pbnQpOiBPdmVybGF5W107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBvdmVybGF5IHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkT3ZlcmxheShvdmVybGF5OiBPdmVybGF5KTogT3ZlcmxheTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBZGRzIG11bHRpcGxlIG92ZXJsYXlzIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkT3ZlcmxheXMob3ZlcmxheXM6IE92ZXJsYXlbXSk6IE92ZXJsYXlbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZW1vdmVzIGFuIG92ZXJsYXkgZnJvbSB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZU92ZXJsYXkob3ZlcmxheTogT3ZlcmxheSk6IE92ZXJsYXk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBtdWx0aXBsZSBvdmVybGF5cyBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlT3ZlcmxheXMob3ZlcmxheXM6IE92ZXJsYXlbXSk6IE92ZXJsYXlbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSB0b3Btb3N0IG92ZXJsYXkgYXQgYSBnaXZlbiBwb2ludCBvbiB0aGUgd2VicGFnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b3BPdmVybGF5QXRQb2ludChwb2ludDogRE9NUG9pbnQpOiBPdmVybGF5IHwgbnVsbDtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGFuZCBSZW1vdmluZyBHZW9ncmFwaGljYWwgRmVhdHVyZXNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIGNvbGxlY3Rpb24gb2YgYW5ub3RhdGlvbnMsIG92ZXJsYXlzLCBvciBvdGhlciBpdGVtIGNvbGxlY3Rpb25zIHRvIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkSXRlbXMoXHJcbiAgICAgICAgICAgIGl0ZW1zOiBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEl0ZW1Db2xsZWN0aW9uPiB8IEl0ZW1Db2xsZWN0aW9uLFxyXG4gICAgICAgICk6IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5IHwgSXRlbUNvbGxlY3Rpb24+IHwgSXRlbUNvbGxlY3Rpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlcyBhIGNvbGxlY3Rpb24gb2YgYW5ub3RhdGlvbnMsIG92ZXJsYXlzLCBvciBvdGhlciBpdGVtIGNvbGxlY3Rpb25zIGZyb20gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVJdGVtcyhcclxuICAgICAgICAgICAgaXRlbXM6IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5IHwgSXRlbUNvbGxlY3Rpb24+IHwgSXRlbUNvbGxlY3Rpb24sXHJcbiAgICAgICAgKTogQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBJdGVtQ29sbGVjdGlvbj4gfCBJdGVtQ29sbGVjdGlvbjtcclxuXHJcbiAgICAgICAgLy8gQWRkaW5nIGFuZCBSZW1vdmluZyBUaWxlIE92ZXJsYXlzXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGFsbCB0aGUgbWFwJ3MgdGlsZSBvdmVybGF5cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aWxlT3ZlcmxheXM6IFRpbGVPdmVybGF5W107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhIHRpbGUgb3ZlcmxheSB0byB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZFRpbGVPdmVybGF5KHRpbGVPdmVybGF5OiBUaWxlT3ZlcmxheSk6IFRpbGVPdmVybGF5O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFkZHMgYW4gYXJyYXkgb2YgdGlsZSBvdmVybGF5cyB0byB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZFRpbGVPdmVybGF5cyh0aWxlT3ZlcmxheXM6IFRpbGVPdmVybGF5W10pOiBUaWxlT3ZlcmxheVtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgYSB0aWxlIG92ZXJsYXkgZnJvbSB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZVRpbGVPdmVybGF5KHRpbGVPdmVybGF5OiBUaWxlT3ZlcmxheSk6IFRpbGVPdmVybGF5O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZXMgYW4gYXJyYXkgb2YgdGlsZSBvdmVybGF5cyBmcm9tIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVtb3ZlVGlsZU92ZXJsYXlzKHRpbGVPdmVybGF5czogVGlsZU92ZXJsYXlbXSk6IFRpbGVPdmVybGF5W107XHJcblxyXG4gICAgICAgIC8vIERpc3BsYXlpbmcgdGhlIFVzZXIncyBMb2NhdGlvblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gc2hvdyB0aGUgdXNlcidzIGxvY2F0aW9uIG9uXHJcbiAgICAgICAgICogdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1VzZXJMb2NhdGlvbjogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gY2VudGVyIHRoZSBtYXAgb24gdGhlIHVzZXInc1xyXG4gICAgICAgICAqIGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYWNrc1VzZXJMb2NhdGlvbjogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhbm5vdGF0aW9uIHRoYXQgaW5kaWNhdGVzIHRoZSB1c2VyJ3MgbG9jYXRpb24gb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSB1c2VyTG9jYXRpb25Bbm5vdGF0aW9uOiBBbm5vdGF0aW9uIHwgbnVsbDtcclxuXHJcbiAgICAgICAgLy8gQ29udmVydGluZyBNYXAgQ29vcmRpbmF0ZXNcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYSBjb29yZGluYXRlIG9uIHRoZSBtYXAgdG8gYSBwb2ludCBpbiB0aGUgcGFnZSdzIGNvb3JkaW5hdGUgc3lzdGVtLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRDb29yZGluYXRlVG9Qb2ludE9uUGFnZShjb29yZGluYXRlOiBDb29yZGluYXRlKTogRE9NUG9pbnQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYSBwb2ludCBpbiBwYWdlIGNvb3JkaW5hdGVzIHRvIHRoZSBjb3JyZXNwb25kaW5nIG1hcCBjb29yZGluYXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnZlcnRQb2ludE9uUGFnZVRvQ29vcmRpbmF0ZShwb2ludDogRE9NUG9pbnQpOiBDb29yZGluYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgb3B0aW9ucyBmb3IgaW5pdGlhbGl6aW5nIGEgbWFwJ3MgZmVhdHVyZXMuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBNYXBDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB2aXNpYmxlIGFyZWEgb2YgdGhlIG1hcCBkZWZpbmVkIGluIG1hcCB1bml0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2aXNpYmxlTWFwUmVjdD86IE1hcFJlY3QgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFyZWEgY3VycmVudGx5IGRpc3BsYXllZCBieSB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZ2lvbj86IENvb3JkaW5hdGVSZWdpb24gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1hcCBjb29yZGluYXRlIGF0IHRoZSBjZW50ZXIgb2YgdGhlIG1hcCB2aWV3LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNlbnRlcj86IENvb3JkaW5hdGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1hcCdzIHJvdGF0aW9uLCBpbiBkZWdyZWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJvdGF0aW9uPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBDU1MgY29sb3IgdGhhdCBpcyB1c2VkIHRvIHBhaW50IHRoZSB1c2VyIGludGVyZmFjZSBjb250cm9scyBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpbnRDb2xvcj86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFw4oCZcyBjb2xvciBzY2hlbWUgd2hlbiBkaXNwbGF5aW5nIHN0YW5kYXJkIG9yIG11dGVkIHN0YW5kYXJkIG1hcCB0eXBlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb2xvclNjaGVtZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdHlwZSBvZiBkYXRhIGRpc3BsYXllZCBieSB0aGUgbWFwIHZpZXcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWFwVHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFwJ3MgaW5zZXQgbWFyZ2lucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwYWRkaW5nPzogUGFkZGluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gZGlzcGxheSBhIGNvbnRyb2wgdGhhdCBsZXRzXHJcbiAgICAgICAgICogdXNlcnMgY2hvb3NlIHRoZSBtYXAgdHlwZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c01hcFR5cGVDb250cm9sPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHVzZXIgbWF5IHJvdGF0ZSB0aGUgbWFwIHVzaW5nXHJcbiAgICAgICAgICogdGhlIGNvbXBhc3MgY29udHJvbCBvciBhIHJvdGF0ZSBnZXN0dXJlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzUm90YXRpb25FbmFibGVkPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZlYXR1cmUgdmlzaWJpbGl0eSBzZXR0aW5nIHRoYXQgZGV0ZXJtaW5lcyB3aGVuIHRoZSBjb21wYXNzIGlzIHZpc2libGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd3NDb21wYXNzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgdXNlciBtYXkgem9vbSBpbiBhbmQgb3V0IG9uXHJcbiAgICAgICAgICogdGhlIG1hcCB1c2luZyBwaW5jaCBnZXN0dXJlcyBvciB0aGUgem9vbSBjb250cm9sLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzWm9vbUVuYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0byBkaXNwbGF5IGEgY29udHJvbCBmb3Igem9vbWluZ1xyXG4gICAgICAgICAqIGluIGFuZCB6b29taW5nIG91dCBvbiBhIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1pvb21Db250cm9sPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHVzZXIgbWF5IHNjcm9sbCB0aGUgbWFwIHdpdGhcclxuICAgICAgICAgKiBhIHBvaW50aW5nIGRldmljZSBvciBnZXN0dXJlcyBvbiBhIHRvdWNoc2NyZWVuLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlzU2Nyb2xsRW5hYmxlZD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmZWF0dXJlIHZpc2liaWxpdHkgc2V0dGluZyB0aGF0IGRldGVybWluZXMgd2hlbiB0aGUgbWFwJ3Mgc2NhbGUgaXNcclxuICAgICAgICAgKiBkaXNwbGF5ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd3NTY2FsZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGRlbGVnYXRlIG1ldGhvZCBmb3IgbW9kaWZ5aW5nIGNsdXN0ZXIgYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYW5ub3RhdGlvbkZvckNsdXN0ZXI/KGFubm90YXRpb246IEFubm90YXRpb24pOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGFsbCB0aGUgYW5ub3RhdGlvbnMgb24gdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbm5vdGF0aW9ucz86IEFubm90YXRpb25bXSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW5ub3RhdGlvbiBvbiB0aGUgbWFwIHRoYXQgaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWRBbm5vdGF0aW9uPzogQW5ub3RhdGlvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBhbGwgdGhlIG1hcCdzIG92ZXJsYXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG92ZXJsYXlzPzogT3ZlcmxheVtdIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvdmVybGF5IG9uIHRoZSBtYXAgdGhhdCBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZE92ZXJsYXk/OiBPdmVybGF5IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgbWFwIGRpc3BsYXlzIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1BvaW50c09mSW50ZXJlc3Q/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVGhlIGZpbHRlciB1c2VkIHRvIGRldGVybWluZSB0aGUgcG9pbnRzIG9mIGludGVyZXN0IHNob3duIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0RmlsdGVyPzogUG9pbnRPZkludGVyZXN0RmlsdGVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0byBzaG93IHRoZSB1c2VyJ3MgbG9jYXRpb24gb25cclxuICAgICAgICAgKiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dzVXNlckxvY2F0aW9uPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gY2VudGVyIHRoZSBtYXAgb24gdGhlIHVzZXInc1xyXG4gICAgICAgICAqIGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYWNrc1VzZXJMb2NhdGlvbj86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIGxvY2F0aW9uIGNvbnRyb2wgaXMgdmlzaWJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93c1VzZXJMb2NhdGlvbkNvbnRyb2w/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IGxpdGVyYWwgY29udGFpbmluZyBhdCBsZWFzdCBvbmUgcHJvcGVydHkgZGVmaW5pbmcgYW4gYXJlYSBvbiB0aGUgbWFwLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgQ2FtZXJhQm91bmRhcnlEZXNjcmlwdGlvbiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSByZWN0YW5ndWxhciBhcmVhIG9uIGEgdHdvLWRpbWVuc2lvbmFsIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hcFJlY3Q/OiBNYXBSZWN0IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgcmVjdGFuZ3VsYXIgYXJlYSBvbiBhIG1hcCwgZGVmaW5lZCBieSBjb29yZGluYXRlcyBvZiB0aGUgcmVjdGFuZ2xlJ3Mgbm9ydGhlYXN0IGFuZCBzb3V0aHdlc3QgY29ybmVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb24/OiBDb29yZGluYXRlUmVnaW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gYXJyYXkgdG8gd2hpY2ggbWFwcyBhcmUgYXV0b21hdGljYWxseSBhZGRlZCBhbmQgcmVtb3ZlZCBhcyB0aGV5IGFyZVxyXG4gICAgICogaW5pdGlhbGl6ZWQgYW5kIGRlc3Ryb3llZC5cclxuICAgICAqL1xyXG4gICAgY29uc3QgbWFwczogTWFwW107XHJcblxyXG4gICAgaW50ZXJmYWNlIEV2ZW50QmFzZTxUPiB7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nO1xyXG4gICAgICAgIHRhcmdldDogVDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYXAgRGlzcGxheSBFdmVudHNcclxuICAgIGludGVyZmFjZSBNYXBEaXNwbGF5RXZlbnRzPFQ+IHtcclxuICAgICAgICBcInJlZ2lvbi1jaGFuZ2Utc3RhcnRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwicmVnaW9uLWNoYW5nZS1lbmRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwicm90YXRpb24tc3RhcnRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwicm90YXRpb24tZW5kXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgICAgICBcInNjcm9sbC1zdGFydFwiOiBFdmVudEJhc2U8VD47XHJcbiAgICAgICAgXCJzY3JvbGwtZW5kXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgICAgICBcInpvb20tc3RhcnRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwiem9vbS1lbmRcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgICAgIFwibWFwLXR5cGUtY2hhbmdlXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgIH1cclxuICAgIC8vIE1hcCBBbm5vdGF0aW9ucyBPdmVybGF5IEV2ZW50c1xyXG4gICAgaW50ZXJmYWNlIE1hcEFubm90YXRpb25PdmVybGF5RXZlbnRzPFQ+IHtcclxuICAgICAgICBzZWxlY3Q6IEV2ZW50QmFzZTxUPiAmIHsgYW5ub3RhdGlvbj86IEFubm90YXRpb24gfCB1bmRlZmluZWQ7IG92ZXJsYXk/OiBPdmVybGF5IHwgdW5kZWZpbmVkIH07XHJcbiAgICAgICAgZGVzZWxlY3Q6IEV2ZW50QmFzZTxUPiAmIHsgYW5ub3RhdGlvbj86IEFubm90YXRpb24gfCB1bmRlZmluZWQ7IG92ZXJsYXk/OiBPdmVybGF5IHwgdW5kZWZpbmVkIH07XHJcbiAgICAgICAgXCJkcmFnLXN0YXJ0XCI6IEV2ZW50QmFzZTxUPiAmIHsgYW5ub3RhdGlvbjogQW5ub3RhdGlvbiB9O1xyXG4gICAgICAgIGRyYWdnaW5nOiBFdmVudEJhc2U8VD4gJiB7IGFubm90YXRpb246IEFubm90YXRpb247IGNvb3JkaW5hdGU6IENvb3JkaW5hdGUgfTtcclxuICAgICAgICBcImRyYWctZW5kXCI6IEV2ZW50QmFzZTxUPiAmIHsgYW5ub3RhdGlvbjogQW5ub3RhdGlvbiB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVzZXIgTG9jYXRpb24gRXZlbnRzXHJcbiAgICBpbnRlcmZhY2UgTWFwVXNlckxvY2F0aW9uRXZlbnRzPFQ+IHtcclxuICAgICAgICBcInVzZXItbG9jYXRpb24tY2hhbmdlXCI6IEV2ZW50QmFzZTxUPiAmIHsgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZTsgdGltZXN0YW1wOiBEYXRlIH07XHJcbiAgICAgICAgXCJ1c2VyLWxvY2F0aW9uLWVycm9yXCI6IEV2ZW50QmFzZTxUPiAmIHsgY29kZTogbnVtYmVyOyBtZXNzYWdlOiBzdHJpbmcgfTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBNYXAgSW50ZXJhY3Rpb24gRXZlbnRzXHJcbiAgICBpbnRlcmZhY2UgTWFwSW50ZXJhY3Rpb25FdmVudHM8VD4ge1xyXG4gICAgICAgIFwic2luZ2xlLXRhcFwiOiBFdmVudEJhc2U8VD47XHJcbiAgICAgICAgXCJkb3VibGUtdGFwXCI6IEV2ZW50QmFzZTxUPjtcclxuICAgICAgICBcImxvbmctcHJlc3NcIjogRXZlbnRCYXNlPFQ+O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsbCBtYXAgZXZlbnRzXHJcbiAgICB0eXBlIE1hcEV2ZW50czxUPiA9XHJcbiAgICAgICAgJiBNYXBEaXNwbGF5RXZlbnRzPFQ+XHJcbiAgICAgICAgJiBNYXBBbm5vdGF0aW9uT3ZlcmxheUV2ZW50czxUPlxyXG4gICAgICAgICYgTWFwVXNlckxvY2F0aW9uRXZlbnRzPFQ+XHJcbiAgICAgICAgJiBNYXBJbnRlcmFjdGlvbkV2ZW50czxUPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgdGhhdCBkZXRlcm1pbmUgbWFwIHBhcmFtZXRlcnMgdXNlZCB3aGVuIHNob3dpbmcgaXRlbXMuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBNYXBTaG93SXRlbXNPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG1hcCBpcyBhbmltYXRlZCBhcyB0aGUgbWFwXHJcbiAgICAgICAgICogcmVnaW9uIGNoYW5nZXMgdG8gc2hvdyB0aGUgaXRlbXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYW5pbWF0ZT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0gbG9uZ2l0dWRpbmFsIGFuZCBsYXRpdHVkaW5hbCBzcGFuIHRoZSBtYXAgc2hvdWxkIGRpc3BsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGFkZGluZz86IFBhZGRpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BhY2luZyB0aGF0IGlzIGFkZGVkIGFyb3VuZCB0aGUgY29tcHV0ZWQgbWFwIHJlZ2lvbiB3aGVuIHNob3dpbmcgaXRlbXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluaW11bVNwYW4/OiBDb29yZGluYXRlU3BhbiB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgcmVjdGFuZ3VsYXIgYXJlYSBvbiBhIHR3by1kaW1lbnNpb25hbCBtYXAgcHJvamVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgTWFwUmVjdCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBNYXBSZWN0IG9iamVjdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSB4IFRoZSBvcmlnaW4gcG9pbnQgYWxvbmcgdGhlIGVhc3Qtd2VzdCBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0geSBUaGUgb3JpZ2luIHBvaW50IGFsb25nIHRoZSBub3J0aC1zb3V0aCBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0gd2lkdGggVGhlIGRpc3RhbmNlIChtZWFzdXJlZCB1c2luZyBtYXAgcG9pbnRzKSBhbG9uZyB0aGUgZWFzdC13ZXN0XHJcbiAgICAgICAgICogYXhpcyBvZiB0aGUgbWFwIHByb2plY3Rpb24uXHJcbiAgICAgICAgICogQHBhcmFtIGhlaWdodCBUaGUgZGlzdGFuY2UgKG1lYXN1cmVkIHVzaW5nIG1hcCBwb2ludHMpIGFsb25nIHRoZSBub3J0aC1zb3V0aFxyXG4gICAgICAgICAqIGF4aXMgb2YgdGhlIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9yaWdpbiBwb2ludCBvZiBhIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcmlnaW46IE1hcFBvaW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIGEgcmVjdGFuZ2xlLCBzdGFydGluZyBmcm9tIHRoZSBvcmlnaW4gcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2l6ZTogTWFwU2l6ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWF4aW11bSB4LWF4aXMgdmFsdWUgb2YgYSByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4WDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIHktYXhpcyB2YWx1ZSBvZiBhIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtYXhZOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pZC1wb2ludCBhbG9uZyB0aGUgeC1heGlzIG9mIGEgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pZFg6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWlkLXBvaW50IGFsb25nIHRoZSB5LWF4aXMgb2YgYSByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWlkWTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIHgtYXhpcyB2YWx1ZSBvZiBhIHJlY3RhbmdsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5YOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0geS1heGlzIHZhbHVlIG9mIGEgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pblk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgY29weSBvZiBhIG1hcCByZWN0YW5nbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weSgpOiBNYXBSZWN0O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHR3byBtYXAgcmVjdGFuZ2xlcyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gYW5vdGhlclJlY3QgVGhlIG1hcCByZWN0YW5nbGUgdG8gZXF1YXRlIHRvLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVxdWFscyhhbm90aGVyUmVjdDogTWFwUmVjdCk6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHNjYWxlRmFjdG9yIFRoZSBzY2FsZSBmYWN0b3IuXHJcbiAgICAgICAgICogQHBhcmFtIHNjYWxlQ2VudGVyIFRoZSBjZW50ZXIgbWFwIHBvaW50IGZvciBzY2FsaW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNjYWxlKHNjYWxlRmFjdG9yOiBudW1iZXIsIHNjYWxlQ2VudGVyOiBNYXBQb2ludCk6IE1hcFJlY3Q7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgcmVnaW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBtYXAgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvQ29vcmRpbmF0ZVJlZ2lvbigpOiBDb29yZGluYXRlUmVnaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSByZWN0YW5ndWxhciBhcmVhIG9uIGEgbWFwIGRlZmluZWQgYnkgYSBjZW50ZXIgY29vcmRpbmF0ZSBhbmQgYSBzcGFuLFxyXG4gICAgICogZXhwcmVzc2VkIGluIGRlZ3JlZXMgb2YgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgQ29vcmRpbmF0ZVJlZ2lvbiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBBIHJlY3Rhbmd1bGFyIGdlb2dyYXBoaWMgcmVnaW9uIGNlbnRlcmVkIGFyb3VuZCBhIGxhdGl0dWRlIGFuZFxyXG4gICAgICAgICAqIGxvbmdpdHVkZSBjb29yZGluYXRlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNlbnRlciBDb29yZGluYXRlIHRoYXQgaXMgY2VudGVyIHBvaW50IG9mIHRoZSByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHNwYW4gQSBDb29yZGluYXRlU3BhbiB0aGF0IHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiBtYXAgdG9cclxuICAgICAgICAgKiBkaXNwbGF5LiBUaGUgc3BhbiBhbHNvIGRlZmluZXMgdGhlIGN1cnJlbnQgem9vbSBsZXZlbCB1c2VkIGJ5IHRoZSBtYXAgb2JqZWN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNlbnRlcjogQ29vcmRpbmF0ZSwgc3BhbjogQ29vcmRpbmF0ZVNwYW4pO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjZW50ZXI6IENvb3JkaW5hdGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHNwYW4gcmVwcmVzZW50aW5nIHRoZSBhbW91bnQgb2YgbWFwIHRvIGRpc3BsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3BhbjogQ29vcmRpbmF0ZVNwYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRpc3RhbmNlIHByb3ZpZGVkIGluIG1ldGVycyBvciB0aGUgbG9uZ2VzdCBkaXN0YW5jZSBkZXJpdmVkIGZyb20gdGhlIGNlbnRlciBwb2ludCB0byB0aGUgcmVnaW9u4oCZcyBib3VuZGluZyBib3guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVhZG9ubHkgcmFkaXVzOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGNhbGxpbmcgY29vcmRpbmF0ZSByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weSgpOiBDb29yZGluYXRlUmVnaW9uO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBCb29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0d28gcmVnaW9ucyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXF1YWxzKGFub3RoZXJSZWdpb246IENvb3JkaW5hdGVSZWdpb24pOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIG1hcCByZWN0YW5nbGUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY2FsbGluZyBjb29yZGluYXRlIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b01hcFJlY3QoKTogTWFwUmVjdDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBib3VuZGluZyByZWdpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY2FsbGluZyBjb29yZGluYXRlIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b0JvdW5kaW5nUmVnaW9uKCk6IEJvdW5kaW5nUmVnaW9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBmb3IgYSBwb2ludCBvbiB0aGVcclxuICAgICAqIEVhcnRoJ3Mgc3VyZmFjZS5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgQ29vcmRpbmF0ZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIGNvb3JkaW5hdGUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGxhdGl0dWRlOiBudW1iZXIsIGxvbmdpdHVkZTogbnVtYmVyKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbGF0aXR1ZGUgaW4gZGVncmVlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb25naXR1ZGUgaW4gZGVncmVlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb25naXR1ZGU6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb3B5KCk6IENvb3JkaW5hdGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIEJvb2xlYW4gdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHR3byBjb29yZGluYXRlcyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXF1YWxzKGFub3RoZXJDb29yZGluYXRlOiBDb29yZGluYXRlKTogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBtYXAgcG9pbnQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b01hcFBvaW50KCk6IE1hcFBvaW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgdGhlIHVud3JhcHBlZCBtYXAgcG9pbnQgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b1Vud3JhcHBlZE1hcFBvaW50KCk6IE1hcFBvaW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHZhbHVlcyB0aGF0IGRlZmluZSBjb250ZW50IHBhZGRpbmcgd2l0aGluIHRoZSBtYXAgdmlldyBmcmFtZS5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgUGFkZGluZyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHBhZGRpbmcgb2JqZWN0LCBhbmQgaW5pdGlhbGl6ZXMgaXRzIGluc2V0IG1hcmdpbiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHRvcCBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbVxyXG4gICAgICAgICAqIHRoZSB0b3AgZWRnZS5cclxuICAgICAgICAgKiBAcGFyYW0gcmlnaHQgVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb21cclxuICAgICAgICAgKiB0aGUgcmlnaHQgZWRnZS5cclxuICAgICAgICAgKiBAcGFyYW0gYm90dG9tIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tXHJcbiAgICAgICAgICogdGhlIGxlZnQgZWRnZS5cclxuICAgICAgICAgKiBAcGFyYW0gbGVmdCBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbVxyXG4gICAgICAgICAqIHRoZSBsZWZ0IGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IodG9wPzogbnVtYmVyLCByaWdodD86IG51bWJlciwgYm90dG9tPzogbnVtYmVyLCBsZWZ0PzogbnVtYmVyKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgcGFkZGluZyBvYmplY3QsIGFuZCBpbml0aWFsaXplcyBpdHMgaW5zZXQgbWFyZ2luIHByb3BlcnRpZXMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgbGl0ZXJhbCBvZiBpbnNldCBtYXJnaW4gcHJvcGVydGllc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBQYWRkaW5nQ29uc3RydWN0b3JPcHRpb25zKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbSB0aGUgYm90dG9tIGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm90dG9tOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb20gdGhlIGxlZnQgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZWZ0OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb20gdGhlIHJpZ2h0IGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmlnaHQ6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW1vdW50IG9mIHBhZGRpbmcsIGluIENTUyBwaXhlbHMsIHRvIGluc2V0IHRoZSBtYXAgZnJvbSB0aGUgdG9wIGVkZ2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9wOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIFBhZGRpbmdDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tIHRoZSBib3R0b20gZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBib3R0b20/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGFtb3VudCBvZiBwYWRkaW5nLCBpbiBDU1MgcGl4ZWxzLCB0byBpbnNldCB0aGUgbWFwIGZyb20gdGhlIGxlZnQgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsZWZ0PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tIHRoZSByaWdodCBlZGdlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJpZ2h0PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2YgcGFkZGluZywgaW4gQ1NTIHBpeGVscywgdG8gaW5zZXQgdGhlIG1hcCBmcm9tIHRoZSB0b3AgZWRnZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0b3A/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYmFzZSBhbm5vdGF0aW9uIG9iamVjdCwgdXNlZCBmb3IgY3JlYXRpbmcgY3VzdG9tIGFubm90YXRpb25zLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBBbm5vdGF0aW9uIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IGFubm90YXRpb24gZ2l2ZW4gaXRzIGxvY2F0aW9uIGFuZCBpbml0aWFsaXphdGlvbiBvcHRpb25zLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGUgVGhlIGNvb3JkaW5hdGUgYXQgd2hpY2ggdGhpcyBhbm5vdGF0aW9uIHNob3VsZCBhcHBlYXIuXHJcbiAgICAgICAgICogQHBhcmFtIGZhY3RvcnkgQSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIERPTSBlbGVtZW50IHVzZWQgdG9cclxuICAgICAgICAgKiByZXByZXNlbnQgdGhpcyBhbm5vdGF0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEEgaGFzaCBvZiBwcm9wZXJ0aWVzIHdpdGggd2hpY2ggdG8gaW5pdGlhbGl6ZSB0aGUgYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAgICAgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZSxcclxuICAgICAgICAgICAgZmFjdG9yeTogKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIG9wdGlvbnM6IEFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMpID0+IEVsZW1lbnQsXHJcbiAgICAgICAgICAgIG9wdGlvbnM/OiBBbm5vdGF0aW9uQ29uc3RydWN0b3JPcHRpb25zLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBoYW5kbGUgZXZlbnRzIHRyaWdnZXJlZCBieSB1c2VyIGludGVyYWN0aW9uc1xyXG4gICAgICAgICAqIHdpdGggYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gdHlwZSBUaGUgZXZlbnQgdHlwZSBvZiBpbnRlcmVzdCAoZS5nLiwgXCJzZWxlY3RcIikuXHJcbiAgICAgICAgICogQHBhcmFtIGxpc3RlbmVyIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBpbnZva2UuIGxpc3RlbmVyIGlzIHBhc3NlZCBhblxyXG4gICAgICAgICAqIGFubm90YXRpb24gZXZlbnQgYXMgaXRzIHNvbGUgYXJndW1lbnQuXHJcbiAgICAgICAgICogQHBhcmFtIHRoaXNPYmplY3QgQW4gb2JqZWN0IHRvIGJlIHNldCBhcyB0aGUgdGhpcyBrZXl3b3JkIG9uIHRoZVxyXG4gICAgICAgICAqIGxpc3RlbmVyIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI8VD4oXHJcbiAgICAgICAgICAgIHR5cGU6IEFubm90YXRpb25FdmVudFR5cGUsXHJcbiAgICAgICAgICAgIGxpc3RlbmVyOiAodGhpczogVCwgZXZlbnQ6IEV2ZW50QmFzZTxNYXA+KSA9PiB2b2lkLFxyXG4gICAgICAgICAgICB0aGlzT2JqZWN0PzogVCxcclxuICAgICAgICApOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFkZHMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gaGFuZGxlIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdXNlciBpbnRlcmFjdGlvbnNcclxuICAgICAgICAgKiB3aXRoIGFubm90YXRpb25zLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHR5cGUgVGhlIGV2ZW50IHR5cGUgb2YgaW50ZXJlc3QgKGUuZy4sIFwic2VsZWN0XCIpLlxyXG4gICAgICAgICAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVtb3ZlLlxyXG4gICAgICAgICAqIEBwYXJhbSB0aGlzT2JqZWN0IEFuIG9iamVjdCB0byBiZSBzZXQgYXMgdGhlIHRoaXMga2V5d29yZCBvbiB0aGUgbGlzdGVuZXJcclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyPFQ+KFxyXG4gICAgICAgICAgICB0eXBlOiBBbm5vdGF0aW9uRXZlbnRUeXBlLFxyXG4gICAgICAgICAgICBsaXN0ZW5lcjogKHRoaXM6IFQsIGV2ZW50OiBFdmVudEJhc2U8TWFwPikgPT4gdm9pZCxcclxuICAgICAgICAgICAgdGhpc09iamVjdD86IFQsXHJcbiAgICAgICAgKTogdm9pZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb25zdGFudCB2YWx1ZXMgdXNlZCB0byBwcm92aWRlIGEgaGludCB0aGUgbWFwIHVzZXMgdG8gcHJpb3JpdGl6ZVxyXG4gICAgICAgICAqIGRpc3BsYXlpbmcgYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IERpc3BsYXlQcmlvcml0eToge1xyXG4gICAgICAgICAgICByZWFkb25seSBMb3c6IG51bWJlcjtcclxuICAgICAgICAgICAgcmVhZG9ubHkgSGlnaDogbnVtYmVyO1xyXG4gICAgICAgICAgICByZWFkb25seSBSZXF1aXJlZDogbnVtYmVyO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29uc3RhbnRzIGluZGljYXRpbmcgaG93IHRvIGludGVycHJldCB0aGUgY29sbGlzaW9uIGZyYW1lIHJlY3RhbmdsZSBvZlxyXG4gICAgICAgICAqIGFuIGFubm90YXRpb24gdmlldy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgcmVhZG9ubHkgQ29sbGlzaW9uTW9kZToge1xyXG4gICAgICAgICAgICByZWFkb25seSBSZWN0YW5nbGU6IHN0cmluZztcclxuICAgICAgICAgICAgcmVhZG9ubHkgQ2lyY2xlOiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHJlYWRvbmx5IE5vbmU6IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIF9pbXBsOiBhbnk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbm5vdGF0aW9uJ3MgY29vcmRpbmF0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlOiBDb29yZGluYXRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXAgdG8gd2hpY2ggdGhlIGFubm90YXRpb24gd2FzIGFkZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRvbmx5IG1hcDogTWFwIHwgbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW5ub3RhdGlvbidzIGVsZW1lbnQgaW4gdGhlIERPTS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERhdGEgdGhhdCB5b3UgZGVmaW5lIHRoYXQgaXMgYXNzaWduZWQgdG8gdGhlIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YTogYW55O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0ZXh0IHRvIGRpc3BsYXkgaW4gdGhlIGFubm90YXRpb24ncyBjYWxsb3V0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpdGxlOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBhcyBhIHN1YnRpdGxlLCBvbiB0aGUgc2Vjb25kIGxpbmUgb2YgYW4gYW5ub3RhdGlvbidzXHJcbiAgICAgICAgICogY2FsbG91dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJ0aXRsZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIG9mZnNldCB0aGF0IGNoYW5nZXMgdGhlIGFubm90YXRpb24ncyBkZWZhdWx0IGFuY2hvciBwb2ludC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhbmNob3JPZmZzZXQ6IERPTVBvaW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQ1NTIGFuaW1hdGlvbiB0aGF0IHJ1bnMgd2hlbiB0aGUgYW5ub3RhdGlvbiBhcHBlYXJzIG9uIHRoZSBtYXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXBwZWFyYW5jZUFuaW1hdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbnVtZXJpYyBoaW50IHRoZSBtYXAgdXNlcyB0byBwcmlvcml0aXplIGRpc3BsYXlpbmcgYW5ub3RhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzcGxheVByaW9yaXR5OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BhY2luZyBhZGRlZCBhcm91bmQgdGhlIGFubm90YXRpb24gd2hlbiBzaG93aW5nIGl0ZW1zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhZGRpbmc6IFBhZGRpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRlc2lyZWQgZGltZW5zaW9ucyBvZiB0aGUgYW5ub3RhdGlvbiwgaW4gQ1NTIHBpeGVscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyBpZiB0aGUgYW5ub3RhdGlvbiBpcyB2aXNpYmxlIG9yIGhpZGRlbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2aXNpYmxlOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgaWYgdGhlIGFubm90YXRpb24gc2hvdWxkIGJlIGFuaW1hdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFuaW1hdGVzOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgdXNlciBjYW4gZHJhZyB0aGUgYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkcmFnZ2FibGU6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBhbm5vdGF0aW9uIGlzIHNlbGVjdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdGVkOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgYW5ub3RhdGlvbiByZXNwb25kcyB0byB1c2VyXHJcbiAgICAgICAgICogaW50ZXJhY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGRlbGVnYXRlIHRoYXQgZW5hYmxlcyB5b3UgdG8gY3VzdG9taXplIHRoZSBhbm5vdGF0aW9uJ3MgY2FsbG91dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0OiBBbm5vdGF0aW9uQ2FsbG91dERlbGVnYXRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIG9mZnNldCB0aGF0IGNoYW5nZXMgdGhlIGFubm90YXRpb24gY2FsbG91dCdzIGRlZmF1bHQgcGxhY2VtZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRPZmZzZXQ6IERPTVBvaW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciBhIGNhbGxvdXQgc2hvdWxkIGJlIHNob3duLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRFbmFibGVkOiBib29sZWFuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGFubm90YXRpb25zIHRoYXQgYXJlIGdyb3VwZWQgdG9nZXRoZXIgaW4gYSBjbHVzdGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1lbWJlckFubm90YXRpb25zOiBBbm5vdGF0aW9uW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gaWRlbnRpZmVyIHVzZWQgZm9yIGdyb3VwaW5nIGFubm90YXRpb25zIGludG8gdGhlIHNhbWUgY2x1c3Rlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbHVzdGVyaW5nSWRlbnRpZmllcjogc3RyaW5nIHwgbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1vZGUgdGhhdCBkZXRlcm1pbmVzIHRoZSBzaGFwZSBvZiB0aGUgY29sbGlzaW9uIGZyYW1lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbGxpc2lvbk1vZGU6IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIG9wdGlvbnMgZm9yIGluaXRpYWxpemluZyBhbm5vdGF0aW9uIGZlYXR1cmVzLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgQW5ub3RhdGlvbkNvbnN0cnVjdG9yT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBpbiB0aGUgYW5ub3RhdGlvbidzIGNhbGxvdXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGl0bGU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRleHQgdG8gZGlzcGxheSBhcyBhIHN1YnRpdGxlIG9uIHRoZSBzZWNvbmQgbGluZSBvZiBhbiBhbm5vdGF0aW9uJ3NcclxuICAgICAgICAgKiBjYWxsb3V0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1YnRpdGxlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFjY2Vzc2liaWxpdHkgdGV4dCBmb3IgdGhlIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERhdGEgeW91IGRlZmluZSB0aGF0IGlzIGFzc2lnbmVkIHRvIHRoZSBhbm5vdGF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRhdGE/OiBhbnk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSB1c2VyIGNhbiBkcmFnIHRoZSBhbm5vdGF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRyYWdnYWJsZT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyBpZiB0aGUgYW5ub3RhdGlvbiBpcyB2aXNpYmxlIG9yIGhpZGRlbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICB2aXNpYmxlPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGFubm90YXRpb24gcmVzcG9uZHMgdG8gdXNlclxyXG4gICAgICAgICAqIGludGVyYWN0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgYW5ub3RhdGlvbiBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIGEgY2FsbG91dCBzaG91bGQgYmUgc2hvd24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dEVuYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgaWYgdGhlIGFubm90YXRpb24gc2hvdWxkIGJlIGFuaW1hdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFuaW1hdGVzPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIENTUyBhbmltYXRpb24gdGhhdCBydW5zIHdoZW4gdGhlIGFubm90YXRpb24gYXBwZWFycyBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGFwcGVhcmFuY2VBbmltYXRpb24/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9mZnNldCBpbiBDU1MgcGl4ZWxzIG9mIHRoZSBlbGVtZW50IGZyb20gdGhlIGJvdHRvbSBjZW50ZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYW5jaG9yT2Zmc2V0PzogRE9NUG9pbnQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9mZnNldCBpbiBDU1MgcGl4ZWxzIG9mIGEgY2FsbG91dCBmcm9tIHRoZSB0b3AgY2VudGVyIG9mIHRoZSBlbGVtZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRPZmZzZXQ/OiBET01Qb2ludCB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGRlbGVnYXRlIHRoYXQgZW5hYmxlcyB5b3UgdG8gY3VzdG9taXplIHRoZSBhbm5vdGF0aW9uJ3MgY2FsbG91dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0PzogQW5ub3RhdGlvbkNhbGxvdXREZWxlZ2F0ZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGVzaXJlZCBkaW1lbnNpb25zIG9mIHRoZSBhbm5vdGF0aW9uLCBpbiBDU1MgcGl4ZWxzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNpemU/OiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBoaW50IHRoZSBtYXAgdXNlcyB0byBwcmlvcml0aXplIGRpc3BsYXlpbmcgdGhlIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzcGxheVByaW9yaXR5PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwYWNpbmcgYWRkZWQgYXJvdW5kIHRoZSBhbm5vdGF0aW9uIHdoZW4gc2hvd2luZyBpdGVtcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwYWRkaW5nPzogUGFkZGluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1vZGUgdGhhdCBkZXRlcm1pbmVzIHRoZSBzaGFwZSBvZiB0aGUgY29sbGlzaW9uIGZyYW1lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbGxpc2lvbk1vZGU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gaWRlbnRpZmVyIHVzZWQgZm9yIGdyb3VwaW5nIGFubm90YXRpb25zIGludG8gdGhlIHNhbWUgY2x1c3Rlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbHVzdGVyaW5nSWRlbnRpZmllcj86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ldGhvZHMgZm9yIGN1c3RvbWl6aW5nIHRoZSBiZWhhdmlvciBhbmQgYXBwZWFyYW5jZSBvZiBhbiBhbm5vdGF0aW9uIGNhbGxvdXQuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBBbm5vdGF0aW9uQ2FsbG91dERlbGVnYXRlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgcG9pbnQgZGV0ZXJtaW5pbmcgdGhlIGNhbGxvdXQncyBhbmNob3Igb2Zmc2V0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRBbmNob3JPZmZzZXRGb3JBbm5vdGF0aW9uPyhhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLCBzaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0pOiBET01Qb2ludDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNhbGxvdXQgc2hvdWxkIGFwcGVhciBmb3IgYW4gYW5ub3RhdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0U2hvdWxkQXBwZWFyRm9yQW5ub3RhdGlvbj8oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBjYWxsb3V0IHNob3VsZCBhbmltYXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRTaG91bGRBbmltYXRlRm9yQW5ub3RhdGlvbj8oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIENTUyBhbmltYXRpb24gdXNlZCB3aGVuIHRoZSBjYWxsb3V0IGFwcGVhcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2FsbG91dEFwcGVhcmFuY2VBbmltYXRpb25Gb3JBbm5vdGF0aW9uPyhhbm5vdGF0aW9uOiBBbm5vdGF0aW9uKTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgY3VzdG9tIGNvbnRlbnQgZm9yIHRoZSBjYWxsb3V0IGJ1YmJsZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0Q29udGVudEZvckFubm90YXRpb24/KGFubm90YXRpb246IEFubm90YXRpb24pOiBFbGVtZW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYW4gZWxlbWVudCByZXByZXNlbnRpbmcgYSBjdXN0b20gY2FsbG91dC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYWxsb3V0RWxlbWVudEZvckFubm90YXRpb24/KGFubm90YXRpb246IEFubm90YXRpb24pOiBFbGVtZW50O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYW4gZWxlbWVudCB1c2VkIGFzIGEgY3VzdG9tIGFjY2Vzc29yeSBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZVxyXG4gICAgICAgICAqIGNhbGxvdXQgY29udGVudCBhcmVhLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRMZWZ0QWNjZXNzb3J5Rm9yQW5ub3RhdGlvbj8oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IEVsZW1lbnQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhbiBlbGVtZW50IHVzZWQgYXMgYSBjdXN0b20gYWNjZXNzb3J5IG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZVxyXG4gICAgICAgICAqIGNhbGxvdXQgY29udGVudCBhcmVhLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGxvdXRSaWdodEFjY2Vzc29yeUZvckFubm90YXRpb24/KGFubm90YXRpb246IEFubm90YXRpb24pOiBFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBjdXN0b21pemVkIGFubm90YXRpb24gd2l0aCBpbWFnZSByZXNvdXJjZXMgdGhhdCB5b3UgcHJvdmlkZS5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgSW1hZ2VBbm5vdGF0aW9uIGV4dGVuZHMgQW5ub3RhdGlvbiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgYW4gaW1hZ2UgYW5ub3RhdGlvbiB3aXRoIGEgVVJMIHRvIGl0cyBpbWFnZSBhbmQgYSBjb29yZGluYXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsIG9wdGlvbnM6IEltYWdlQW5ub3RhdGlvbkNvbnN0cnVjdG9yT3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyBvcHRpb25zIGZvciBpbml0aWFsaXppbmcgYW4gaW1hZ2UgYW5ub3RhdGlvbi5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIEltYWdlQW5ub3RhdGlvbkNvbnN0cnVjdG9yT3B0aW9ucyBleHRlbmRzIEFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIG9iamVjdCBjb250YWluaW5nIFVSTHMgZm9yIHRoZSBpbWFnZSBhc3NldHMgaW4gbXVsdGlwbGUgcmVzb2x1dGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXJsOiB7XHJcbiAgICAgICAgICAgIDE6IHN0cmluZztcclxuICAgICAgICAgICAgMj86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgMz86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hcmtlciBhbm5vdGF0aW9uIGF0IHRoZSBjb29yZGluYXRlIGxvY2F0aW9uIHdpdGggcHJvdmlkZWQgb3B0aW9ucy5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgTWFya2VyQW5ub3RhdGlvbiBleHRlbmRzIEFubm90YXRpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBtYXJrZXIgYW5ub3RhdGlvbiBhdCB0aGUgY29vcmRpbmF0ZSBsb2NhdGlvbiB3aXRoIHByb3ZpZGVkIG9wdGlvbnMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZSBUaGUgY29vcmRpbmF0ZSBhdCB3aGljaCB0aGlzIGFubm90YXRpb24gc2hvdWxkIGFwcGVhci5cclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIGhhc2ggb2YgcHJvcGVydGllcyB3aXRoIHdoaWNoIHRvIGluaXRpYWxpemUgdGhlIGFubm90YXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29vcmRpbmF0ZTogQ29vcmRpbmF0ZSwgb3B0aW9ucz86IE1hcmtlckFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHRoZSBiZWhhdmlvciBvZiB0aGUgc3VidGl0bGUncyB2aXNpYmlsaXR5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN1YnRpdGxlVmlzaWJpbGl0eTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgdmFsdWUgdGhhdCBkZXRlcm1pbmVzIHRoZSBiZWhhdmlvciBvZiB0aGUgdGl0bGUncyB2aXNpYmlsaXR5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRpdGxlVmlzaWJpbGl0eTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIHRoZSBiYWxsb29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGZpbGwgY29sb3Igb2YgdGhlIGdseXBoLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdseXBoQ29sb3I6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBtYXJrZXIgYmFsbG9vbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnbHlwaFRleHQ6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaW1hZ2UgdG8gZGlzcGxheSBpbiB0aGUgbWFya2VyIGJhbGxvb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2x5cGhJbWFnZTogb2JqZWN0IHwgbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaW1hZ2UgdG8gZGlzcGxheSBpbiB0aGUgYmFsbG9vbiB3aGVuIHRoZSBtYXJrZXIgaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWRHbHlwaEltYWdlOiBvYmplY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb3B0aW9ucyB0aGF0IGluaXRpYWxpemUgYSBtYXJrZXIgYW5ub3RhdGlvbi5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIE1hcmtlckFubm90YXRpb25Db25zdHJ1Y3Rvck9wdGlvbnMgZXh0ZW5kcyBBbm5vdGF0aW9uQ29uc3RydWN0b3JPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgYmFsbG9vbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb2xvcj86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZmlsbCBjb2xvciBvZiB0aGUgZ2x5cGguXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2x5cGhDb2xvcj86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdGV4dCB0byBkaXNwbGF5IGluIHRoZSBtYXJrZXIgYmFsbG9vbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnbHlwaFRleHQ/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGltYWdlIHRvIGRpc3BsYXkgaW4gdGhlIG1hcmtlciBiYWxsb29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdseXBoSW1hZ2U/OlxyXG4gICAgICAgICAgICB8IHtcclxuICAgICAgICAgICAgMTogc3RyaW5nO1xyXG4gICAgICAgICAgICAyPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGltYWdlIHRvIGRpc3BsYXkgaW4gdGhlIGJhbGxvb24gd2hlbiB0aGUgbWFya2VyIGlzIHNlbGVjdGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlbGVjdGVkR2x5cGhJbWFnZT86IG9iamVjdCB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB0aGUgYmVoYXZpb3Igb2YgdGhlIHN1YnRpdGxlJ3MgdmlzaWJpbGl0eS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJ0aXRsZVZpc2liaWxpdHk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSB2YWx1ZSB0aGF0IGRldGVybWluZXMgdGhlIGJlaGF2aW9yIG9mIHRoZSB0aXRsZSdzIHZpc2liaWxpdHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGl0bGVWaXNpYmlsaXR5Pzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGUgQW5ub3RhdGlvbkV2ZW50VHlwZSA9IFwic2VsZWN0XCIgfCBcImRlc2VsZWN0XCIgfCBcImRyYWctc3RhcnRcIiB8IFwiZHJhZ2dpbmdcIiB8IFwiZHJhZy1lbmRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIGFic3RyYWN0IGJhc2Ugb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgbWV0aG9kcyBhbmQgYXR0cmlidXRlcyBmb3IgbWFwIG92ZXJsYXlzLlxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCBjbGFzcyBPdmVybGF5IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTdGFydHMgbGlzdGVuaW5nIGZvciB0aGUgc3BlY2lmaWVkIHR5cGUgb2YgZXZlbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiBPdmVybGF5RXZlbnRUeXBlLCBsaXN0ZW5lcjogKGV2ZW50OiBFdmVudEJhc2U8dGhpcz4pID0+IHZvaWQsIHRoaXNPYmplY3Q/OiBhbnkpOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFN0b3BzIGxpc3RlbmluZyBmb3IgdGhlIHNwZWNpZmllZCB0eXBlIG9mIGV2ZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZTogT3ZlcmxheUV2ZW50VHlwZSwgbGlzdGVuZXI6IChldmVudDogRXZlbnRCYXNlPHRoaXM+KSA9PiB2b2lkLCB0aGlzT2JqZWN0PzogYW55KTogdm9pZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDdXN0b20gZGF0YSB0byBhc3NvY2lhdGUgd2l0aCB0aGlzIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YTogb2JqZWN0O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgaWYgYW4gb3ZlcmxheSBpcyB2aXNpYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZpc2libGU6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBvdmVybGF5IHJlc3BvbmRzIHRvIHVzZXIgaW50ZXJhY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgb3ZlcmxheSBpcyBzZWxlY3RlZC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWxlY3RlZDogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTdHlsZSBwcm9wZXJ0aWVzIHRvIGFwcGx5IHRvIHRoZSBvdmVybGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0eWxlOiBTdHlsZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFwIHRvIHdoaWNoIHRoZSBvdmVybGF5IGlzIGFkZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlYWRvbmx5IG1hcDogTWFwIHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgY2lyY3VsYXIgb3ZlcmxheSB3aXRoIGEgY29uZmlndXJhYmxlIHJhZGl1cywgY2VudGVyZWQgb24gYSBzcGVjaWZpY1xyXG4gICAgICogZ2VvZ3JhcGhpYyBjb29yZGluYXRlLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBDaXJjbGVPdmVybGF5IGV4dGVuZHMgT3ZlcmxheSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIGNpcmNsZSBvdmVybGF5IHdpdGggYSBjZW50ZXIgY29vcmRpbmF0ZSwgcmFkaXVzLCBhbmQgc3R5bGUgb3B0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBjb29yZGluYXRlIFRoZSBjb29yZGluYXRlIG9mIHRoZSBjaXJjbGUncyBjZW50ZXIuXHJcbiAgICAgICAgICogQHBhcmFtIHJhZGl1cyBUaGUgY2lyY2xlJ3MgcmFkaXVzLCBpbiBtZXRlcnMuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IGxpdGVyYWwgb2YgT3ZlcmxheSBwcm9wZXJ0aWVzIHVzZWQgdG8gaW5pdGlhbGl6ZVxyXG4gICAgICAgICAqIHRoZSBjaXJjbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29vcmRpbmF0ZTogQ29vcmRpbmF0ZSwgcmFkaXVzOiBudW1iZXIsIG9wdGlvbnM/OiBTdHlsZXNPdmVybGF5T3B0aW9ucyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIGNpcmNsZSBvdmVybGF5J3MgY2VudGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvb3JkaW5hdGU6IENvb3JkaW5hdGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNpcmNsZSBvdmVybGF5J3MgcmFkaXVzIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICByYWRpdXM6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJsYXkgbWFkZSB1cCBvZiBjb25uZWN0ZWQgbGluZSBzZWdtZW50cyB0aGF0IGRvIG5vdCBmb3JtIGEgY2xvc2VkIHNoYXBlLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBQb2x5bGluZU92ZXJsYXkgZXh0ZW5kcyBPdmVybGF5IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgcG9seWxpbmUgb3ZlcmxheSB3aXRoIGNvb3JkaW5hdGUgcG9pbnRzIGFuZCBzdHlsZSBvcHRpb25zLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHBvaW50cyBUaGUgcG9pbnRzIGluIHRoZSBwb2x5bGluZSBhcyBhbiBhcnJheSBvZiBDb29yZGluYXRlXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IGxpdGVyYWwgb2Ygc3R5bGUgb3B0aW9ucyB3aXRoIHdoaWNoIHRvIGluaXRpYWxpemVcclxuICAgICAgICAgKiB0aGUgcG9seWxpbmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IocG9pbnRzOiBDb29yZGluYXRlW10sIG9wdGlvbnM/OiBTdHlsZXNPdmVybGF5T3B0aW9ucyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwb2ludHMgdGhhdCBkZWZpbmUgdGhlIHBvbHlsaW5lIG92ZXJsYXkncyBzaGFwZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludHM6IENvb3JkaW5hdGVbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJsYXkgbWFkZSB1cCBvZiBvbmUgb3IgbW9yZSBwb2ludHMsIGZvcm1pbmcgYSBjbG9zZWQgc2hhcGUuXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIFBvbHlnb25PdmVybGF5IGV4dGVuZHMgT3ZlcmxheSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHBvbHlnb24gb3ZlcmxheSB3aXRoIGFuIGFycmF5IG9mIHBvaW50cyBhbmQgc3R5bGUgb3B0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBwb2ludHMgVGhlIHBvaW50cyBpbiB0aGUgcG9seWdvbiBhcyBhbiBhcnJheSBvZiBhcnJheXMgb2ZcclxuICAgICAgICAgKiBDb29yZGluYXRlLCBvciBhbiBhcnJheSBvZiBDb29yZGluYXRlLiBJZiBpdCdzIHRoZSBsYXR0ZXIsXHJcbiAgICAgICAgICogdGhlIGFycmF5IGlzIGF1dG8td3JhcHBlZCBieSBhbiBlbmNsb3NpbmcgYXJyYXkuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IGxpdGVyYWwgb2Ygb3B0aW9ucyB3aXRoIHdoaWNoIHRvIGluaXRpYWxpemUgdGhlXHJcbiAgICAgICAgICogcG9seWdvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwb2ludHM6IENvb3JkaW5hdGVbXSwgb3B0aW9ucz86IFN0eWxlc092ZXJsYXlPcHRpb25zKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPbmUgb3IgbW9yZSBhcnJheXMgb2YgY29vcmRpbmF0ZXMgdGhhdCBkZWZpbmUgdGhlIHBvbHlnb24gb3ZlcmxheSBzaGFwZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludHM6IENvb3JkaW5hdGVbXTtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgT3ZlcmxheU9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEN1c3RvbSBkYXRhIHRvIGFzc29jaWF0ZSB3aXRoIHRoaXMgb3ZlcmxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkYXRhPzogb2JqZWN0IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgaWYgYW4gb3ZlcmxheSBpcyB2aXNpYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZpc2libGU/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgb3ZlcmxheSByZXNwb25kcyB0byB1c2VyXHJcbiAgICAgICAgICogaW50ZXJhY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZW5hYmxlZD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIG92ZXJsYXkgaXMgc2VsZWN0ZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VsZWN0ZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JzZXJ2YWJsZSBzZXQgb2Ygc3R5bGUgYXR0cmlidXRlcyBmb3IgYW4gb3ZlcmxheS5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIFN0eWxlc092ZXJsYXlPcHRpb25zIGV4dGVuZHMgT3ZlcmxheU9wdGlvbnMge1xyXG4gICAgICAgIHN0eWxlPzogU3R5bGUgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdHlwZSBPdmVybGF5RXZlbnRUeXBlID0gXCJzZWxlY3RcIiB8IFwiZGVzZWxlY3RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIGEgbWFwIHJlZ2lvbi5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgQ29vcmRpbmF0ZVNwYW4ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgY29vcmRpbmF0ZSBzcGFuIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgbGF0aXR1ZGUgYW5kXHJcbiAgICAgICAgICogbG9uZ2l0dWRlIGRlbHRhcy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBsYXRpdHVkZURlbHRhIFRoZSBhbW91bnQgb2Ygbm9ydGgtdG8tc291dGggZGlzdGFuY2UgKG1lYXN1cmVkIGluXHJcbiAgICAgICAgICogZGVncmVlcykgdG8gZGlzcGxheSBvbiB0aGUgbWFwLlxyXG4gICAgICAgICAqIEBwYXJhbSBsb25naXR1ZGVEZWx0YSBUaGUgYW1vdW50IG9mIGVhc3QtdG8td2VzdCBkaXN0YW5jZSAobWVhc3VyZWQgaW5cclxuICAgICAgICAgKiBkZWdyZWVzKSB0byBkaXNwbGF5IGZvciB0aGUgbWFwIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihsYXRpdHVkZURlbHRhOiBudW1iZXIsIGxvbmdpdHVkZURlbHRhOiBudW1iZXIpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBhbW91bnQgb2Ygbm9ydGgtdG8tc291dGggZGlzdGFuY2UgKG1lYXN1cmVkIGluIGRlZ3JlZXMpIHRvIGRpc3BsYXkgb25cclxuICAgICAgICAgKiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhdGl0dWRlRGVsdGE6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYW1vdW50IG9mIGVhc3QtdG8td2VzdCBkaXN0YW5jZSAobWVhc3VyZWQgaW4gZGVncmVlcykgdG8gZGlzcGxheSBmb3JcclxuICAgICAgICAgKiB0aGUgbWFwIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb25naXR1ZGVEZWx0YTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJldHVybnMgYSBjb3B5IG9mIHRoZSBjb29yZGluYXRlIHNwYW4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weSgpOiBDb29yZGluYXRlU3BhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHR3byBzcGFucyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXF1YWxzKGFub3RoZXJTcGFuOiBDb29yZGluYXRlU3Bhbik6IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVybGF5IHRoYXQgY292ZXJzIGFuIGFyZWEgb2YgdGhlIG1hcCB3aXRoIGJpdG1hcCB0aWxlcy5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgVGlsZU92ZXJsYXkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSB0aWxlIG92ZXJsYXkgd2l0aCBhIFVSTCB0ZW1wbGF0ZSBhbmQgc3R5bGUgb3B0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcih1cmxUZW1wbGF0ZTogc3RyaW5nIHwgVVJMVGVtcGxhdGVDYWxsYmFjaywgb3B0aW9ucz86IFRpbGVPdmVybGF5Q29uc3RydWN0b3JPcHRpb25zKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIHN0cmluZywgb3IgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc3RyaW5nLCB3aXRoIGEgVVJMIHRoYXRcclxuICAgICAgICAgKiBwcm92aWRlcyB0aGUgcmVxdWVzdGVkIHRpbGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdXJsVGVtcGxhdGU6IHN0cmluZyB8IFVSTFRlbXBsYXRlQ2FsbGJhY2s7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVsb2FkcyB0aGUgdGlsZSBvdmVybGF5IGZvciB0aGUgZGlzcGxheWVkIG1hcCByZWdpb24gd2l0aCB0aGUgbGF0ZXN0XHJcbiAgICAgICAgICogZGF0YSB2YWx1ZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVsb2FkKCk6IHZvaWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWluaW11bSB6b29tIGxldmVsIG9mIHRoZSBvdmVybGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pbmltdW1aOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWF4aW11bSB6b29tIGxldmVsIG9mIHRoZSBvdmVybGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1heGltdW1aOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3BhY2l0eSBsZXZlbCBvZiB0aGUgb3ZlcmxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcGFjaXR5OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3VzdG9tIGRhdGEgdXNlZCB0byBwb3B1bGF0ZSB0aGUgVVJMIHRlbXBsYXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRhdGE6IG9iamVjdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dHJpYnV0ZXMgdXNlZCB3aGVuIGluaXRpYWxpemluZyBhIHRpbGUgb3ZlcmxheSwgaW5jbHVkaW5nIG1pbmltdW0gYW5kXHJcbiAgICAgKiBtYXhpbXVtIHpvb20sIG9wYWNpdHksIGFuZCBjdXN0b20gZGF0YS5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIFRpbGVPdmVybGF5Q29uc3RydWN0b3JPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBNaW5pbXVtIHpvb20gbGV2ZWwgb2YgdGhlIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWluaW11bVo/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogTWF4aW11bSB6b29tIGxldmVsIG9mIHRoZSBvdmVybGF5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1heGltdW1aPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE9wYWNpdHkgbGV2ZWwgb2YgdGhlIG92ZXJsYXkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb3BhY2l0eT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDdXN0b20gZGF0YSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBVUkwgdGVtcGxhdGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YT86IG9iamVjdCB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlIFVSTFRlbXBsYXRlQ2FsbGJhY2sgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgc2NhbGU6IG51bWJlciwgZGF0YTogb2JqZWN0KSA9PiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNldCBvZiBvYnNlcnZhYmxlIGF0dHJpYnV0ZXMgZm9yIG92ZXJsYXlzLCBpbmNsdWRpbmcgY29sb3IgYW5kIG9wYWNpdHkgb2ZcclxuICAgICAqIHN0cm9rZSBhbmQgZmlsbCwgYW5kIGxpbmUgc3R5bGVzLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBTdHlsZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBzdHlsZSBvYmplY3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucz86IFN0eWxlQ29uc3RydWN0b3JPcHRpb25zKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZmlsbCBjb2xvciBvZiBhIHNoYXBlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxDb2xvcjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcGFjaXR5IG9mIHRoZSBmaWxsIGNvbG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxPcGFjaXR5OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBydWxlIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIGEgcG9pbnQgaXMgaW5zaWRlIG9yIG91dHNpZGUgYSBwb2x5Z29uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxSdWxlOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0eWxlIHRvIHVzZSB3aGVuIGRyYXdpbmcgbGluZSBlbmRpbmdzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbmVDYXA6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBsaW5lIGFuZCBnYXAgbGVuZ3RocywgdXNlZCB0byBjcmVhdGUgYSBkYXNoZWQgbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lRGFzaDogbnVtYmVyW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG51bWJlciBvZiBDU1MgcGl4ZWxzIHRvIG9mZnNldCBkcmF3aW5nIG9mIGEgbGluZSdzIGRhc2ggcGF0dGVybi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lRGFzaE9mZnNldDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdHlsZSB0byB1c2Ugd2hlbiBkcmF3aW5nIGpvaW5zIGJldHdlZW4gbGluZSBzZWdtZW50cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lSm9pbjogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiBhIGxpbmUncyBzdHJva2UsIGluIENTUyBwaXhlbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZVdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0cm9rZSBjb2xvciBvZiBhIGxpbmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlQ29sb3I6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgb3BhY2l0eSBvZiB0aGUgc3Ryb2tlIGNvbG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0cm9rZU9wYWNpdHk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdW5pdCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB3aGVyZSBhIHN0cm9rZSBiZWdpbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlU3RhcnQ6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdW5pdCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB3aGVyZSBhIHN0cm9rZSBlbmRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0cm9rZUVuZDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBncmFkaWVudCB0byBhcHBseSBhbG9uZyB0aGUgbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lR3JhZGllbnQ6IExpbmVHcmFkaWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWwgdmFsdWVzIG9mIG9wdGlvbnMgZm9yIGFwcGx5aW5nIHN0eWxlIHRvIG92ZXJsYXlzLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgU3R5bGVDb25zdHJ1Y3Rvck9wdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBmaWxsIGNvbG9yIG9mIGEgc2hhcGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZmlsbENvbG9yPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcGFjaXR5IG9mIHRoZSBmaWxsIGNvbG9yLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZpbGxPcGFjaXR5PzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgcnVsZSBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciBhIHBvaW50IGlzIGluc2lkZSBvciBvdXRzaWRlIGEgcG9seWdvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmaWxsUnVsZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc3R5bGUgdG8gdXNlIHdoZW4gZHJhd2luZyBsaW5lIGVuZGluZ3MuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZUNhcD86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBsaW5lIGFuZCBnYXAgbGVuZ3RocywgdXNlZCB0byBjcmVhdGUgYSBkYXNoZWQgbGluZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW5lRGFzaD86IG51bWJlcltdIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2YgQ1NTIHBpeGVscyB0byBvZmZzZXQgZHJhd2luZyBvZiBhIGxpbmUncyBkYXNoIHBhdHRlcm4uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZURhc2hPZmZzZXQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0eWxlIHRvIHVzZSB3aGVuIGRyYXdpbmcgam9pbnMgYmV0d2VlbiBsaW5lIHNlZ21lbnRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbmVKb2luPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiBhIGxpbmUncyBzdHJva2UsIGluIENTUyBwaXhlbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGluZVdpZHRoPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdHJva2UgY29sb3Igb2YgYSBsaW5lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0cm9rZUNvbG9yPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcGFjaXR5IG9mIHRoZSBzdHJva2UgY29sb3IuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlT3BhY2l0eT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdW5pdCBkaXN0YW5jZSBhbG9uZyB0aGUgbGluZSB3aGVyZSBhIHN0cm9rZSBiZWdpbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3Ryb2tlU3RhcnQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHVuaXQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmUgd2hlcmUgYSBzdHJva2UgZW5kcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdHJva2VFbmQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGdyYWRpZW50IHRvIGFwcGx5IGFsb25nIHRoZSBsaW5lLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxpbmVHcmFkaWVudD86IExpbmVHcmFkaWVudCB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgbGluZSB0aGF0IGRpc3BsYXlzIHdpdGggYSBncmFkaWVudCBhbG9uZyB0aGUgbGVuZ3RoIG9mIHRoZSBsaW5lLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBMaW5lR3JhZGllbnQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBzdHlsZSB0aGF0IHJlbmRlcnMgYSBncmFkaWVudCBhbG9uZyB0aGUgbGVuZ3RoIG9mIGEgbGluZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIEEgSmF2YVNjcmlwdCBvYmplY3Qgd2l0aCB1bml0IGRpc3RhbmNlIHZhbHVlcyBhcyBrZXlzIHdpdGggbWF0Y2hlZCBDU1MgY29sb3JzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBvYmplY3QpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFkZHMgYSBjb2xvciB0cmFuc2l0aW9uIHBvaW50IHRvIHRoZSBncmFkaWVudC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIHVuaXQgZGlzdGFuY2UgYXQgd2hpY2ggdG8gYWRkIHRoZSBjb2xvci5cclxuICAgICAgICAgKiBAcGFyYW0gY29sb3IgVGhlIENTUyBjb2xvciBhdCB0aGUgdHJhbnNpdGlvbiBwb2ludC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZGRDb2xvclN0b3Aob2Zmc2V0OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFkZHMgYSBjb2xvciB0cmFuc2l0aW9uIGF0IHRoZSBpbmRleCBwb2ludCBpbiB0aGUgbGlzdCBvZiBwb2ludHMgd2l0aGluIGEgcG9seWxpbmUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaW5kZXggQSB2YWxpZCBpbmRleCBpbnRvIGEgcG9seWxpbmXigJlzIHBvaW50cy5cclxuICAgICAgICAgKiBAcGFyYW0gY29sb3IgVGhlIENTUyBjb2xvciBhdCB0aGUgaW5kZXggcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRkQ29sb3JTdG9wQXRJbmRleChpbmRleDogbnVtYmVyLCBjb2xvcjogc3RyaW5nKTogdm9pZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgZ2VvY29kZXIgdGhhdCBjb252ZXJ0cyBodW1hbi1yZWFkYWJsZSBhZGRyZXNzZXMgdG8gZ2VvZ3JhcGhpYyBjb29yZGluYXRlc1xyXG4gICAgICogYW5kIHZpY2UgdmVyc2EuXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIEdlb2NvZGVyIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0aWFsaXplIGEgZ2VvY29kZXIgb2JqZWN0IGFuZCBzZXQgb3B0aW9uYWwgbGFuZ3VhZ2UgYW5kIHVzZXIgbG9jYXRpb25cclxuICAgICAgICAgKiBwcm9wZXJ0aWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBHZW9jb2RlckNvbnN0cnVjdG9yT3B0aW9ucyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udmVydHMgYW4gYWRkcmVzcyB0byBnZW9ncmFwaGljIGNvb3JkaW5hdGVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxvb2t1cChcclxuICAgICAgICAgICAgcGxhY2U6IHN0cmluZyxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBkYXRhOiBHZW9jb2RlclJlc3BvbnNlKSA9PiB2b2lkLFxyXG4gICAgICAgICAgICBvcHRpb25zPzogR2VvY29kZXJMb29rdXBPcHRpb25zLFxyXG4gICAgICAgICk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb252ZXJ0cyBhIGdlb2dyYXBoaWMgY29vcmRpbmF0ZSB0byBhbiBhZGRyZXNzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGVcclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50cyxcclxuICAgICAgICAgKiBlcnJvciBvbiBmYWlsdXJlIGFuZCBkYXRhIG9uIHN1Y2Nlc3MuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAgICAgKiByZXZlcnNlIGdlb2NvZGVyLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJldmVyc2VMb29rdXAoXHJcbiAgICAgICAgICAgIGNvb3JkaW5hdGU6IENvb3JkaW5hdGUsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoZXJyb3I6IEVycm9yIHwgbnVsbCwgZGF0YTogR2VvY29kZXJSZXNwb25zZSkgPT4gdm9pZCxcclxuICAgICAgICAgICAgb3B0aW9ucz86IFBpY2s8R2VvY29kZXJDb25zdHJ1Y3Rvck9wdGlvbnMsIFwibGFuZ3VhZ2VcIj4sXHJcbiAgICAgICAgKTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbmNlbHMgdGhlIHBlbmRpbmcgbG9va3VwIG9yIHJldmVyc2UgbG9va3VwIHNwZWNpZmllZCBieSBpdHMgcmVxdWVzdCBJRC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBUaGUgcmVxdWVzdCBJRCBvZiB0aGUgbG9va3VwIG9yIHJldmVyc2VMb29rdXAgdG8gY2FuY2VsLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbmNlbChpZDogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZ2VvY29kZXIgc2hvdWxkIHJldHVybiByZXN1bHRzXHJcbiAgICAgICAgICogbmVhciB0aGUgdXNlcidzIGN1cnJlbnQgbG9jYXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZ2VvY29kZXIgc2hvdWxkIHJldHVybiByZXN1bHRzXHJcbiAgICAgICAgICogbmVhciB0aGUgdXNlcidzIGN1cnJlbnQgbG9jYXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0c1VzZXJMb2NhdGlvbjogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGl6YXRpb24gb3B0aW9ucyBmb3IgZ2VvY29kZXIgb2JqZWN0cy5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIEdlb2NvZGVyQ29uc3RydWN0b3JPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZ2VvY29kZXIgc2hvdWxkIHJldHVybiByZXN1bHRzXHJcbiAgICAgICAgICogbmVhciB0aGUgdXNlcidzIGN1cnJlbnQgbG9jYXRpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdlb2NvZGVyIHNob3VsZCByZXR1cm4gcmVzdWx0c1xyXG4gICAgICAgICAqIG5lYXIgdGhlIHVzZXIncyBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldHNVc2VyTG9jYXRpb24/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyB0aGF0IGNvbnN0cmFpbiBnZW9jb2RlciBsb29rdXAgcmVzdWx0cyB0byBhIHNwZWNpZmljIGFyZWEgb3Igc2V0IGFcclxuICAgICAqIGxhbmd1YWdlIGZvciByZXN1bHRzLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgR2VvY29kZXJMb29rdXBPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbGFuZ3VhZ2UgaW4gd2hpY2ggdG8gZGlzcGxheSB0aGUgbG9va3VwIHJlc3VsdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29vcmRpbmF0ZXMgdXNlZCB0byBjb25zdHJhaW4gdGhlIGxvb2t1cCByZXN1bHRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvb3JkaW5hdGU/OiBDb29yZGluYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgcmVnaW9uIGluIHdoaWNoIHRvIGNvbnN0cmFpbiBsb29rdXAgcmVzdWx0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb24/OiBDb29yZGluYXRlUmVnaW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbGlzdCBvZiBjb3VudHJpZXMgaW4gd2hpY2ggdG8gY29uc3RyYWluIHRoZSBsb29rdXAgcmVzdWx0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW1pdFRvQ291bnRyaWVzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHJlc3BvbnNlIGZyb20gYSBnZW9jb2RlciBsb29rdXAgb3IgcmV2ZXJzZSBsb29rdXAuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBHZW9jb2RlclJlc3BvbnNlIHtcclxuICAgICAgICByZXN1bHRzOiBQbGFjZVtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBwbGFjZSBvYmplY3QgcmV0dXJuZWQgZnJvbSBhIGdlb2NvZGVyIGxvb2t1cCBvciByZXZlcnNlIGxvb2t1cC5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIFBsYWNlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIGZvciB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYWRkcmVzcyBvZiB0aGUgcGxhY2UsIGZvcm1hdHRlZCB1c2luZyBpdHMgY291bnRyeSdzIGNvbnZlbnRpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGZvcm1hdHRlZEFkZHJlc3M6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZ2VvZ3JhcGhpYyByZWdpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb246IENvb3JkaW5hdGVSZWdpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNvdW50cnkgY29kZSBhc3NvY2lhdGVkIHdpdGggdGhlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvdW50cnlDb2RlOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGNhdGVnb3J5IG9mIHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludE9mSW50ZXJlc3RDYXRlZ29yeT86IFBvaW50T2ZJbnRlcmVzdENhdGVnb3J5IHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjb3VudHJ5IG9mIHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb3VudHJ5Pzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzdGF0ZSBvciBwcm92aW5jZSBvZiB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYWRtaW5pc3RyYXRpdmVBcmVhPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzaG9ydCBjb2RlIGZvciB0aGUgc3RhdGUgb3IgYXJlYS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhZG1pbmlzdHJhdGl2ZUFyZWFDb2RlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjaXR5IG9mIHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsb2NhbGl0eT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9zdGFsIGNvZGUgb2YgdGhlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvc3RDb2RlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBhcmVhIHdpdGhpbiB0aGUgbG9jYWxpdHkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3ViTG9jYWxpdHk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHN0cmVldCBuYW1lIGF0IHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aG9yb3VnaGZhcmU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG51bWJlciBvbiB0aGUgc3RyZWV0IGF0IHRoZSBwbGFjZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdWJUaG9yb3VnaGZhcmU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBjb21iaW5hdGlvbiBvZiB0aG9yb3VnaGZhcmUgYW5kIHN1YnRob3JvdWdoZmFyZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBmdWxsVGhvcm91Z2hmYXJlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbW1vbiBuYW1lcyBvZiB0aGUgYXJlYSBpbiB3aGljaCB0aGUgcGxhY2UgcmVzaWRlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhcmVhc09mSW50ZXJlc3Q/OiBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb21tb24gbmFtZXMgZm9yIHRoZSBsb2NhbCBhcmVhIG9yIG5laWdoYm9yaG9vZCBvZiB0aGUgcGxhY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVwZW5kZW50TG9jYWxpdGllcz86IHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IHRoYXQgcmV0cmlldmVzIG1hcC1iYXNlZCBzZWFyY2ggcmVzdWx0cyBmb3IgYSB1c2VyLWVudGVyZWQgcXVlcnkuXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIFNlYXJjaCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHNlYXJjaCBvYmplY3Qgd2l0aCBvcHRpb25hbCBpbml0aWFsIHZhbHVlcyB0aGF0IHlvdSBwcm92aWRlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0aGF0IHlvdSBtYXkgcHJvdmlkZSB3aGVuIGNyZWF0aW5nIGEgc2VhcmNoIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zPzogU2VhcmNoQ29uc3RydWN0b3JPcHRpb25zKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZXMgdGhlIHJlc3VsdHMgb2YgYSBzZWFyY2ggcXVlcnkuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcXVlcnkgQSBTdHJpbmcgb3IgYSBTZWFyY2hBdXRvY29tcGxldGVSZXN1bHQuXHJcbiAgICAgICAgICogQHBhcmFtIGNhbGxiYWNrIEEgY2FsbGJhY2sgZnVuY3Rpb24gb3IgZGVsZWdhdGUgb2JqZWN0LlxyXG4gICAgICAgICAqIEBwYXJhbSBvcHRpb25zIFdpdGggdGhlIG9wdGlvbiBoYXNoLCB5b3UgY2FuIGNvbnN0cmFpbiB0aGUgc2VhcmNoIHRvIGFcclxuICAgICAgICAgKiBkZXNpcmVkIGFyZWEgdXNpbmcgdGhlIGNvb3JkaW5hdGUgb3IgcmVnaW9uIHByb3BlcnRpZXMuIElmIHNldCwgdGhpc1xyXG4gICAgICAgICAqIG9wdGlvbiBvdmVycmlkZXMgdGhlIGxhbmd1YWdlIHByb3ZpZGVkIHRvIHRoZSBzZWFyY2ggY29uc3RydWN0b3IuXHJcbiAgICAgICAgICogQHJldHVybnMgYSByZXF1ZXN0IElEIChpbnRlZ2VyKSB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY2FuY2VsIHRvIGFib3J0IGFcclxuICAgICAgICAgKiBwZW5kaW5nIHJlcXVlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VhcmNoPFEgZXh0ZW5kcyBzdHJpbmcgfCBTZWFyY2hBdXRvY29tcGxldGVSZXN1bHQ+KFxyXG4gICAgICAgICAgICBxdWVyeTogUSxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IFNlYXJjaERlbGVnYXRlIHwgU2VhcmNoQ2FsbGJhY2s8UT4sXHJcbiAgICAgICAgICAgIG9wdGlvbnM/OiBTZWFyY2hPcHRpb25zLFxyXG4gICAgICAgICk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGF1dG9jb21wbGV0ZSByZXN1bHRzIGZvciB0aGUgc3BlY2lmaWVkIHNlYXJjaCBxdWVyeS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBxdWVyeSBBIHN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIHVzZXIncyBzZWFyY2ggdGVybSBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiBvciBkZWxlZ2F0ZSBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgV2l0aCB0aGUgb3B0aW9uIGhhc2gsIHlvdSBjYW4gY29uc3RyYWluXHJcbiAgICAgICAgICogdGhlIHNlYXJjaCB0byBhIGRlc2lyZWQgYXJlYSB1c2luZyB0aGUgY29vcmRpbmF0ZSBvciByZWdpb24gcHJvcGVydGllcy5cclxuICAgICAgICAgKiBBIGNvb3JkaW5hdGUgb3IgcmVnaW9uIHN1cHBsaWVkIGhlcmUgb3ZlcnJpZGVzIHRoZSBzYW1lIHByb3BlcnR5IHN1cHBsaWVkXHJcbiAgICAgICAgICogdG8gdGhlIGBtYXBraXQuU2VhcmNoYCBjb25zdHJ1Y3Rvci4gWW91IGNhbiBhbHNvIG92ZXJyaWRlXHJcbiAgICAgICAgICogdGhlIGxhbmd1YWdlIHByb3ZpZGVkIHRvIHRoZSBzZWFyY2ggY29uc3RydWN0b3IuXHJcbiAgICAgICAgICogRm9yIGV4YW1wbGUsIGB7IGxhbmd1YWdlOiDigJhmci1DQeKAmCB9YCB0ZWxscyB0aGUgc2VydmVyIHRvIHNlbmQgcmVzdWx0c1xyXG4gICAgICAgICAqIGxvY2FsaXplZCB0byBDYW5hZGlhbiBGcmVuY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlKFxyXG4gICAgICAgICAgICBxdWVyeTogc3RyaW5nLFxyXG4gICAgICAgICAgICBjYWxsYmFjazogU2VhcmNoRGVsZWdhdGUgfCBBdXRvY29tcGxldGVTZWFyY2hDYWxsYmFjayxcclxuICAgICAgICAgICAgb3B0aW9ucz86IFNlYXJjaEF1dG9jb21wbGV0ZU9wdGlvbnMsXHJcbiAgICAgICAgKTogdm9pZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYW5jZWxzIGEgc2VhcmNoIHJlcXVlc3QgdXNpbmcgaXRzIHJlcXVlc3QgSUQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaWQgVGhlIGludGVnZXIgSUQgcmV0dXJuZWQgYnkgYSBjYWxsIHRvIFNlYXJjaC5zZWFyY2hcclxuICAgICAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlIHNlcnZlciBjYW5jZWxlZCB0aGUgcGVuZGluZyBzZWFyY2ggcmVxdWVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjYW5jZWwoaWQ6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIHRoYXQgeW91IG1heSBwcm92aWRlIHdoZW4gY3JlYXRpbmcgYSBzZWFyY2ggb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgU2VhcmNoQ29uc3RydWN0b3JPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGxhbmd1YWdlIElEIHRoYXQgZGV0ZXJtaW5lcyB0aGUgbGFuZ3VhZ2UgZm9yIHRoZSBzZWFyY2ggcmVzdWx0IHRleHQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdG8gbGltaXQgdGhlIHNlYXJjaCByZXN1bHRzIHRvIHRoZVxyXG4gICAgICAgICAqIHVzZXIncyBjdXJyZW50IGxvY2F0aW9uLCBhcyBkZXRlcm1pbmVkIGJ5IHRoZSB3ZWIgYnJvd3Nlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRzVXNlckxvY2F0aW9uPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcCBjb29yZGluYXRlIHRoYXQgcHJvdmlkZXMgYSBoaW50IGZvciB0aGUgZ2VvZ3JhcGhpYyBhcmVhIHRvIHNlYXJjaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlPzogQ29vcmRpbmF0ZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcCByZWdpb24gdGhhdCBwcm92aWRlcyBhIGhpbnQgZm9yIHRoZSBnZW9ncmFwaGljIGFyZWEgdG8gc2VhcmNoLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlZ2lvbj86IENvb3JkaW5hdGVSZWdpb24gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCBhdXRvY29tcGxldGUgcmVzdWx0cyBzaG91bGQgaW5jbHVkZSBxdWVyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluY2x1ZGVRdWVyaWVzPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgc2VhcmNoIHJlc3VsdHMgc2hvdWxkIGluY2x1ZGUgYWRkcmVzc2VzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluY2x1ZGVBZGRyZXNzZXM/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgc3RyaW5nIHRoYXQgY29uc3RyYWlucyBzZWFyY2ggcmVzdWx0cyB0byB3aXRoaW4gdGhlIHByb3ZpZGVkIGNvdW50cmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW1pdFRvQ291bnRyaWVzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWFyY2ggcmVzdWx0cyBzaG91bGQgaW5jbHVkZSBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZVBvaW50c09mSW50ZXJlc3Q/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmlsdGVyIHVzZWQgdG8gaW5jbHVkZSBvciBleGNsdWRlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3JpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0RmlsdGVyPzogUG9pbnRPZkludGVyZXN0RmlsdGVyIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3B0aW9ucyB5b3UgcHJvdmlkZSB0byBjb25zdHJhaW4gYW4gYXV0b2NvbXBsZXRlIHJlcXVlc3QuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBTZWFyY2hBdXRvY29tcGxldGVPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGxhbmd1YWdlIElEIHRoYXQgZGV0ZXJtaW5lcyB0aGUgbGFuZ3VhZ2UgZm9yIHRoZSBzZWFyY2ggcmVzdWx0IHRleHQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBtYXAgY29vcmRpbmF0ZSB0aGF0IHByb3ZpZGVzIGEgaGludCBmb3IgdGhlIGdlb2dyYXBoaWMgYXJlYSB0byBzZWFyY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29vcmRpbmF0ZT86IENvb3JkaW5hdGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBtYXAgcmVnaW9uIHRoYXQgcHJvdmlkZXMgYSBoaW50IGZvciB0aGUgZ2VvZ3JhcGhpYyBhcmVhIHRvIHNlYXJjaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWdpb24/OiBDb29yZGluYXRlUmVnaW9uIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWFyY2ggcmVzdWx0cyBzaG91bGQgaW5jbHVkZSBhZGRyZXNzZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZUFkZHJlc3Nlcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCByZXN1bHRzIHNob3VsZCBpbmNsdWRlIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlUG9pbnRzT2ZJbnRlcmVzdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCByZXN1bHRzIHNob3VsZCBpbmNsdWRlIHF1ZXJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZVF1ZXJpZXM/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmlsdGVyIHVzZWQgdG8gaW5jbHVkZSBvciBleGNsdWRlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3JpZXMgaW4gc2VhcmNoIHJlc3VsdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9pbnRPZkludGVyZXN0RmlsdGVyPzogUG9pbnRPZkludGVyZXN0RmlsdGVyIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgc3RyaW5nIHRoYXQgY29uc3RyYWlucyBzZWFyY2ggcmVzdWx0cyB0byB3aXRoaW4gdGhlIHByb3ZpZGVkIGNvdW50cmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsaW1pdFRvQ291bnRyaWVzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGUgU2VhcmNoQ2FsbGJhY2s8UT4gPSAoXHJcbiAgICAgICAgZXJyb3I6IEVycm9yIHwgbnVsbCxcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBUaGUgcXVlcnkgY29ycmVzcG9uZGluZyB0byB0aGUgcmVzdWx0cyAgVGhlIHF1ZXJ5IGNvcnJlc3BvbmRpbmcgdG8gdGhlXHJcbiAgICAgICAgICAgICAqIHJlc3VsdHMsIGlmIGEgU2VhcmNoQXV0b2NvbXBsZXRlUmVzdWx0IHdhcyBub3QgdXNlZCB0byBwZXJmb3JtIHRoZSBzZWFyY2guXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBxdWVyeTogUSBleHRlbmRzIFNlYXJjaEF1dG9jb21wbGV0ZVJlc3VsdCA/IHVuZGVmaW5lZCA6IHN0cmluZztcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgcmVnaW9uIHRoYXQgZW5jbG9zZXMgdGhlIHNlYXJjaCByZXN1bHRzLiBUaGlzIHByb3BlcnR5IGlzIG5vdCBwcmVzZW50XHJcbiAgICAgICAgICAgICAqIGlmIHRoZXJlIGFyZSBubyByZXN1bHRzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgZGlzcGxheVJlZ2lvbj86IENvb3JkaW5hdGVSZWdpb24gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBbiBhcnJheSBvZiBQbGFjZSBvYmplY3RzLiBUaGUgcGxhY2UgYXJyYXkgaXMgZW1wdHkgaWYgdGhlcmUgaXMgbm8gbWF0Y2guXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBwbGFjZXM6IFBsYWNlW107XHJcbiAgICAgICAgfSxcclxuICAgICkgPT4gdm9pZDtcclxuXHJcbiAgICB0eXBlIEF1dG9jb21wbGV0ZVNlYXJjaENhbGxiYWNrID0gKGVycm9yOiBFcnJvciB8IG51bGwsIGRhdGE6IFNlYXJjaEF1dG9jb21wbGV0ZVJlc3BvbnNlKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IG9yIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIHBlcmZvcm1pbmcgYSBzZWFyY2ggb3IgYXV0b2NvbXBsZXRlXHJcbiAgICAgKiByZXF1ZXN0LlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgU2VhcmNoRGVsZWdhdGUge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVwb24gc3VjY2Vzc2Z1bCBjb21wbGV0aW9uIG9mIGEgc2VhcmNoIHJlcXVlc3QsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBkYXRhXHJcbiAgICAgICAgICogb2JqZWN0IHRoYXQgaXMgdGhlIHNhbWUgYXMgdGhlIG9uZSBwYXNzZWQgdG8gdGhlIHNlYXJjaCBjYWxsYmFjayBmdW5jdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWFyY2hEaWRDb21wbGV0ZT8oZGF0YTogU2VhcmNoUmVzcG9uc2UpOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHRoZSBzZWFyY2ggcmVxdWVzdCBmYWlscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWFyY2hEaWRFcnJvcj8oZXJyb3I6IEVycm9yKTogdm9pZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBXaGVuIGFuIGF1dG9jb21wbGV0ZSByZXF1ZXN0IHN1Y2Nlc3NmdWxseSBjb21wbGV0ZXMsIHRoaXMgbWV0aG9kIHJldHVybnNcclxuICAgICAgICAgKiBhIGRhdGEgYXJyYXkgdGhhdCBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIHBhc3NlZCB0byB0aGUgYXV0b2NvbXBsZXRlXHJcbiAgICAgICAgICogY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlRGlkQ29tcGxldGU/KGRhdGE6IFNlYXJjaEF1dG9jb21wbGV0ZVJlc3BvbnNlKTogdm9pZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbnZva2VkIHdoZW4gYW4gYXV0b2NvbXBsZXRlIHJlcXVlc3QgZmFpbHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYXV0b2NvbXBsZXRlRGlkRXJyb3I/KGVycm9yOiBFcnJvcik6IHZvaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb25zIHlvdSBjYW4gcHJvdmlkZSB3aGVuIHBlcmZvcm1pbmcgYSBzZWFyY2guXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBTZWFyY2hPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGxhbmd1YWdlIElEIHRoYXQgZGV0ZXJtaW5lcyB0aGUgbGFuZ3VhZ2UgZm9yIHRoZSBzZWFyY2ggcmVzdWx0IHRleHQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIG1hcCBjb29yZGluYXRlIHRoYXQgcHJvdmlkZXMgYSBoaW50IGZvciB0aGUgZ2VvZ3JhcGhpYyBhcmVhIHRvIHNlYXJjaC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb29yZGluYXRlOiBDb29yZGluYXRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbWFwIHJlZ2lvbiB0aGF0IHByb3ZpZGVzIGEgaGludCBmb3IgdGhlIGdlb2dyYXBoaWMgYXJlYSB0byBzZWFyY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uOiBDb29yZGluYXRlUmVnaW9uO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgQm9vbGVhbiB2YWx1ZSB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWFyY2ggcmVzdWx0cyBzaG91bGQgaW5jbHVkZSBhZGRyZXNzZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5jbHVkZUFkZHJlc3Nlcz86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCByZXN1bHRzIHNob3VsZCBpbmNsdWRlIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlUG9pbnRzT2ZJbnRlcmVzdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBmaWx0ZXIgdXNlZCB0byBpbmNsdWRlIG9yIGV4Y2x1ZGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcmllcyBpbiBzZWFyY2ggcmVzdWx0cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2ludE9mSW50ZXJlc3RGaWx0ZXI/OiBQb2ludE9mSW50ZXJlc3RGaWx0ZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVzdWx0IG9mIGEgc2VhcmNoLCBpbmNsdWRpbmcgdGhlIG9yaWdpbmFsIHNlYXJjaCBxdWVyeSwgdGhlIGJvdW5kaW5nXHJcbiAgICAgKiByZWdpb24sIGFuZCBhIGxpc3Qgb2YgcGxhY2VzIHRoYXQgbWF0Y2ggdGhlIHF1ZXJ5LlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgU2VhcmNoUmVzcG9uc2Uge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBxdWVyeSBzdHJpbmcgdXNlZCB0byBwZXJmb3JtIHRoZSBzZWFyY2guXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcXVlcnk6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcmVnaW9uIHRoYXQgZW5jbG9zZXMgdGhlIHBsYWNlcyBpbmNsdWRlZCBpbiB0aGUgc2VhcmNoIHJlc3VsdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm91bmRpbmdSZWdpb246IENvb3JkaW5hdGVSZWdpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsaXN0IG9mIHBsYWNlcyB0aGF0IG1hdGNoIHRoZSBzZWFyY2ggcXVlcnkuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGxhY2VzOiBQbGFjZVtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlc3BvbnNlIGZyb20gYW4gYXV0b2NvbXBsZXRlIHJlcXVlc3QuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBTZWFyY2hBdXRvY29tcGxldGVSZXNwb25zZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHF1ZXJ5IHN0cmluZyB1c2VkIHRvIHBlcmZvcm0gdGhlIGF1dG9jb21wbGV0ZSByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJlc3VsdHMgZnJvbSBhbiBhdXRvY29tcGxldGUgcmVxdWVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXN1bHRzOiBTZWFyY2hBdXRvY29tcGxldGVSZXN1bHRbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXN1bHQgb2YgYW4gYXV0b2NvbXBsZXRlIHF1ZXJ5LCBpbmNsdWRpbmcgZGlzcGxheSBsaW5lcyBhbmQgYSBjb29yZGluYXRlLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgU2VhcmNoQXV0b2NvbXBsZXRlUmVzdWx0IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBMaW5lcyBvZiB0ZXh0IHRvIGRpc3BsYXkgdG8gdGhlIHVzZXIgaW4gYW4gYXV0b2NvbXBsZXRlIG1lbnUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzcGxheUxpbmVzOiBzdHJpbmdbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgcmVzdWx0LCBwcm92aWRlZCB3aGVuIGl0IGNvcnJlc3BvbmRzIHRvIGEgc2luZ2xlIHBsYWNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvb3JkaW5hdGU6IENvb3JkaW5hdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZpbHRlciB1c2VkIHRvIGRldGVybWluZSB0aGUgcG9pbnRzIG9mIGludGVyZXN0IHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBvbiBhIG1hcCBvciBsb2NhbCBzZWFyY2guXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIFBvaW50T2ZJbnRlcmVzdEZpbHRlciB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIHBvaW50IG9mIGludGVyZXN0IGZpbHRlciB0aGF0IGluY2x1ZGVzIGNhdGVnb3JpZXMgZnJvbSBhIGxpc3QgdGhhdCB5b3UgcHJvdmlkZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzdGF0aWMgaW5jbHVkaW5nKGNhdGVnb3J5TGlzdDogUG9pbnRPZkludGVyZXN0Q2F0ZWdvcnlbXSk6IFBvaW50T2ZJbnRlcmVzdEZpbHRlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgcG9pbnQgb2YgaW50ZXJlc3QgZmlsdGVyIHRoYXQgZXhjbHVkZXMgY2F0ZWdvcmllcyBmcm9tIGEgbGlzdCB0aGF0IHlvdSBwcm92aWRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyBleGNsdWRpbmcoY2F0ZWdvcnlMaXN0OiBQb2ludE9mSW50ZXJlc3RDYXRlZ29yeVtdKTogUG9pbnRPZkludGVyZXN0RmlsdGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmlsdGVyIHRoYXQgaW5jbHVkZXMgYWxsIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3JpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RhdGljIHJlYWRvbmx5IGZpbHRlckluY2x1ZGluZ0FsbENhdGVnb3JpZXM6IFBvaW50T2ZJbnRlcmVzdEZpbHRlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZpbHRlciB0aGF0IGV4Y2x1ZGVzIGFsbCBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpYyByZWFkb25seSBmaWx0ZXJFeGNsdWRpbmdBbGxDYXRlZ29yaWVzOiBQb2ludE9mSW50ZXJlc3RGaWx0ZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmlsdGVyIGluY2x1ZGVzIHRoZSBwcm92aWRlZCBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbmNsdWRlc0NhdGVnb3J5KGNhdGVnb3J5OiBQb2ludE9mSW50ZXJlc3RDYXRlZ29yeSk6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIEJvb2xlYW4gdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0aGUgZmlsdGVyIGV4Y2x1ZGVzIHRoZSBwcm92aWRlZCBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBleGNsdWRlc0NhdGVnb3J5KGNhdGVnb3J5OiBQb2ludE9mSW50ZXJlc3RDYXRlZ29yeSk6IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3QgdGhhdCBmZXRjaGVzIHBvaW50cyBvZiBpbnRlcmVzdCB3aXRoaW4gYSBzcGVjaWZpZWQgcmVnaW9uLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBQb2ludHNPZkludGVyZXN0U2VhcmNoIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgc2VhcmNoIG9iamVjdCBmb3IgZmV0Y2hpbmcgcG9pbnRzIG9mIGludGVyZXN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyB0aGF0IHlvdSBtYXkgcHJvdmlkZSB3aGVuIHlvdSBjcmVhdGUgYSBwb2ludHMgb2YgaW50ZXJlc3Qgc2VhcmNoLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBQb2ludHNPZkludGVyZXN0U2VhcmNoT3B0aW9ucyk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJlZ2lvbiB0aGF0IGJvdW5kcyB0aGUgYXJlYSBpbiB3aGljaCB0byBmZXRjaCBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uOiBDb29yZGluYXRlUmVnaW9uO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHJlcXVlc3QgcmVwcmVzZW50ZWQgYXMgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjZW50ZXI6IENvb3JkaW5hdGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRpc3RhbmNlIHByb3ZpZGVkIGluIG1ldGVycywgb3IgdGhlIGxvbmdlc3QgZGlzdGFuY2UgZGVyaXZlZCBmcm9tIHRoZSBjZW50ZXIgcG9pbnQgdG8gdGhlIHJlZ2lvbuKAmXMgYm91bmRpbmcgYm94LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJhZGl1czogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmlsdGVyIHRoYXQgbGlzdHMgcG9pbnRzIG9mIGludGVyZXN0IGNhdGVnb3JpZXMgdG8gaW5jbHVkZSBvciBleGNsdWRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvaW50T2ZJbnRlcmVzdEZpbHRlcjogUG9pbnRPZkludGVyZXN0RmlsdGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsYW5ndWFnZSBJRCB0byB1c2Ugd2hlbiBmZXRjaGluZyBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWF4aW11bSBkaXN0YW5jZSB0byB1c2UgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSByZWdpb24gZm9yIGZldGNoaW5nIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZWFkb25seSBNYXhSYWRpdXM6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBGZXRjaGVzIHBvaW50cyBvZiBpbnRlcmVzdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBxdWVyeSBBIFN0cmluZyBvciBhIFNlYXJjaEF1dG9jb21wbGV0ZVJlc3VsdC5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiBvciBkZWxlZ2F0ZSBvYmplY3QuXHJcbiAgICAgICAgICogQHBhcmFtIG9wdGlvbnMgQSBQb2ludHNPZkludGVyZXN0U2VhcmNoT3B0aW9ucyBvYmplY3QuXHJcbiAgICAgICAgICogQHJldHVybnMgYSByZXF1ZXN0IElEIChpbnRlZ2VyKSB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY2FuY2VsIHRvIGFib3J0IGFcclxuICAgICAgICAgKiBwZW5kaW5nIHJlcXVlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2VhcmNoKFxyXG4gICAgICAgICAgICBjYWxsYmFjazogUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaERlbGVnYXRlIHwgUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaENhbGxiYWNrLFxyXG4gICAgICAgICAgICBvcHRpb25zPzogUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaE9wdGlvbnMsXHJcbiAgICAgICAgKTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhbmNlbHMgYSBzZWFyY2ggcmVxdWVzdCB1c2luZyBpdHMgcmVxdWVzdCBJRC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBUaGUgaW50ZWdlciBJRCByZXR1cm5lZCBieSBhIGNhbGwgdG8gU2VhcmNoLnNlYXJjaFxyXG4gICAgICAgICAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgc2VydmVyIGNhbmNlbGVkIHRoZSBwZW5kaW5nIHNlYXJjaCByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbmNlbChpZDogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUgd2hlbiBjcmVhdGluZyBhIHNlYXJjaCBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBQb2ludHNPZkludGVyZXN0U2VhcmNoT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsYW5ndWFnZSBJRCB0aGF0IGRldGVybWluZXMgdGhlIGxhbmd1YWdlIGZvciB0aGUgc2VhcmNoIHJlc3VsdCB0ZXh0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBjZW50ZXIgcG9pbnQgb2YgdGhlIHJlcXVlc3QgcmVwcmVzZW50ZWQgYXMgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjZW50ZXI/OiBDb29yZGluYXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBkaXN0YW5jZSBwcm92aWRlZCBpbiBtZXRlcnMsIG9yIHRoZSBsb25nZXN0IGRpc3RhbmNlIGRlcml2ZWQgZnJvbSB0aGUgY2VudGVyIHBvaW50IHRvIHRoZSByZWdpb27igJlzIGJvdW5kaW5nIGJveC5cclxuICAgICAgICAgKi9cclxuICAgICAgICByYWRpdXM/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJlZ2lvbiB0aGF0IGJvdW5kcyB0aGUgYXJlYSBpbiB3aGljaCB0byBmZXRjaCBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmVnaW9uPzogQ29vcmRpbmF0ZVJlZ2lvbiB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGZpbHRlciB1c2VkIHRvIGluY2x1ZGUgb3IgZXhjbHVkZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvaW50T2ZJbnRlcmVzdEZpbHRlcj86IFBvaW50T2ZJbnRlcmVzdEZpbHRlciB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlIFBvaW50c09mSW50ZXJlc3RTZWFyY2hDYWxsYmFjayA9IChlcnJvcjogRXJyb3IgfCBudWxsLCBkYXRhOiBQb2ludHNPZkludGVyZXN0U2VhcmNoUmVzcG9uc2UpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvYmplY3Qgb3IgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBNYXBLaXQgSlMgY2FsbHMgd2hlbiBmZXRjaGluZyBwb2ludHMgb2YgaW50ZXJlc3QuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBQb2ludHNPZkludGVyZXN0U2VhcmNoRGVsZWdhdGUge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRlbGxzIHRoZSBkZWxlZ2F0ZSB0aGF0IHRoZSBzZWFyY2ggY29tcGxldGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNlYXJjaERpZENvbXBsZXRlPyhkYXRhOiBQb2ludHNPZkludGVyZXN0U2VhcmNoUmVzcG9uc2UpOiB2b2lkO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRlbGxzIHRoZSBkZWxlZ2F0ZSB0aGF0IHRoZSBzZWFyY2ggZmFpbGVkIGR1ZSB0byBhbiBlcnJvci5cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZWFyY2hEaWRFcnJvcj8oZXJyb3I6IEVycm9yKTogdm9pZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXN1bHQgb2YgYSByZXF1ZXN0IHVzZWQgdG8gZmV0Y2ggcG9pbnRzIG9mIGludGVyZXN0LlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgUG9pbnRzT2ZJbnRlcmVzdFNlYXJjaFJlc3BvbnNlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbGlzdCBvZiBwb2ludHMgb2YgaW50ZXJlc3QgdGhhdCBtYXRjaCB0aGUgcmVxdWVzdCBvcHRpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBsYWNlczogUGxhY2VbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBvaW50IG9mIGludGVyZXN0IGNhdGVnb3JpZXMuXHJcbiAgICAgKi9cclxuXHJcbiAgICBlbnVtIFBvaW50T2ZJbnRlcmVzdENhdGVnb3J5IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGFpcnBvcnRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEFpcnBvcnQsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBhbXVzZW1lbnQgcGFya3MuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQW11c2VtZW50UGFyayxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGFxdWFyaXVtcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBBcXVhcml1bSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIEFUTSBtYWNoaW5lcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBBVE0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBiYWtlcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYWtlcnksXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBiYW5rcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBCYW5rLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgYmVhY2hlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBCZWFjaCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGJyZXdlcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBCcmV3ZXJ5LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgY2FmZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQ2FmZSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGNhbXBncm91bmRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIENhbXBncm91bmQsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBjYXIgcmVudGFscy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBDYXJSZW50YWwsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBFViBjaGFyZ2Vycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBFVkNoYXJnZXIsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBmaXJlIHN0YXRpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEZpcmVTdGF0aW9uLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgZml0bmVzcyBjZW50ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEZpdG5lc3NDZW50ZXIsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBmb29kIG1hcmtldHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgRm9vZE1hcmtldCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIGdhcyBzdGF0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBHYXNTdGF0aW9uLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgaG9zcGl0YWxzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEhvc3BpdGFsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgaG90ZWxzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEhvdGVsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbGF1bmRyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIExhdW5kcnksXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBsaWJyYXJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTGlicmFyeSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIG1hcmluYXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTWFyaW5hLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbW92aWUgdGhlYXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTW92aWVUaGVhdGVyLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgbXVzZXVtcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBNdXNldW0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBuYXRpb25hbCBwYXJrcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBOYXRpb25hbFBhcmssXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBuaWdodGxpZmUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgTmlnaHRsaWZlLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgcGFya3NcclxuICAgICAgICAgKi9cclxuICAgICAgICBQYXJrLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgcGFya2luZyBsb2NhdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUGFya2luZyxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHBoYXJtYWNpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUGhhcm1hY3ksXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBwb2xpY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUG9saWNlLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgcG9zdCBvZmZpY2VzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFBvc3RPZmZpY2UsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBsb2NhdGlvbnMgb2YgcHVibGljIHRyYW5zcG9ydGF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFB1YmxpY1RyYW5zcG9ydCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHJlc3RhdXJhbnRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFJlc3RhdXJhbnQsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciByZXN0cm9vbXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUmVzdHJvb20sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBzY2hvb2xzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFNjaG9vbCxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcG9pbnQgb2YgaW50ZXJlc3QgY2F0ZWdvcnkgZm9yIHN0YWRpdW1zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFN0YWRpdW0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciBzdG9yZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgU3RvcmUsXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciB0aGVhdGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBUaGVhdGVyLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBwb2ludCBvZiBpbnRlcmVzdCBjYXRlZ29yeSBmb3IgdW5pdmVyc2l0aWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFVuaXZlcnNpdHksXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciB3aW5lcmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBXaW5lcnksXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHBvaW50IG9mIGludGVyZXN0IGNhdGVnb3J5IGZvciB6b29zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFpvbyxcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBkaXJlY3Rpb25zIG9iamVjdCB3aXRoIG9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUuXHJcbiAgICAgKi9cclxuICAgIGNsYXNzIERpcmVjdGlvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSBkaXJlY3Rpb25zIG9iamVjdCB3aXRoIG9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBUaGlzIHBhcmFtZXRlciBpcyBvcHRpb25hbC5cclxuICAgICAgICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBEaXJlY3Rpb25zQ29uc3RydWN0b3JPcHRpb25zKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZXMgZXN0aW1hdGVkIGFycml2YWwgdGltZXMgdG8gdXAgdG8gMTAgZGVzdGluYXRpb25zIGZyb20gYSBzaW5nbGUgc3RhcnRpbmcgcG9pbnQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCBBbiBFdGFSZXF1ZXN0T3B0aW9ucyBvYmplY3QgdGhhdCBzcGVjaWZpZXMgZGV0YWlscyBmb3IgdGhlIHNlcnZlciB0byBwcm92aWRlIGVzdGltYXRlZCBhcnJpdmFsIHRpbWVzIGF0IG9uZSBvciBtb3JlIGRlc3RpbmF0aW9ucy5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBlc3RpbWF0ZWQgdGltZSByZXNwb25zZSBvYmplY3QsIHJldHVybmVkIGFzeW5jaHJvbm91c2x5LlxyXG4gICAgICAgICAqIEByZXR1cm4gQSByZXF1ZXN0IElELCB3aGljaCB5b3UgY2FuIHBhc3MgdG8gY2FuY2VsIHRvIGFib3J0IGEgcGVuZGluZyByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV0YShyZXF1ZXN0OiBFdGFSZXF1ZXN0T3B0aW9ucywgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBkYXRhOiBFdGFSZXNwb25zZSkgPT4gdm9pZCk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZXRyaWV2ZXMgZGlyZWN0aW9ucyBhbmQgZXN0aW1hdGVkIHRyYXZlbCB0aW1lIGZvciB0aGUgc3BlY2lmaWVkIHN0YXJ0XHJcbiAgICAgICAgICogYW5kIGVuZCBwb2ludHMuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gcmVxdWVzdCBEaXJlY3Rpb25zUmVxdWVzdCBvYmplY3QgdGhhdCBzcGVjaWZpZXMgZGV0YWlscyBmb3IgdGhlXHJcbiAgICAgICAgICogZGlyZWN0aW9ucyB5b3Ugd2FudCB0byByZXRyaWV2ZS5cclxuICAgICAgICAgKiBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIHRoZSBkaXJlY3Rpb25zLFxyXG4gICAgICAgICAqIHJldHVybmVkIGFzeW5jaHJvbm91c2x5LlxyXG4gICAgICAgICAqIEByZXR1cm4gQSByZXF1ZXN0IElELCB3aGljaCB5b3UgY2FuIHBhc3MgdG8gY2FuY2VsIHRvIGFib3J0IGEgcGVuZGluZyByZXF1ZXN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJvdXRlKHJlcXVlc3Q6IERpcmVjdGlvbnNSZXF1ZXN0LCBjYWxsYmFjazogKGVycm9yOiBFcnJvciB8IG51bGwsIGRhdGE6IERpcmVjdGlvbnNSZXNwb25zZSkgPT4gdm9pZCk6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYW5jZWxzIGEgcHJldmlvdXMgcmVxdWVzdCBmb3Igcm91dGUgZGlyZWN0aW9ucy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpZCBUaGUgSUQgcmV0dXJuZWQgYnkgYSBjYWxsIHRvIHJvdXRlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbmNlbChpZDogbnVtYmVyKTogYm9vbGVhbjtcclxuICAgIH1cclxuXHJcbiAgICBuYW1lc3BhY2UgRGlyZWN0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1vZGVzIG9mIHRyYW5zcG9ydGF0aW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVudW0gVHJhbnNwb3J0IHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEEgY29uc3RhbnQgaWRlbnRpZnlpbmcgdGhlIG1vZGUgb2YgdHJhbnNwb3J0YXRpb24gYXMgZHJpdmluZy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIEF1dG9tb2JpbGUsXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBBIGNvbnN0YW50IGlkZW50aWZ5aW5nIHRoZSBtb2RlIG9mIHRyYW5zcG9ydGF0aW9uIGFzIHdhbGtpbmcuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBXYWxraW5nLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE9wdGlvbnMgdGhhdCB5b3UgbWF5IHByb3ZpZGUgd2hlbiBjcmVhdGluZyBhIGRpcmVjdGlvbnMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgRGlyZWN0aW9uc0NvbnN0cnVjdG9yT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBsYW5ndWFnZSBJRCB0aGF0IGRldGVybWluZXMgdGhlIGxhbmd1YWdlIGZvciByb3V0ZSBpbmZvcm1hdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBsYW5ndWFnZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBvcHRpb25zIHlvdSBtYXkgcHJvdmlkZSBmb3IgcmVxdWVzdGluZyBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lcy5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIEV0YVJlcXVlc3RPcHRpb25zIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc3RhcnRpbmcgcG9pbnQgZm9yIGVzdGltYXRlZCBhcnJpdmFsIHRpbWUgcmVxdWVzdHMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgb3JpZ2luOiBDb29yZGluYXRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0aW1lIG9mIGRlcGFydHVyZSB1c2VkIGluIGFuIGVzdGltYXRlZCBhcnJpdmFsIHRpbWUgcmVxdWVzdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXN0aW5hdGlvbnM6IENvb3JkaW5hdGVbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBjb29yZGluYXRlcyB0aGF0IHJlcHJlc2VudCBlbmQgcG9pbnRzIGZvciBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lIHJlcXVlc3RzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYW5zcG9ydFR5cGU6IERpcmVjdGlvbnMuVHJhbnNwb3J0O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtb2RlIG9mIHRyYW5zcG9ydGF0aW9uIHRoZSBzZXJ2ZXIgdXNlcyB3aGVuIGVzdGltYXRpbmcgYXJyaXZhbCB0aW1lcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXBhcnR1cmVEYXRlOiBEYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVzdGltYXRlZCBhcnJpdmFsIHRpbWVzIGZvciBhIHNldCBvZiBkZXN0aW5hdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBFdGFSZXNwb25zZSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJlcXVlc3Qgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZXN0aW1hdGVkIHRpbWUgb2YgYXJyaXZhbCByZXNwb25zZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICByZXF1ZXN0OiBFdGFSZXF1ZXN0T3B0aW9ucztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBlc3RpbWF0ZWQgYXJyaXZhbCB0aW1lcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBldGFzOiBFdGFSZXN1bHRbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtb2RlIG9mIHRyYW5zcG9ydGF0aW9uLCBkaXN0YW5jZSwgYW5kIHRyYXZlbCB0aW1lIGVzdGltYXRlcyBmb3IgYSBzaW5nbGUgZGVzdGluYXRpb24uXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBFdGFSZXN1bHQge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtb2RlIG9mIHRyYW5zcG9ydGF0aW9uIHVzZWQgdG8gZXN0aW1hdGUgdGhlIGFycml2YWwgdGltZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0cmFuc3BvcnRUeXBlOiBEaXJlY3Rpb25zLlRyYW5zcG9ydDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgcm91dGUgZGlzdGFuY2UgaW4gbWV0ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRpc3RhbmNlOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGVzdGltYXRlZCB0cmF2ZWwgdGltZSBpbiBzZWNvbmRzLCBpbmNsdWRpbmcgZXN0aW1hdGVkIGRlbGF5cyBkdWUgdG8gdHJhZmZpYy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBleHBlY3RlZFRyYXZlbFRpbWU6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZXN0aW1hdGVkIHRyYXZlbCB0aW1lIGluIHNlY29uZHMsIGV4Y2x1ZGluZyBlc3RpbWF0ZWQgZGVsYXlzIGZvciB0cmFmZmljLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0YXRpY1RyYXZlbFRpbWU6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZXF1ZXN0ZWQgc3RhcnQgYW5kIGVuZCBwb2ludHMgZm9yIGEgcm91dGUsIGFzIHdlbGwgYXMgdGhlIHBsYW5uZWQgbW9kZSBvZiB0cmFuc3BvcnRhdGlvbi5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIERpcmVjdGlvbnNSZXF1ZXN0IHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc3RhcnQgcG9pbnQgZm9yIHJvdXRpbmcgZGlyZWN0aW9ucy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcmlnaW46IHN0cmluZyB8IENvb3JkaW5hdGUgfCBQbGFjZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZW5kIHBvaW50IGZvciByb3V0aW5nIGRpcmVjdGlvbnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVzdGluYXRpb246IHN0cmluZyB8IENvb3JkaW5hdGUgfCBQbGFjZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgYXJyaXZhbCBkYXRlIGZvciB0aGUgdHJpcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBhcnJpdmFsRGF0ZT86IERhdGUgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGRlcGFydHVyZSBkYXRlIGZvciB0aGUgdHJpcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkZXBhcnR1cmVEYXRlPzogRGF0ZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbW9kZSBvZiB0cmFuc3BvcnRhdGlvbiB0byB3aGljaCBkaXJlY3Rpb25zIHNob3VsZCBhcHBseS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0cmFuc3BvcnRUeXBlPzogRGlyZWN0aW9ucy5UcmFuc3BvcnQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBCb29sZWFuIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlcnZlciBzaG91bGQgcmV0dXJuIG11bHRpcGxlXHJcbiAgICAgICAgICogcm91dGVzIHdoZW4gdGhleSBhcmUgYXZhaWxhYmxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlcXVlc3RzQWx0ZXJuYXRlUm91dGVzPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkaXJlY3Rpb25zIGFuZCBlc3RpbWF0ZWQgdHJhdmVsIHRpbWUgcmV0dXJuZWQgZm9yIGEgcm91dGUuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBEaXJlY3Rpb25zUmVzcG9uc2Uge1xyXG4gICAgICAgIHJlcXVlc3Q6IGFueTtcclxuICAgICAgICByb3V0ZXM6IFJvdXRlW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmZvcm1hdGlvbiBhYm91dCBhIHJvdXRlLCBpbmNsdWRpbmcgc3RlcC1ieS1zdGVwIGluc3RydWN0aW9ucywgZGlzdGFuY2UsXHJcbiAgICAgKiBhbmQgZXN0aW1hdGVkIHRyYXZlbCB0aW1lLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgUm91dGUge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGluc3RhbmNlIG9mIGEgcG9seWxpbmUgb3ZlcmxheSB0aGF0IHJlcHJlc2VudHMgdGhlIHBhdGggb2YgYSByb3V0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBwb2x5bGluZTogUG9seWxpbmVPdmVybGF5O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGNvb3JkaW5hdGUgb2JqZWN0cyByZXByZXNlbnRpbmcgdGhlIHBhdGggb2YgdGhlIHJvdXRlLlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcGF0aDogQ29vcmRpbmF0ZVtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEFuIGFycmF5IG9mIHN0ZXBzIHRoYXQgY29tcHJpc2UgdGhlIG92ZXJhbGwgcm91dGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc3RlcHM6IFJvdXRlU3RlcFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBuYW1lIGFzc2lnbmVkIHRvIHRoZSByb3V0ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJvdXRlIGRpc3RhbmNlIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBleHBlY3RlZCB0cmF2ZWwgdGltZSBpbiBzZWNvbmRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4cGVjdGVkVHJhdmVsVGltZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvdmVyYWxsIHJvdXRlIHRyYW5zcG9ydCB0eXBlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRyYW5zcG9ydFR5cGU6IERpcmVjdGlvbnMuVHJhbnNwb3J0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBzaW5nbGUgcm91dGUgYmV0d2VlbiBhIHJlcXVlc3RlZCBzdGFydCBhbmQgZW5kIHBvaW50LlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgUm91dGVTdGVwIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiBjb29yZGluYXRlIG9iamVjdHMgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHRoZSByb3V0ZSBzZWdtZW50LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBhdGg6IENvb3JkaW5hdGVbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgd3JpdHRlbiBpbnN0cnVjdGlvbnMgZm9yIGZvbGxvd2luZyB0aGUgcGF0aCByZXByZXNlbnRlZCBieSB0aGUgc3RlcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnN0cnVjdGlvbnM6IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgc3RlcCBkaXN0YW5jZSBpbiBtZXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGlzdGFuY2U6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdHJhbnNwb3J0IHR5cGUgb2YgdGhlIHN0ZXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdHJhbnNwb3J0VHlwZTogRGlyZWN0aW9ucy5UcmFuc3BvcnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEEgbG9jYXRpb24gb24gYSBtYXAgd2hlbiB0aGUgRWFydGgncyBzdXJmYWNlIGlzIHByb2plY3RlZCBvbnRvIGFcclxuICAgICAqIHR3by1kaW1lbnNpb25hbCBzdXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBNYXBQb2ludCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBNYXBQb2ludCBvYmplY3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0geCBUaGUgcG9pbnQgYWxvbmcgdGhlIGVhc3Qtd2VzdCBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKiBAcGFyYW0gIFRoZSBwb2ludCBhbG9uZyB0aGUgbm9ydGgtc291dGggYXhpcyBvZiB0aGUgbWFwIHByb2plY3Rpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2NhdGlvbiBvZiB0aGUgcG9pbnQgYWxvbmcgdGhlIHgtYXhpcyBvZiB0aGUgbWFwLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHg6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9jYXRpb24gb2YgdGhlIHBvaW50IGFsb25nIHRoZSB5LWF4aXMgb2YgdGhlIG1hcC5cclxuICAgICAgICAgKi9cclxuICAgICAgICB5OiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgYSBtYXAgcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weSgpOiBNYXBQb2ludDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0d28gbWFwIHBvaW50cyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gYW5vdGhlclBvaW50IEEgbWFwIHBvaW50IHRvIHVzZSBmb3IgY29tcGFyaXNvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlcXVhbHMoYW5vdGhlclBvaW50OiBNYXBQb2ludCk6IGJvb2xlYW47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvb3JkaW5hdGUgY29udGFpbmluZyB0aGUgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBjb3JyZXNwb25kaW5nXHJcbiAgICAgICAgICogdG8gYSBtYXAgcG9pbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9Db29yZGluYXRlKCk6IENvb3JkaW5hdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHBhaXIgb2YgdmFsdWVzIGluIG1hcCB1bml0cyB0aGF0IGRlZmluZSB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiBhXHJcbiAgICAgKiBwcm9qZWN0ZWQgY29vcmRpbmF0ZSBzcGFuLlxyXG4gICAgICovXHJcbiAgICBjbGFzcyBNYXBTaXplIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0aWFsaXplcyBhIE1hcFNpemUgb2JqZWN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHdpZHRoIFRoZSBkaXN0YW5jZSAobWVhc3VyZWQgdXNpbmcgbWFwIHBvaW50cykgYWxvbmcgdGhlIGVhc3Qtd2VzdFxyXG4gICAgICAgICAqIGF4aXMgb2YgdGhlIG1hcCBwcm9qZWN0aW9uLlxyXG4gICAgICAgICAqIEBwYXJhbSBoZWlnaHQgVGhlIGRpc3RhbmNlIChtZWFzdXJlZCB1c2luZyBtYXAgcG9pbnRzKSBhbG9uZyB0aGVcclxuICAgICAgICAgKiBub3J0aC1zb3V0aCBheGlzIG9mIHRoZSBtYXAgcHJvamVjdGlvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3Rvcih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGhlaWdodCB2YWx1ZSwgaW4gbWFwIHBvaW50IHVuaXRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCB2YWx1ZSwgaW4gbWFwIHBvaW50IHVuaXRzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgYSBtYXAgc2l6ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb3B5KCk6IE1hcFNpemU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdHdvIG1hcCBzaXplcyBhcmUgZXF1YWwuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gYW5vdGhlclNpemUgVGhlIG1hcCBzaXplIHRvIGVxdWF0ZSB0by5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlcXVhbHMoYW5vdGhlclNpemU6IE1hcFNpemUpOiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSByZWN0YW5ndWxhciBhcmVhIG9uIGEgbWFwLCBkZWZpbmVkIGJ5IGNvb3JkaW5hdGVzIG9mIHRoZSByZWN0YW5nbGUnc1xyXG4gICAgICogbm9ydGhlYXN0IGFuZCBzb3V0aHdlc3QgY29ybmVycy5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgQm91bmRpbmdSZWdpb24ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENyZWF0ZXMgYSByZWN0YW5ndWxhciBib3VuZGluZyByZWdpb24gZGVmaW5lZCBieSB0aGUgbGF0aXR1ZGUgYW5kXHJcbiAgICAgICAgICogbG9uZ2l0dWRlIGNvb3JkaW5hdGVzIG9mIHRoZSByZWN0YW5nbGUncyBub3J0aGVhc3QgYW5kIHNvdXRod2VzdCBjb3JuZXJzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIG5vcnRoTGF0aXR1ZGUgVGhlIG5vcnRoIGxhdGl0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIGVhc3RMb25naXR1ZGUgVGhlIGVhc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHNvdXRoTGF0aXR1ZGUgVGhlIHNvdXRoIGxhdGl0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICogQHBhcmFtIHdlc3RMb25naXR1ZGUgVGhlIHdlc3QgbG9uZ2l0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0b3Iobm9ydGhMYXRpdHVkZTogbnVtYmVyLCBlYXN0TG9uZ2l0dWRlOiBudW1iZXIsIHNvdXRoTGF0aXR1ZGU6IG51bWJlciwgd2VzdExvbmdpdHVkZTogbnVtYmVyKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZWFzdCBsb25naXR1ZGUgb2YgdGhlIGJvdW5kaW5nIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBlYXN0TG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG5vcnRoIGxhdGl0dWRlIG9mIHRoZSBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbm9ydGhMYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBzb3V0aCBsYXRpdHVkZSBvZiB0aGUgYm91bmRpbmcgcmVnaW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNvdXRoTGF0aXR1ZGU6IG51bWJlcjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgd2VzdCBsb25naXR1ZGUgb2YgdGhlIGJvdW5kaW5nIHJlZ2lvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICB3ZXN0TG9uZ2l0dWRlOiBudW1iZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyBhIGNvcHkgb2YgdGhlIGNhbGxpbmcgYm91bmRpbmcgcmVnaW9uLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvcHkoKTogQm91bmRpbmdSZWdpb247XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgY29vcmRpbmF0ZSByZWdpb24gdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgY2FsbGluZyBib3VuZGluZyByZWdpb24uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9Db29yZGluYXRlUmVnaW9uKCk6IENvb3JkaW5hdGVSZWdpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIG1pbmltdW0gYW5kIG1heGltdW0gY2FtZXJhIGRpc3RhbmNlIGFzIG1ldGVycyBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIG1hcC5cclxuICAgICAqL1xyXG4gICAgY2xhc3MgQ2FtZXJhWm9vbVJhbmdlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZXNjcmliZXMgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gY2FtZXJhIGRpc3RhbmNlIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdHJ1Y3RvcihtaW5DYW1lcmFEaXN0YW5jZTogQ2FtZXJhWm9vbVJhbmdlQ29uc3RydWN0b3JPcHRpb25zIHwgbnVtYmVyLCBtYXhDYW1lcmFEaXN0YW5jZT86IG51bWJlcik7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0gYWxsb3dlZCBkaXN0YW5jZSBvZiB0aGUgY2FtZXJhIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgbWFwIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5DYW1lcmFEaXN0YW5jZTogbnVtYmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIGFsbG93ZWQgZGlzdGFuY2Ugb2YgdGhlIGNhbWVyYSBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIG1hcCBpbiBtZXRlcnMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4Q2FtZXJhRGlzdGFuY2U6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemF0aW9uIG9wdGlvbnMgZm9yIHRoZSBjYW1lcmEgem9vbSByYW5nZS5cclxuICAgICAqL1xyXG4gICAgaW50ZXJmYWNlIENhbWVyYVpvb21SYW5nZUNvbnN0cnVjdG9yT3B0aW9ucyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0gYWxsb3dlZCBkaXN0YW5jZSBvZiB0aGUgY2FtZXJhIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgbWFwIGluIG1ldGVycy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5DYW1lcmFEaXN0YW5jZT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIGRpc3RhbmNlIG9mIHRoZSBjYW1lcmEgZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBtYXAgaW4gbWV0ZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1heENhbWVyYURpc3RhbmNlPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGRhdGEgVGhlIG9yaWdpbmFsIEdlb0pTT04gZGF0YSwgd2hpY2ggbWF5IGJlIGEgVVJMIHRvIGEgR2VvSlNPTiBmaWxlLFxyXG4gICAgICogb3IgYSBHZW9KU09OIG9iamVjdC5cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgcmVxdWlyZWQgaWYgeW91IHByb3ZpZGUgYSBVUkxcclxuICAgICAqIGZvciB0aGUgZGF0YSBwYXJhbWV0ZXIsIGFuZCBvcHRpb25hbCBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGltcG9ydEdlb0pTT04oXHJcbiAgICAgICAgZGF0YTogc3RyaW5nIHwgb2JqZWN0LFxyXG4gICAgICAgIGNhbGxiYWNrPzogR2VvSlNPTkRlbGVnYXRlIHwgSW1wb3J0R2VvSlNPTkNhbGxiYWNrLFxyXG4gICAgKTogSXRlbUNvbGxlY3Rpb24gfCBFcnJvcjtcclxuXHJcbiAgICB0eXBlIEltcG9ydEdlb0pTT05DYWxsYmFjayA9IChlcnJvcjogRXJyb3IsIHJlc3VsdDogSXRlbUNvbGxlY3Rpb24pID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGRlbGVnYXRlIG9iamVjdCB0aGF0IGNvbnRyb2xzIGEgR2VvSlNPTiBpbXBvcnQgaW4gb3JkZXIgdG8gb3ZlcnJpZGVcclxuICAgICAqIGRlZmF1bHQgYmVoYXZpb3IgYW5kIHByb3ZpZGUgY3VzdG9tIHN0eWxlLlxyXG4gICAgICovXHJcbiAgICBpbnRlcmZhY2UgR2VvSlNPTkRlbGVnYXRlIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgYSBmZWF0dXJlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGl0ZW0gQW4gaXRlbSBjcmVhdGVkIGZvciB0aGUgZ2VvbWV0cnkgb2YgdGhpcyBmZWF0dXJlIG9yIG51bGwgZm9yXHJcbiAgICAgICAgICogZmVhdHVyZXMgd2l0aCBudWxsIGdlb21ldHJ5LlxyXG4gICAgICAgICAqIEBwYXJhbSBnZW9KU09OIFRoZSBvcmlnaW5hbCBHZW9KU09OIG9iamVjdCBmb3IgdGhpcyBmZWF0dXJlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGl0ZW1Gb3JGZWF0dXJlPyhcclxuICAgICAgICAgICAgaXRlbTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBJdGVtQ29sbGVjdGlvbiB8IG51bGwsXHJcbiAgICAgICAgICAgIGdlb0pTT046IG9iamVjdCxcclxuICAgICAgICApOiBBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5PjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgYSBmZWF0dXJlIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbUNvbGxlY3Rpb24gQSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgYXNzb2NpYXRlZCBhbm5vdGF0aW9ucyBhbmRcclxuICAgICAgICAgKiBvdmVybGF5cy5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgRmVhdHVyZUNvbGxlY3Rpb24uXHJcbiAgICAgICAgICogVGhpcyB3aWxsIGNvbnRhaW4gYW4gYXJyYXkgb2YgZmVhdHVyZSB0eXBlcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yRmVhdHVyZUNvbGxlY3Rpb24/KFxyXG4gICAgICAgICAgICBpdGVtQ29sbGVjdGlvbjogSXRlbUNvbGxlY3Rpb24sXHJcbiAgICAgICAgICAgIGdlb0pTT046IG9iamVjdCxcclxuICAgICAgICApOiBBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEFycmF5PEFubm90YXRpb24gfCBPdmVybGF5PjtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBPdmVycmlkZXMgYSBsaW5lIHN0cmluZy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvdmVybGF5IEEgUG9seWxpbmVPdmVybGF5IG9iamVjdC5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBvcmlnaW5hbCBHZW9KU09OIG9iamVjdCBmb3IgdGhpcyBMaW5lU3RyaW5nIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yTGluZVN0cmluZz8oXHJcbiAgICAgICAgICAgIG92ZXJsYXk6IFBvbHlsaW5lT3ZlcmxheSxcclxuICAgICAgICAgICAgZ2VvSlNPTjogb2JqZWN0LFxyXG4gICAgICAgICk6IEFubm90YXRpb24gfCBPdmVybGF5IHwgQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIG11bHRpbGluZSBzdHJpbmcuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbUNvbGxlY3Rpb24gQW4gaXRlbSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgYXNzb2NpYXRlZCBvdmVybGF5cy5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgTXVsdGlMaW5lU3RyaW5nLiBUaGlzXHJcbiAgICAgICAgICogd2lsbCBjb250YWluIGFuIGFycmF5IG9mIGdlb21ldHJpZXMuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXRlbUZvck11bHRpTGluZVN0cmluZz8oXHJcbiAgICAgICAgICAgIGl0ZW1Db2xsZWN0aW9uOiBJdGVtQ29sbGVjdGlvbixcclxuICAgICAgICAgICAgZ2VvSlNPTjogb2JqZWN0LFxyXG4gICAgICAgICk6IEFubm90YXRpb24gfCBPdmVybGF5IHwgQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIHBvaW50LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIGNvb3JkaW5hdGUgQSBHZW9KU09OIFBvaW50IGdlbmVyYXRlcyB0aGUgY29vcmRpbmF0ZS4gWW91IGNhbiB1c2VcclxuICAgICAgICAgKiB0aGUgY29vcmRpbmF0ZSB0byBpbnN0YW50aWF0ZSBhbiBpdGVtIHRvIHJldHVybi5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgUG9pbnQuIFRoaXMgb2JqZWN0IGNvdWxkXHJcbiAgICAgICAgICogYmUgYSBzaW1wbGUgUG9pbnQgb3IgYSBGZWF0dXJlIHdpdGggdGhlIFBvaW50IGdlb21ldHJ5IHR5cGUuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaXRlbUZvclBvaW50Pyhjb29yZGluYXRlOiBDb29yZGluYXRlLCBnZW9KU09OOiBvYmplY3QpOiBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3ZlcnJpZGVzIGEgbXVsdGlwb2ludCBvYmplY3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gaXRlbUNvbGxlY3Rpb24gQSBjb2xsZWN0aW9uIGNvbnRhaW5pbmcgYXNzb2NpYXRlZCBhbm5vdGF0aW9ucy5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgTXVsdGlQb2ludC4gVGhpcyB3aWxsXHJcbiAgICAgICAgICogY29udGFpbiBhbiBhcnJheSBvZiBnZW9tZXRyaWVzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGl0ZW1Gb3JNdWx0aVBvaW50PyhcclxuICAgICAgICAgICAgaXRlbUNvbGxlY3Rpb246IEl0ZW1Db2xsZWN0aW9uLFxyXG4gICAgICAgICAgICBnZW9KU09OOiBvYmplY3QsXHJcbiAgICAgICAgKTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3ZlcnJpZGVzIGEgcG9seWdvbi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvdmVybGF5IFlvdSBjYW4gY3VzdG9taXplIHRoZSBwcm92aWRlZCBvdmVybGF5IGJlZm9yZSByZXR1cm5pbmcgaXQsXHJcbiAgICAgICAgICogb3IgeW91IGNvdWxkIGNvbXBsZXRlbHkgcmVwbGFjZSB0aGUgb3ZlcmxheS5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgR2VvSlNPTiBvYmplY3QgZm9yIHRoaXMgcG9seWdvbi5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yUG9seWdvbj8ob3ZlcmxheTogUG9seWdvbk92ZXJsYXksIGdlb0pTT046IG9iamVjdCk6IEFubm90YXRpb24gfCBPdmVybGF5IHwgQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE92ZXJyaWRlcyBhIG11bHRpcG9seWdvbi5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBpdGVtQ29sbGVjdGlvbiBBIGNvbGxlY3Rpb24gY29udGFpbmluZyBhc3NvY2lhdGVkIG92ZXJsYXlzLlxyXG4gICAgICAgICAqIEBwYXJhbSBnZW9KU09OIFRoZSBvcmlnaW5hbCBHZW9KU09OIG9iamVjdCBmb3IgdGhpcyBNdWx0aVBvbHlnb24uIFRoaXNcclxuICAgICAgICAgKiB3aWxsIGNvbnRhaW4gYW4gYXJyYXkgb2YgZ2VvbWV0cmllcy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpdGVtRm9yTXVsdGlQb2x5Z29uPyhcclxuICAgICAgICAgICAgaXRlbUNvbGxlY3Rpb246IEl0ZW1Db2xsZWN0aW9uLFxyXG4gICAgICAgICAgICBnZW9KU09OOiBvYmplY3QsXHJcbiAgICAgICAgKTogQW5ub3RhdGlvbiB8IE92ZXJsYXkgfCBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheT47XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogT3ZlcnJpZGVzIHRoZSBzdHlsZSBvZiBvdmVybGF5cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSBvdmVybGF5IFRoZSBvdmVybGF5IHRvIHN0eWxlLlxyXG4gICAgICAgICAqIEBwYXJhbSBnZW9KU09OIFRoZSBvcmlnaW5hbCBHZW9KU09OIGZvciB0aGlzIGZlYXR1cmUgb3IgZ2VvbWV0cnkgb2JqZWN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHN0eWxlRm9yT3ZlcmxheT8ob3ZlcmxheTogT3ZlcmxheSwgZ2VvSlNPTjogb2JqZWN0KTogU3R5bGU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29tcGxldGVzIHRoZSBHZW9KU09OIGltcG9ydC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwYXJhbSByZXN1bHQgVGhlIG1hcHBlZCBpdGVtIGNvbGxlY3Rpb24uXHJcbiAgICAgICAgICogQHBhcmFtIGdlb0pTT04gVGhlIG9yaWdpbmFsIHBhcnNlZCBHZW9KU09OIG9iamVjdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZW9KU09ORGlkQ29tcGxldGU/KHJlc3VsdDogSXRlbUNvbGxlY3Rpb24sIGdlb0pTT046IG9iamVjdCk6IHZvaWQ7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW5kaWNhdGVzIHRoZSBHZW9KU09OIGltcG9ydCBmYWlsZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0gZXJyb3IgQW4gRXJyb3IgaW5zdGFuY2UgcmVsYXRlZCB0byB0aGUgbGFzdCBibG9ja2luZyBlcnJvci5cclxuICAgICAgICAgKiBAcGFyYW0gZ2VvSlNPTiBUaGUgb3JpZ2luYWwgcGFyc2VkIEdlb0pTT04gb2JqZWN0LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdlb0pTT05EaWRFcnJvcj8oZXJyb3I6IEVycm9yLCBnZW9KU09OOiBvYmplY3QpOiB2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSB0cmVlIHN0cnVjdHVyZSBjb250YWluaW5nIGFubm90YXRpb25zLCBvdmVybGF5cywgYW5kIG5lc3RlZCBpdGVtXHJcbiAgICAgKiBjb2xsZWN0aW9uIG9iamVjdHMuXHJcbiAgICAgKi9cclxuICAgIGludGVyZmFjZSBJdGVtQ29sbGVjdGlvbiB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHJhdyBHZW9KU09OIGRhdGEuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGF0YTogb2JqZWN0O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgZmxhdHRlbmVkIGFycmF5IG9mIGl0ZW1zIHRoYXQgaW5jbHVkZSBhbm5vdGF0aW9ucyBvciBvdmVybGF5cy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRGbGF0dGVuZWRJdGVtTGlzdDogQXJyYXk8QW5ub3RhdGlvbiB8IE92ZXJsYXk+O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEEgbmVzdGVkIGxpc3Qgb2YgYW5ub3RhdGlvbnMsIG92ZXJsYXlzLCBvciBvdGhlciBpdGVtIGNvbGxlY3Rpb25zLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGl0ZW1zOiBBcnJheTxBbm5vdGF0aW9uIHwgT3ZlcmxheSB8IEl0ZW1Db2xsZWN0aW9uPjtcclxuICAgIH1cclxufVxyXG5cclxuIl19